/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/theme/js/components/cookie.js":
/*!*************************************************!*\
  !*** ./resources/theme/js/components/cookie.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval(" // DOCS: https://javascript.info/cookie\n// Class definition\n\nvar KTCookie = function () {\n  return {\n    // returns the cookie with the given name,\n    // or undefined if not found\n    get: function get(name) {\n      var matches = document.cookie.match(new RegExp(\"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"));\n      return matches ? decodeURIComponent(matches[1]) : null;\n    },\n    // Please note that a cookie value is encoded,\n    // so getCookie uses a built-in decodeURIComponent function to decode it.\n    set: function set(name, value, options) {\n      if (typeof options === \"undefined\" || options === null) {\n        options = {};\n      }\n\n      options = Object.assign({}, {\n        path: '/'\n      }, options);\n\n      if (options.expires instanceof Date) {\n        options.expires = options.expires.toUTCString();\n      }\n\n      var updatedCookie = encodeURIComponent(name) + \"=\" + encodeURIComponent(value);\n\n      for (var optionKey in options) {\n        if (options.hasOwnProperty(optionKey) === false) {\n          continue;\n        }\n\n        updatedCookie += \"; \" + optionKey;\n        var optionValue = options[optionKey];\n\n        if (optionValue !== true) {\n          updatedCookie += \"=\" + optionValue;\n        }\n      }\n\n      document.cookie = updatedCookie;\n    },\n    // To remove a cookie, we can call it with a negative expiration date:\n    remove: function remove(name) {\n      this.set(name, \"\", {\n        'max-age': -1\n      });\n    }\n  };\n}(); // Webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTCookie;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvdGhlbWUvanMvY29tcG9uZW50cy9jb29raWUuanMuanMiLCJtYXBwaW5ncyI6IkNBQ0E7QUFFQTs7QUFDQSxJQUFJQSxRQUFRLEdBQUcsWUFBVztBQUN0QixTQUFPO0FBQ0g7QUFDQTtBQUNBQyxJQUFBQSxHQUFHLEVBQUUsYUFBU0MsSUFBVCxFQUFlO0FBQ2hCLFVBQUlDLE9BQU8sR0FBR0MsUUFBUSxDQUFDQyxNQUFULENBQWdCQyxLQUFoQixDQUFzQixJQUFJQyxNQUFKLENBQ2hDLGFBQWFMLElBQUksQ0FBQ00sT0FBTCxDQUFhLDhCQUFiLEVBQTZDLE1BQTdDLENBQWIsR0FBb0UsVUFEcEMsQ0FBdEIsQ0FBZDtBQUlBLGFBQU9MLE9BQU8sR0FBR00sa0JBQWtCLENBQUNOLE9BQU8sQ0FBQyxDQUFELENBQVIsQ0FBckIsR0FBb0MsSUFBbEQ7QUFDSCxLQVRFO0FBV0g7QUFDQTtBQUNBTyxJQUFBQSxHQUFHLEVBQUUsYUFBU1IsSUFBVCxFQUFlUyxLQUFmLEVBQXNCQyxPQUF0QixFQUErQjtBQUNoQyxVQUFLLE9BQU9BLE9BQVAsS0FBbUIsV0FBbkIsSUFBa0NBLE9BQU8sS0FBSyxJQUFuRCxFQUEwRDtBQUN0REEsUUFBQUEsT0FBTyxHQUFHLEVBQVY7QUFDSDs7QUFFREEsTUFBQUEsT0FBTyxHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCO0FBQ3hCQyxRQUFBQSxJQUFJLEVBQUU7QUFEa0IsT0FBbEIsRUFFUEgsT0FGTyxDQUFWOztBQUlBLFVBQUtBLE9BQU8sQ0FBQ0ksT0FBUixZQUEyQkMsSUFBaEMsRUFBdUM7QUFDbkNMLFFBQUFBLE9BQU8sQ0FBQ0ksT0FBUixHQUFrQkosT0FBTyxDQUFDSSxPQUFSLENBQWdCRSxXQUFoQixFQUFsQjtBQUNIOztBQUVELFVBQUlDLGFBQWEsR0FBR0Msa0JBQWtCLENBQUNsQixJQUFELENBQWxCLEdBQTJCLEdBQTNCLEdBQWlDa0Isa0JBQWtCLENBQUNULEtBQUQsQ0FBdkU7O0FBRUEsV0FBTSxJQUFJVSxTQUFWLElBQXVCVCxPQUF2QixFQUFpQztBQUM3QixZQUFLQSxPQUFPLENBQUNVLGNBQVIsQ0FBdUJELFNBQXZCLE1BQXNDLEtBQTNDLEVBQW1EO0FBQy9DO0FBQ0g7O0FBRURGLFFBQUFBLGFBQWEsSUFBSSxPQUFPRSxTQUF4QjtBQUNBLFlBQUlFLFdBQVcsR0FBR1gsT0FBTyxDQUFDUyxTQUFELENBQXpCOztBQUVBLFlBQUtFLFdBQVcsS0FBSyxJQUFyQixFQUE0QjtBQUN4QkosVUFBQUEsYUFBYSxJQUFJLE1BQU1JLFdBQXZCO0FBQ0g7QUFDSjs7QUFFRG5CLE1BQUFBLFFBQVEsQ0FBQ0MsTUFBVCxHQUFrQmMsYUFBbEI7QUFDSCxLQTFDRTtBQTRDSDtBQUNBSyxJQUFBQSxNQUFNLEVBQUUsZ0JBQVN0QixJQUFULEVBQWU7QUFDbkIsV0FBS1EsR0FBTCxDQUFTUixJQUFULEVBQWUsRUFBZixFQUFtQjtBQUNmLG1CQUFXLENBQUM7QUFERyxPQUFuQjtBQUdIO0FBakRFLEdBQVA7QUFtREgsQ0FwRGMsRUFBZixDLENBc0RBOzs7QUFDQSxJQUFJLFNBQWlDLE9BQU91QixNQUFNLENBQUNDLE9BQWQsS0FBMEIsV0FBL0QsRUFBNEU7QUFDeEVELEVBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjFCLFFBQWpCO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvdGhlbWUvanMvY29tcG9uZW50cy9jb29raWUuanM/NTg2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIERPQ1M6IGh0dHBzOi8vamF2YXNjcmlwdC5pbmZvL2Nvb2tpZVxuXG4vLyBDbGFzcyBkZWZpbml0aW9uXG52YXIgS1RDb29raWUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvLyByZXR1cm5zIHRoZSBjb29raWUgd2l0aCB0aGUgZ2l2ZW4gbmFtZSxcbiAgICAgICAgLy8gb3IgdW5kZWZpbmVkIGlmIG5vdCBmb3VuZFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgIHZhciBtYXRjaGVzID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICAgXCIoPzpefDsgKVwiICsgbmFtZS5yZXBsYWNlKC8oW1xcLiQ/Knx7fVxcKFxcKVxcW1xcXVxcXFxcXC9cXCteXSkvZywgJ1xcXFwkMScpICsgXCI9KFteO10qKVwiXG4gICAgICAgICAgICApKTtcblxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXMgPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hlc1sxXSkgOiBudWxsO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIFBsZWFzZSBub3RlIHRoYXQgYSBjb29raWUgdmFsdWUgaXMgZW5jb2RlZCxcbiAgICAgICAgLy8gc28gZ2V0Q29va2llIHVzZXMgYSBidWlsdC1pbiBkZWNvZGVVUklDb21wb25lbnQgZnVuY3Rpb24gdG8gZGVjb2RlIGl0LlxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoIHR5cGVvZiBvcHRpb25zID09PSBcInVuZGVmaW5lZFwiIHx8IG9wdGlvbnMgPT09IG51bGwgKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwge1xuICAgICAgICAgICAgICAgIHBhdGg6ICcvJ1xuICAgICAgICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgICAgIGlmICggb3B0aW9ucy5leHBpcmVzIGluc3RhbmNlb2YgRGF0ZSApIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmV4cGlyZXMgPSBvcHRpb25zLmV4cGlyZXMudG9VVENTdHJpbmcoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHVwZGF0ZWRDb29raWUgPSBlbmNvZGVVUklDb21wb25lbnQobmFtZSkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG5cbiAgICAgICAgICAgIGZvciAoIHZhciBvcHRpb25LZXkgaW4gb3B0aW9ucyApIHtcbiAgICAgICAgICAgICAgICBpZiAoIG9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0aW9uS2V5KSA9PT0gZmFsc2UgKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHVwZGF0ZWRDb29raWUgKz0gXCI7IFwiICsgb3B0aW9uS2V5O1xuICAgICAgICAgICAgICAgIHZhciBvcHRpb25WYWx1ZSA9IG9wdGlvbnNbb3B0aW9uS2V5XTtcblxuICAgICAgICAgICAgICAgIGlmICggb3B0aW9uVmFsdWUgIT09IHRydWUgKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRDb29raWUgKz0gXCI9XCIgKyBvcHRpb25WYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IHVwZGF0ZWRDb29raWU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gVG8gcmVtb3ZlIGEgY29va2llLCB3ZSBjYW4gY2FsbCBpdCB3aXRoIGEgbmVnYXRpdmUgZXhwaXJhdGlvbiBkYXRlOlxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0KG5hbWUsIFwiXCIsIHtcbiAgICAgICAgICAgICAgICAnbWF4LWFnZSc6IC0xXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn0oKTtcblxuLy8gV2VicGFjayBzdXBwb3J0XG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gS1RDb29raWU7XG59XG4iXSwibmFtZXMiOlsiS1RDb29raWUiLCJnZXQiLCJuYW1lIiwibWF0Y2hlcyIsImRvY3VtZW50IiwiY29va2llIiwibWF0Y2giLCJSZWdFeHAiLCJyZXBsYWNlIiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwic2V0IiwidmFsdWUiLCJvcHRpb25zIiwiT2JqZWN0IiwiYXNzaWduIiwicGF0aCIsImV4cGlyZXMiLCJEYXRlIiwidG9VVENTdHJpbmciLCJ1cGRhdGVkQ29va2llIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwib3B0aW9uS2V5IiwiaGFzT3duUHJvcGVydHkiLCJvcHRpb25WYWx1ZSIsInJlbW92ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/theme/js/components/cookie.js\n");

/***/ }),

/***/ "./resources/theme/js/components/dialer.js":
/*!*************************************************!*\
  !*** ./resources/theme/js/components/dialer.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval(" // Class definition\n\nvar KTDialer = function KTDialer(element, options) {\n  ////////////////////////////\n  // ** Private variables  ** //\n  ////////////////////////////\n  var the = this;\n\n  if (!element) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {\n    min: null,\n    max: null,\n    step: 1,\n    decimals: 0,\n    prefix: \"\",\n    suffix: \"\"\n  }; ////////////////////////////\n  // ** Private methods  ** //\n  ////////////////////////////\n  // Constructor\n\n  var _construct = function _construct() {\n    if (KTUtil.data(element).has('dialer') === true) {\n      the = KTUtil.data(element).get('dialer');\n    } else {\n      _init();\n    }\n  }; // Initialize\n\n\n  var _init = function _init() {\n    // Variables\n    the.options = KTUtil.deepExtend({}, defaultOptions, options); // Elements\n\n    the.element = element;\n    the.incElement = the.element.querySelector('[data-kt-dialer-control=\"increase\"]');\n    the.decElement = the.element.querySelector('[data-kt-dialer-control=\"decrease\"]');\n    the.inputElement = the.element.querySelector('input[type]'); // Set Values\n\n    if (_getOption('decimals')) {\n      the.options.decimals = parseInt(_getOption('decimals'));\n    }\n\n    if (_getOption('prefix')) {\n      the.options.prefix = _getOption('prefix');\n    }\n\n    if (_getOption('suffix')) {\n      the.options.suffix = _getOption('suffix');\n    }\n\n    if (_getOption('step')) {\n      the.options.step = parseFloat(_getOption('step'));\n    }\n\n    if (_getOption('min')) {\n      the.options.min = parseFloat(_getOption('min'));\n    }\n\n    if (_getOption('max')) {\n      the.options.max = parseFloat(_getOption('max'));\n    }\n\n    the.value = parseFloat(the.inputElement.value.replace(/[^\\d.]/g, ''));\n\n    _setValue(); // Event Handlers\n\n\n    _handlers(); // Bind Instance\n\n\n    KTUtil.data(the.element).set('dialer', the);\n  }; // Handlers\n\n\n  var _handlers = function _handlers() {\n    KTUtil.addEvent(the.incElement, 'click', function (e) {\n      e.preventDefault();\n\n      _increase();\n    });\n    KTUtil.addEvent(the.decElement, 'click', function (e) {\n      e.preventDefault();\n\n      _decrease();\n    });\n    KTUtil.addEvent(the.inputElement, 'change', function (e) {\n      e.preventDefault();\n\n      _setValue();\n    });\n  }; // Event handlers\n\n\n  var _increase = function _increase() {\n    // Trigger \"after.dialer\" event\n    KTEventHandler.trigger(the.element, 'kt.dialer.increase', the);\n    the.inputElement.value = the.value + the.options.step;\n\n    _setValue(); // Trigger \"before.dialer\" event\n\n\n    KTEventHandler.trigger(the.element, 'kt.dialer.increased', the);\n    return the;\n  };\n\n  var _decrease = function _decrease() {\n    // Trigger \"after.dialer\" event\n    KTEventHandler.trigger(the.element, 'kt.dialer.decrease', the);\n    the.inputElement.value = the.value - the.options.step;\n\n    _setValue(); // Trigger \"before.dialer\" event\n\n\n    KTEventHandler.trigger(the.element, 'kt.dialer.decreased', the);\n    return the;\n  }; // Set Input Value\n\n\n  var _setValue = function _setValue() {\n    // Trigger \"after.dialer\" event\n    KTEventHandler.trigger(the.element, 'kt.dialer.change', the);\n    the.value = parseFloat(the.inputElement.value.replace(/[^\\d.]/g, ''));\n\n    if (the.value < the.options.min) {\n      the.value = the.options.min;\n    }\n\n    if (the.value > the.options.max) {\n      the.value = the.options.max;\n    }\n\n    the.inputElement.value = _format(the.value); // Trigger \"after.dialer\" event\n\n    KTEventHandler.trigger(the.element, 'kt.dialer.changed', the);\n  }; // Format\n\n\n  var _format = function _format(val) {\n    return the.options.prefix + parseFloat(val).toFixed(the.options.decimals) + the.options.suffix;\n  }; // Get option\n\n\n  var _getOption = function _getOption(name) {\n    if (the.element.hasAttribute('data-kt-dialer-' + name) === true) {\n      var attr = the.element.getAttribute('data-kt-dialer-' + name);\n      var value = attr;\n      return value;\n    } else {\n      return null;\n    }\n  };\n\n  var _destroy = function _destroy() {\n    KTUtil.data(the.element).remove('dialer');\n  }; // Construct class\n\n\n  _construct(); ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n  // Plugin API\n\n\n  the.increase = function () {\n    return _increase();\n  };\n\n  the.decrease = function () {\n    return _decrease();\n  };\n\n  the.getElement = function () {\n    return the.element;\n  };\n\n  the.destroy = function () {\n    return _destroy();\n  }; // Event API\n\n\n  the.on = function (name, handler) {\n    return KTEventHandler.on(the.element, name, handler);\n  };\n\n  the.one = function (name, handler) {\n    return KTEventHandler.one(the.element, name, handler);\n  };\n\n  the.off = function (name) {\n    return KTEventHandler.off(the.element, name);\n  };\n\n  the.trigger = function (name, event) {\n    return KTEventHandler.trigger(the.element, name, event, the, event);\n  };\n}; // Static methods\n\n\nKTDialer.getInstance = function (element) {\n  if (element !== null && KTUtil.data(element).has('dialer')) {\n    return KTUtil.data(element).get('dialer');\n  } else {\n    return null;\n  }\n}; // Create instances\n\n\nKTDialer.createInstances = function () {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-kt-dialer=\"true\"]';\n  // Get instances\n  var elements = document.body.querySelectorAll(selector);\n\n  if (elements && elements.length > 0) {\n    for (var i = 0, len = elements.length; i < len; i++) {\n      // Initialize instances\n      new KTDialer(elements[i]);\n    }\n  }\n}; // Global initialization\n\n\nKTDialer.init = function () {\n  KTDialer.createInstances();\n}; // On document ready\n\n\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', KTDialer.init);\n} else {\n  KTDialer.init();\n} // Webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTDialer;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/theme/js/components/dialer.js\n");

/***/ }),

/***/ "./resources/theme/js/components/drawer.js":
/*!*************************************************!*\
  !*** ./resources/theme/js/components/drawer.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval(" // Class definition\n\nvar KTDrawer = function KTDrawer(element, options) {\n  //////////////////////////////\n  // ** Private variables  ** //\n  //////////////////////////////\n  var the = this;\n  var body = document.getElementsByTagName(\"BODY\")[0];\n\n  if (typeof element === \"undefined\" || element === null) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {\n    overlay: true,\n    direction: 'end',\n    baseClass: 'drawer',\n    overlayClass: 'drawer-overlay'\n  }; ////////////////////////////\n  // ** Private methods  ** //\n  ////////////////////////////\n\n  var _construct = function _construct() {\n    if (KTUtil.data(element).has('drawer')) {\n      the = KTUtil.data(element).get('drawer');\n    } else {\n      _init();\n    }\n  };\n\n  var _init = function _init() {\n    // Variables\n    the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    the.uid = KTUtil.getUniqueId('drawer');\n    the.element = element;\n    the.overlayElement = null;\n    the.name = the.element.getAttribute('data-kt-drawer-name');\n    the.shown = false;\n    the.lastWidth;\n    the.toggleElement = null; // Set initialized\n\n    the.element.setAttribute('data-kt-drawer', 'true'); // Event Handlers\n\n    _handlers(); // Update Instance\n\n\n    _update(); // Bind Instance\n\n\n    KTUtil.data(the.element).set('drawer', the);\n  };\n\n  var _handlers = function _handlers() {\n    var togglers = _getOption('toggle');\n\n    var closers = _getOption('close');\n\n    if (togglers !== null && togglers.length > 0) {\n      KTUtil.on(body, togglers, 'click', function (e) {\n        e.preventDefault();\n        the.toggleElement = this;\n\n        _toggle();\n      });\n    }\n\n    if (closers !== null && closers.length > 0) {\n      KTUtil.on(body, closers, 'click', function (e) {\n        e.preventDefault();\n        the.closeElement = this;\n\n        _hide();\n      });\n    }\n  };\n\n  var _toggle = function _toggle() {\n    if (KTEventHandler.trigger(the.element, 'kt.drawer.toggle', the) === false) {\n      return;\n    }\n\n    if (the.shown === true) {\n      _hide();\n    } else {\n      _show();\n    }\n\n    KTEventHandler.trigger(the.element, 'kt.drawer.toggled', the);\n  };\n\n  var _hide = function _hide() {\n    if (KTEventHandler.trigger(the.element, 'kt.drawer.hide', the) === false) {\n      return;\n    }\n\n    the.shown = false;\n\n    _deleteOverlay();\n\n    body.removeAttribute('data-kt-drawer-' + the.name, 'on');\n    body.removeAttribute('data-kt-drawer');\n    KTUtil.removeClass(the.element, the.options.baseClass + '-on');\n\n    if (the.toggleElement !== null) {\n      KTUtil.removeClass(the.toggleElement, 'active');\n    }\n\n    KTEventHandler.trigger(the.element, 'kt.drawer.after.hidden', the) === false;\n  };\n\n  var _show = function _show() {\n    if (KTEventHandler.trigger(the.element, 'kt.drawer.show', the) === false) {\n      return;\n    }\n\n    the.shown = true;\n\n    _createOverlay();\n\n    body.setAttribute('data-kt-drawer-' + the.name, 'on');\n    body.setAttribute('data-kt-drawer', 'on');\n    KTUtil.addClass(the.element, the.options.baseClass + '-on');\n\n    if (the.toggleElement !== null) {\n      KTUtil.addClass(the.toggleElement, 'active');\n    }\n\n    KTEventHandler.trigger(the.element, 'kt.drawer.shown', the);\n  };\n\n  var _update = function _update() {\n    var width = _getWidth();\n\n    var direction = _getOption('direction'); // Reset state\n\n\n    if (KTUtil.hasClass(the.element, the.options.baseClass + '-on') === true && String(body.getAttribute('data-kt-drawer-' + the.name + '-')) === 'on') {\n      the.shown = true;\n    } else {\n      the.shown = false;\n    } // Activate/deactivate\n\n\n    if (_getOption('activate') === true) {\n      KTUtil.addClass(the.element, the.options.baseClass);\n      KTUtil.addClass(the.element, the.options.baseClass + '-' + direction);\n      KTUtil.css(the.element, 'width', width, true);\n      the.lastWidth = width;\n    } else {\n      KTUtil.css(the.element, 'width', '');\n      KTUtil.removeClass(the.element, the.options.baseClass);\n      KTUtil.removeClass(the.element, the.options.baseClass + '-' + direction);\n\n      _hide();\n    }\n  };\n\n  var _createOverlay = function _createOverlay() {\n    if (_getOption('overlay') === true) {\n      the.overlayElement = document.createElement('DIV');\n      KTUtil.css(the.overlayElement, 'z-index', KTUtil.css(the.element, 'z-index') - 1); // update\n\n      body.append(the.overlayElement);\n      KTUtil.addClass(the.overlayElement, _getOption('overlay-class'));\n      KTUtil.addEvent(the.overlayElement, 'click', function (e) {\n        e.preventDefault();\n\n        _hide();\n      });\n    }\n  };\n\n  var _deleteOverlay = function _deleteOverlay() {\n    if (the.overlayElement !== null) {\n      KTUtil.remove(the.overlayElement);\n    }\n  };\n\n  var _getOption = function _getOption(name) {\n    if (the.element.hasAttribute('data-kt-drawer-' + name) === true) {\n      var attr = the.element.getAttribute('data-kt-drawer-' + name);\n      var value = KTUtil.getResponsiveValue(attr);\n\n      if (value !== null && String(value) === 'true') {\n        value = true;\n      } else if (value !== null && String(value) === 'false') {\n        value = false;\n      }\n\n      return value;\n    } else {\n      var optionName = KTUtil.snakeToCamel(name);\n\n      if (the.options[optionName]) {\n        return KTUtil.getResponsiveValue(the.options[optionName]);\n      } else {\n        return null;\n      }\n    }\n  };\n\n  var _getWidth = function _getWidth() {\n    var width = _getOption('width');\n\n    if (width === 'auto') {\n      width = KTUtil.css(the.element, 'width');\n    }\n\n    return width;\n  };\n\n  var _destroy = function _destroy() {\n    KTUtil.data(the.element).remove('drawer');\n  }; // Construct class\n\n\n  _construct(); ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n  // Plugin API\n\n\n  the.toggle = function () {\n    return _toggle();\n  };\n\n  the.show = function () {\n    return _show();\n  };\n\n  the.hide = function () {\n    return _hide();\n  };\n\n  the.isShown = function () {\n    return the.shown;\n  };\n\n  the.update = function () {\n    _update();\n  };\n\n  the.goElement = function () {\n    return the.element;\n  };\n\n  the.destroy = function () {\n    return _destroy();\n  }; // Event API\n\n\n  the.on = function (name, handler) {\n    return KTEventHandler.on(the.element, name, handler);\n  };\n\n  the.one = function (name, handler) {\n    return KTEventHandler.one(the.element, name, handler);\n  };\n\n  the.off = function (name) {\n    return KTEventHandler.off(the.element, name);\n  };\n\n  the.trigger = function (name, event) {\n    return KTEventHandler.trigger(the.element, name, event, the, event);\n  };\n}; // Static methods\n\n\nKTDrawer.getInstance = function (element) {\n  if (element !== null && KTUtil.data(element).has('drawer')) {\n    return KTUtil.data(element).get('drawer');\n  } else {\n    return null;\n  }\n}; // Hide all drawers and skip one if provided\n\n\nKTDrawer.hideAll = function () {\n  var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '[data-kt-drawer=\"true\"]';\n  var items = document.querySelectorAll(selector);\n\n  if (items && items.length > 0) {\n    for (var i = 0, len = items.length; i < len; i++) {\n      var item = items[i];\n      var drawer = KTDrawer.getInstance(item);\n\n      if (!drawer) {\n        continue;\n      }\n\n      if (skip) {\n        if (item !== skip) {\n          drawer.hide();\n        }\n      } else {\n        drawer.hide();\n      }\n    }\n  }\n}; // Update all drawers\n\n\nKTDrawer.updateAll = function () {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-kt-drawer=\"true\"]';\n  var items = document.querySelectorAll(selector);\n\n  if (items && items.length > 0) {\n    for (var i = 0, len = items.length; i < len; i++) {\n      var item = items[i];\n      var drawer = KTDrawer.getInstance(item);\n\n      if (drawer) {\n        drawer.update();\n        ;\n      }\n    }\n  }\n}; // Create instances\n\n\nKTDrawer.createInstances = function () {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-kt-drawer=\"true\"]';\n  var body = document.getElementsByTagName(\"BODY\")[0]; // Initialize Menus\n\n  var elements = body.querySelectorAll(selector);\n  var drawer;\n\n  if (elements && elements.length > 0) {\n    for (var i = 0, len = elements.length; i < len; i++) {\n      drawer = new KTDrawer(elements[i]);\n    }\n  }\n}; // Toggle instances\n\n\nKTDrawer.handleShow = function () {\n  // External drawer toggle handler\n  KTUtil.on(document.body, '[data-kt-drawer-show=\"true\"][data-kt-drawer-target]', 'click', function (e) {\n    var element = document.querySelector(this.getAttribute('data-kt-drawer-target'));\n\n    if (element) {\n      KTDrawer.getInstance(element).show();\n    }\n  });\n}; // Dismiss instances\n\n\nKTDrawer.handleDismiss = function () {\n  // External drawer toggle handler\n  KTUtil.on(document.body, '[data-kt-drawer-dismiss=\"true\"]', 'click', function (e) {\n    var element = this.closest('[data-kt-drawer=\"true\"]');\n\n    if (element) {\n      var drawer = KTDrawer.getInstance(element);\n\n      if (drawer.isShown()) {\n        drawer.hide();\n      }\n    }\n  });\n}; // Window resize Handling\n\n\nwindow.addEventListener('resize', function () {\n  var timer;\n  var body = document.getElementsByTagName(\"BODY\")[0];\n  KTUtil.throttle(timer, function () {\n    // Locate and update drawer instances on window resize\n    var elements = body.querySelectorAll('[data-kt-drawer=\"true\"]');\n\n    if (elements && elements.length > 0) {\n      for (var i = 0, len = elements.length; i < len; i++) {\n        var drawer = KTDrawer.getInstance(elements[i]);\n\n        if (drawer) {\n          drawer.update();\n        }\n      }\n    }\n  }, 200);\n}); // Global initialization\n\nKTDrawer.init = function () {\n  KTDrawer.createInstances();\n  KTDrawer.handleShow();\n  KTDrawer.handleDismiss();\n}; // On document ready\n\n\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', KTDrawer.init);\n} else {\n  KTDrawer.init();\n} // Webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTDrawer;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/theme/js/components/drawer.js\n");

/***/ }),

/***/ "./resources/theme/js/components/event-handler.js":
/*!********************************************************!*\
  !*** ./resources/theme/js/components/event-handler.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";
eval(" // Class definition\n\nvar KTEventHandler = function () {\n  ////////////////////////////\n  // ** Private Variables  ** //\n  ////////////////////////////\n  var _handlers = {}; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var _triggerEvent = function _triggerEvent(element, name, target, e) {\n    if (KTUtil.data(element).has(name) === true) {\n      var handlerId = KTUtil.data(element).get(name);\n\n      if (_handlers[name] && _handlers[name][handlerId]) {\n        var handler = _handlers[name][handlerId];\n\n        if (handler.name === name) {\n          if (handler.one == true) {\n            if (handler.fired == false) {\n              _handlers[name][handlerId].fired = true;\n              return handler.callback.call(this, target, e);\n            }\n          } else {\n            return handler.callback.call(this, target, e);\n          }\n        }\n      }\n    }\n\n    return null;\n  };\n\n  var _addEvent = function _addEvent(element, name, callback, one) {\n    var handlerId = KTUtil.getUniqueId('event');\n    KTUtil.data(element).set(name, handlerId);\n\n    if (!_handlers[name]) {\n      _handlers[name] = {};\n    }\n\n    _handlers[name][handlerId] = {\n      name: name,\n      callback: callback,\n      one: one,\n      fired: false\n    };\n  };\n\n  var _removeEvent = function _removeEvent(element, name) {\n    var handlerId = KTUtil.data(element).get(name);\n\n    if (_handlers[name] && _handlers[name][handlerId]) {\n      delete _handlers[name][handlerId];\n    }\n  }; ////////////////////////////\n  // ** Public Methods  ** //\n  ////////////////////////////\n\n\n  return {\n    trigger: function trigger(element, name, target, e) {\n      return _triggerEvent(element, name, target, e);\n    },\n    on: function on(element, name, handler) {\n      return _addEvent(element, name, handler);\n    },\n    one: function one(element, name, handler) {\n      return _addEvent(element, name, handler, true);\n    },\n    off: function off(element, name) {\n      return _removeEvent(element, name);\n    },\n    debug: function debug() {\n      for (var b in _handlers) {\n        if (_handlers.hasOwnProperty(b)) console.log(b);\n      }\n    }\n  };\n}(); // Webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTEventHandler;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvdGhlbWUvanMvY29tcG9uZW50cy9ldmVudC1oYW5kbGVyLmpzLmpzIiwibWFwcGluZ3MiOiJDQUVBOztBQUNBLElBQUlBLGNBQWMsR0FBRyxZQUFXO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLE1BQUlDLFNBQVMsR0FBRyxFQUFoQixDQUo0QixDQU01QjtBQUNBO0FBQ0E7O0FBQ0EsTUFBSUMsYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixDQUFTQyxPQUFULEVBQWtCQyxJQUFsQixFQUF3QkMsTUFBeEIsRUFBZ0NDLENBQWhDLEVBQW1DO0FBQ25ELFFBQUtDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZTCxPQUFaLEVBQXFCTSxHQUFyQixDQUF5QkwsSUFBekIsTUFBbUMsSUFBeEMsRUFBK0M7QUFDM0MsVUFBSU0sU0FBUyxHQUFHSCxNQUFNLENBQUNDLElBQVAsQ0FBWUwsT0FBWixFQUFxQlEsR0FBckIsQ0FBeUJQLElBQXpCLENBQWhCOztBQUVBLFVBQUtILFNBQVMsQ0FBQ0csSUFBRCxDQUFULElBQW1CSCxTQUFTLENBQUNHLElBQUQsQ0FBVCxDQUFnQk0sU0FBaEIsQ0FBeEIsRUFBcUQ7QUFDakQsWUFBSUUsT0FBTyxHQUFHWCxTQUFTLENBQUNHLElBQUQsQ0FBVCxDQUFnQk0sU0FBaEIsQ0FBZDs7QUFFQSxZQUFLRSxPQUFPLENBQUNSLElBQVIsS0FBaUJBLElBQXRCLEVBQTZCO0FBQ3pCLGNBQUtRLE9BQU8sQ0FBQ0MsR0FBUixJQUFlLElBQXBCLEVBQTJCO0FBQ3ZCLGdCQUFLRCxPQUFPLENBQUNFLEtBQVIsSUFBaUIsS0FBdEIsRUFBOEI7QUFDMUJiLGNBQUFBLFNBQVMsQ0FBQ0csSUFBRCxDQUFULENBQWdCTSxTQUFoQixFQUEyQkksS0FBM0IsR0FBbUMsSUFBbkM7QUFFQSxxQkFBT0YsT0FBTyxDQUFDRyxRQUFSLENBQWlCQyxJQUFqQixDQUFzQixJQUF0QixFQUE0QlgsTUFBNUIsRUFBb0NDLENBQXBDLENBQVA7QUFDSDtBQUNKLFdBTkQsTUFN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TSxDQUFDQyxPQUFQLEdBQWlCOUIsY0FBakI7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy90aGVtZS9qcy9jb21wb25lbnRzL2V2ZW50LWhhbmRsZXIuanM/MmIyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLy8gQ2xhc3MgZGVmaW5pdGlvblxudmFyIEtURXZlbnRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vICoqIFByaXZhdGUgVmFyaWFibGVzICAqKiAvL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICB2YXIgX2hhbmRsZXJzID0ge307XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gKiogUHJpdmF0ZSBNZXRob2RzICAqKiAvL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICB2YXIgX3RyaWdnZXJFdmVudCA9IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIHRhcmdldCwgZSkge1xuICAgICAgICBpZiAoIEtUVXRpbC5kYXRhKGVsZW1lbnQpLmhhcyhuYW1lKSA9PT0gdHJ1ZSApIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGVySWQgPSBLVFV0aWwuZGF0YShlbGVtZW50KS5nZXQobmFtZSk7XG5cbiAgICAgICAgICAgIGlmICggX2hhbmRsZXJzW25hbWVdICYmIF9oYW5kbGVyc1tuYW1lXVtoYW5kbGVySWRdICkge1xuICAgICAgICAgICAgICAgIHZhciBoYW5kbGVyID0gX2hhbmRsZXJzW25hbWVdW2hhbmRsZXJJZF07XG5cbiAgICAgICAgICAgICAgICBpZiAoIGhhbmRsZXIubmFtZSA9PT0gbmFtZSApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBoYW5kbGVyLm9uZSA9PSB0cnVlICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBoYW5kbGVyLmZpcmVkID09IGZhbHNlICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9oYW5kbGVyc1tuYW1lXVtoYW5kbGVySWRdLmZpcmVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVyLmNhbGxiYWNrLmNhbGwodGhpcywgdGFyZ2V0LCBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVyLmNhbGxiYWNrLmNhbGwodGhpcywgdGFyZ2V0LCBlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBfYWRkRXZlbnQgPSBmdW5jdGlvbihlbGVtZW50LCBuYW1lLCBjYWxsYmFjaywgb25lKSB7XG4gICAgICAgIHZhciBoYW5kbGVySWQgPSBLVFV0aWwuZ2V0VW5pcXVlSWQoJ2V2ZW50Jyk7XG5cbiAgICAgICAgS1RVdGlsLmRhdGEoZWxlbWVudCkuc2V0KG5hbWUsIGhhbmRsZXJJZCk7XG5cbiAgICAgICAgaWYgKCAhX2hhbmRsZXJzW25hbWVdICkge1xuICAgICAgICAgICAgX2hhbmRsZXJzW25hbWVdID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBfaGFuZGxlcnNbbmFtZV1baGFuZGxlcklkXSA9IHtcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgICAgICBvbmU6IG9uZSxcbiAgICAgICAgICAgIGZpcmVkOiBmYWxzZVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBfcmVtb3ZlRXZlbnQgPSBmdW5jdGlvbihlbGVtZW50LCBuYW1lKSB7XG4gICAgICAgIHZhciBoYW5kbGVySWQgPSBLVFV0aWwuZGF0YShlbGVtZW50KS5nZXQobmFtZSk7XG5cbiAgICAgICAgaWYgKF9oYW5kbGVyc1tuYW1lXSAmJiBfaGFuZGxlcnNbbmFtZV1baGFuZGxlcklkXSkge1xuICAgICAgICAgICAgZGVsZXRlIF9oYW5kbGVyc1tuYW1lXVtoYW5kbGVySWRdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vICoqIFB1YmxpYyBNZXRob2RzICAqKiAvL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICByZXR1cm4ge1xuICAgICAgICB0cmlnZ2VyOiBmdW5jdGlvbihlbGVtZW50LCBuYW1lLCB0YXJnZXQsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiBfdHJpZ2dlckV2ZW50KGVsZW1lbnQsIG5hbWUsIHRhcmdldCwgZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgb246IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBfYWRkRXZlbnQoZWxlbWVudCwgbmFtZSwgaGFuZGxlcik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgb25lOiBmdW5jdGlvbihlbGVtZW50LCBuYW1lLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gX2FkZEV2ZW50KGVsZW1lbnQsIG5hbWUsIGhhbmRsZXIsIHRydWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIG9mZjogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIF9yZW1vdmVFdmVudChlbGVtZW50LCBuYW1lKTtcbiAgICAgICAgfSxcblxuICAgICAgICBkZWJ1ZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBiIGluIF9oYW5kbGVycykge1xuICAgICAgICAgICAgICAgIGlmICggX2hhbmRsZXJzLmhhc093blByb3BlcnR5KGIpICkgY29uc29sZS5sb2coYik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59KCk7XG5cbi8vIFdlYnBhY2sgc3VwcG9ydFxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEtURXZlbnRIYW5kbGVyO1xufVxuIl0sIm5hbWVzIjpbIktURXZlbnRIYW5kbGVyIiwiX2hhbmRsZXJzIiwiX3RyaWdnZXJFdmVudCIsImVsZW1lbnQiLCJuYW1lIiwidGFyZ2V0IiwiZSIsIktUVXRpbCIsImRhdGEiLCJoYXMiLCJoYW5kbGVySWQiLCJnZXQiLCJoYW5kbGVyIiwib25lIiwiZmlyZWQiLCJjYWxsYmFjayIsImNhbGwiLCJfYWRkRXZlbnQiLCJnZXRVbmlxdWVJZCIsInNldCIsIl9yZW1vdmVFdmVudCIsInRyaWdnZXIiLCJvbiIsIm9mZiIsImRlYnVnIiwiYiIsImhhc093blByb3BlcnR5IiwiY29uc29sZSIsImxvZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/theme/js/components/event-handler.js\n");

/***/ }),

/***/ "./resources/theme/js/components/feedback.js":
/*!***************************************************!*\
  !*** ./resources/theme/js/components/feedback.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";
eval(" // Class definition\n\nvar KTFeedback = function KTFeedback(options) {\n  ////////////////////////////\n  // ** Private Variables  ** //\n  ////////////////////////////\n  var the = this;\n  var body = document.getElementsByTagName(\"BODY\")[0]; // Default options\n\n  var defaultOptions = {\n    'width': 100,\n    'placement': 'top-center',\n    'content': '',\n    'type': 'popup'\n  }; ////////////////////////////\n  // ** Private methods  ** //\n  ////////////////////////////\n\n  var _construct = function _construct() {\n    _init();\n  };\n\n  var _init = function _init() {\n    // Variables\n    the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    the.uid = KTUtil.getUniqueId('feedback');\n    the.element;\n    the.shown = false; // Event Handlers\n\n    _handlers(); // Bind Instance\n\n\n    KTUtil.data(the.element).set('feedback', the);\n  };\n\n  var _handlers = function _handlers() {\n    KTUtil.addEvent(the.element, 'click', function (e) {\n      e.preventDefault();\n\n      _go();\n    });\n  };\n\n  var _show = function _show() {\n    if (KTEventHandler.trigger(the.element, 'kt.feedback.show', the) === false) {\n      return;\n    }\n\n    if (the.options.type === 'popup') {\n      _showPopup();\n    }\n\n    KTEventHandler.trigger(the.element, 'kt.feedback.shown', the);\n    return the;\n  };\n\n  var _hide = function _hide() {\n    if (KTEventHandler.trigger(the.element, 'kt.feedback.hide', the) === false) {\n      return;\n    }\n\n    if (the.options.type === 'popup') {\n      _hidePopup();\n    }\n\n    the.shown = false;\n    KTEventHandler.trigger(the.element, 'kt.feedback.hidden', the);\n    return the;\n  };\n\n  var _showPopup = function _showPopup() {\n    the.element = document.createElement(\"DIV\");\n    KTUtil.addClass(the.element, 'feedback feedback-popup');\n    KTUtil.setHTML(the.element, the.options.content);\n\n    if (the.options.placement == 'top-center') {\n      _setPopupTopCenterPosition();\n    }\n\n    body.appendChild(the.element);\n    KTUtil.addClass(the.element, 'feedback-shown');\n    the.shown = true;\n  };\n\n  var _setPopupTopCenterPosition = function _setPopupTopCenterPosition() {\n    var width = KTUtil.getResponsiveValue(the.options.width);\n    var height = KTUtil.css(the.element, 'height');\n    KTUtil.addClass(the.element, 'feedback-top-center');\n    KTUtil.css(the.element, 'width', width);\n    KTUtil.css(the.element, 'left', '50%');\n    KTUtil.css(the.element, 'top', '-' + height);\n  };\n\n  var _hidePopup = function _hidePopup() {\n    the.element.remove();\n  };\n\n  var _destroy = function _destroy() {\n    KTUtil.data(the.element).remove('feedback');\n  }; // Construct class\n\n\n  _construct(); ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n  // Plugin API\n\n\n  the.show = function () {\n    return _show();\n  };\n\n  the.hide = function () {\n    return _hide();\n  };\n\n  the.isShown = function () {\n    return the.shown;\n  };\n\n  the.getElement = function () {\n    return the.element;\n  };\n\n  the.destroy = function () {\n    return _destroy();\n  }; // Event API\n\n\n  the.on = function (name, handler) {\n    return KTEventHandler.on(the.element, name, handler);\n  };\n\n  the.one = function (name, handler) {\n    return KTEventHandler.one(the.element, name, handler);\n  };\n\n  the.off = function (name) {\n    return KTEventHandler.off(the.element, name);\n  };\n\n  the.trigger = function (name, event) {\n    return KTEventHandler.trigger(the.element, name, event, the, event);\n  };\n}; // Webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTFeedback;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/theme/js/components/feedback.js\n");

/***/ }),

/***/ "./resources/theme/js/components/image-input.js":
/*!******************************************************!*\
  !*** ./resources/theme/js/components/image-input.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
eval(" // Class definition\n\nvar KTImageInput = function KTImageInput(element, options) {\n  ////////////////////////////\n  // ** Private Variables  ** //\n  ////////////////////////////\n  var the = this;\n\n  if (typeof element === \"undefined\" || element === null) {\n    return;\n  } // Default Options\n\n\n  var defaultOptions = {}; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var _construct = function _construct() {\n    if (KTUtil.data(element).has('image-input') === true) {\n      the = KTUtil.data(element).get('image-input');\n    } else {\n      _init();\n    }\n  };\n\n  var _init = function _init() {\n    // Variables\n    the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    the.uid = KTUtil.getUniqueId('image-input'); // Elements\n\n    the.element = element;\n    the.inputElement = KTUtil.find(element, 'input[type=\"file\"]');\n    the.wrapperElement = KTUtil.find(element, '.image-input-wrapper');\n    the.cancelElement = KTUtil.find(element, '[data-kt-image-input-action=\"cancel\"]');\n    the.removeElement = KTUtil.find(element, '[data-kt-image-input-action=\"remove\"]');\n    the.hiddenElement = KTUtil.find(element, 'input[type=\"hidden\"]');\n    the.src = KTUtil.css(the.wrapperElement, 'backgroundImage'); // Set initialized\n\n    the.element.setAttribute('data-kt-image-input', 'true'); // Event Handlers\n\n    _handlers(); // Bind Instance\n\n\n    KTUtil.data(the.element).set('image-input', the);\n  }; // Init Event Handlers\n\n\n  var _handlers = function _handlers() {\n    KTUtil.addEvent(the.inputElement, 'change', _change);\n    KTUtil.addEvent(the.cancelElement, 'click', _cancel);\n    KTUtil.addEvent(the.removeElement, 'click', _remove);\n  }; // Event Handlers\n\n\n  var _change = function _change(e) {\n    e.preventDefault();\n\n    if (the.inputElement !== null && the.inputElement.files && the.inputElement.files[0]) {\n      // Fire change event\n      if (KTEventHandler.trigger(the.element, 'kt.imageinput.change', the) === false) {\n        return;\n      }\n\n      var reader = new FileReader();\n\n      reader.onload = function (e) {\n        KTUtil.css(the.wrapperElement, 'background-image', 'url(' + e.target.result + ')');\n      };\n\n      reader.readAsDataURL(the.inputElement.files[0]);\n      KTUtil.addClass(the.element, 'image-input-changed');\n      KTUtil.removeClass(the.element, 'image-input-empty'); // Fire removed event\n\n      KTEventHandler.trigger(the.element, 'kt.imageinput.changed', the);\n    }\n  };\n\n  var _cancel = function _cancel(e) {\n    e.preventDefault(); // Fire cancel event\n\n    if (KTEventHandler.trigger(the.element, 'kt.imageinput.cancel', the) === false) {\n      return;\n    }\n\n    KTUtil.removeClass(the.element, 'image-input-changed');\n    KTUtil.removeClass(the.element, 'image-input-empty');\n    KTUtil.css(the.wrapperElement, 'background-image', the.src);\n    the.inputElement.value = \"\";\n\n    if (the.hiddenElement !== null) {\n      the.hiddenElement.value = \"0\";\n    } // Fire canceled event\n\n\n    KTEventHandler.trigger(the.element, 'kt.imageinput.canceled', the);\n  };\n\n  var _remove = function _remove(e) {\n    e.preventDefault(); // Fire remove event\n\n    if (KTEventHandler.trigger(the.element, 'kt.imageinput.remove', the) === false) {\n      return;\n    }\n\n    KTUtil.removeClass(the.element, 'image-input-changed');\n    KTUtil.addClass(the.element, 'image-input-empty');\n    KTUtil.css(the.wrapperElement, 'background-image', \"none\");\n    the.inputElement.value = \"\";\n\n    if (the.hiddenElement !== null) {\n      the.hiddenElement.value = \"1\";\n    } // Fire removed event\n\n\n    KTEventHandler.trigger(the.element, 'kt.imageinput.removed', the);\n  };\n\n  var _destroy = function _destroy() {\n    KTUtil.data(the.element).remove('image-input');\n  }; // Construct Class\n\n\n  _construct(); ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n  // Plugin API\n\n\n  the.getInputElement = function () {\n    return the.inputElement;\n  };\n\n  the.goElement = function () {\n    return the.element;\n  };\n\n  the.destroy = function () {\n    return _destroy();\n  }; // Event API\n\n\n  the.on = function (name, handler) {\n    return KTEventHandler.on(the.element, name, handler);\n  };\n\n  the.one = function (name, handler) {\n    return KTEventHandler.one(the.element, name, handler);\n  };\n\n  the.off = function (name) {\n    return KTEventHandler.off(the.element, name);\n  };\n\n  the.trigger = function (name, event) {\n    return KTEventHandler.trigger(the.element, name, event, the, event);\n  };\n}; // Static methods\n\n\nKTImageInput.getInstance = function (element) {\n  if (element !== null && KTUtil.data(element).has('image-input')) {\n    return KTUtil.data(element).get('image-input');\n  } else {\n    return null;\n  }\n}; // Create instances\n\n\nKTImageInput.createInstances = function () {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-kt-image-input]';\n  // Initialize Menus\n  var elements = document.querySelectorAll(selector);\n\n  if (elements && elements.length > 0) {\n    for (var i = 0, len = elements.length; i < len; i++) {\n      new KTImageInput(elements[i]);\n    }\n  }\n}; // Global initialization\n\n\nKTImageInput.init = function () {\n  KTImageInput.createInstances();\n}; // On document ready\n\n\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', KTImageInput.init);\n} else {\n  KTImageInput.init();\n} // Webpack Support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTImageInput;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/theme/js/components/image-input.js\n");

/***/ }),

/***/ "./resources/theme/js/components/menu.js":
/*!***********************************************!*\
  !*** ./resources/theme/js/components/menu.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval(" // Class definition\n\nvar KTMenu = function KTMenu(element, options) {\n  ////////////////////////////\n  // ** Private Variables  ** //\n  ////////////////////////////\n  var the = this;\n\n  if (typeof element === \"undefined\" || element === null) {\n    return;\n  } // Default Options\n\n\n  var defaultOptions = {\n    dropdown: {\n      hoverTimeout: 200,\n      zindex: 105\n    },\n    accordion: {\n      slideSpeed: 250,\n      expand: false\n    }\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var _construct = function _construct() {\n    if (KTUtil.data(element).has('menu') === true) {\n      the = KTUtil.data(element).get('menu');\n    } else {\n      _init();\n    }\n  };\n\n  var _init = function _init() {\n    the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    the.uid = KTUtil.getUniqueId('menu');\n    the.element = element;\n    the.triggerElement; // Set initialized\n\n    the.element.setAttribute('data-kt-menu', 'true');\n\n    _setTriggerElement();\n\n    _update();\n\n    KTUtil.data(the.element).set('menu', the);\n  };\n\n  var _destroy = function _destroy() {// todo\n  }; // Event Handlers\n  // Toggle handler\n\n\n  var _click = function _click(element, e) {\n    e.preventDefault();\n\n    var item = _getItemElement(element);\n\n    if (_getItemOption(item, 'trigger') !== 'click') {\n      return;\n    }\n\n    if (_getItemOption(item, 'toggle') === false) {\n      _show(item);\n    } else {\n      _toggle(item);\n    }\n  }; // Link handler\n\n\n  var _link = function _link(element, e) {\n    if (KTEventHandler.trigger(the.element, 'kt.menu.link.click', the) === false) {\n      return;\n    } // Dismiss all shown dropdowns\n\n\n    KTMenu.hideDropdowns();\n    KTEventHandler.trigger(the.element, 'kt.menu.link.clicked', the);\n  }; // Dismiss handler\n\n\n  var _dismiss = function _dismiss(element, e) {\n    var item = _getItemElement(element);\n\n    var items = _getItemChildElements(item);\n\n    if (item !== null && _getItemSubType(item) === 'dropdown') {\n      _hide(item); // hide items dropdown\n      // Hide all child elements as well\n\n\n      if (items.length > 0) {\n        for (var i = 0, len = items.length; i < len; i++) {\n          if (items[i] !== null && _getItemSubType(items[i]) === 'dropdown') {\n            _hide(tems[i]);\n          }\n        }\n      }\n    }\n  }; // Mouseover handle\n\n\n  var _mouseover = function _mouseover(element, e) {\n    var item = _getItemElement(element);\n\n    if (item === null) {\n      return;\n    }\n\n    if (_getItemOption(item, 'trigger') !== 'hover') {\n      return;\n    }\n\n    if (KTUtil.data(item).get('hover') === '1') {\n      clearTimeout(KTUtil.data(item).get('timeout'));\n      KTUtil.data(item).remove('hover');\n      KTUtil.data(item).remove('timeout');\n    }\n\n    _show(item);\n  }; // Mouseout handle\n\n\n  var _mouseout = function _mouseout(element, e) {\n    var item = _getItemElement(element);\n\n    if (item === null) {\n      return;\n    }\n\n    if (_getItemOption(item, 'trigger') !== 'hover') {\n      return;\n    }\n\n    var timeout = setTimeout(function () {\n      if (KTUtil.data(item).get('hover') === '1') {\n        _hide(item);\n      }\n    }, the.options.dropdown.hoverTimeout);\n    KTUtil.data(item).set('hover', '1');\n    KTUtil.data(item).set('timeout', timeout);\n  }; // Toggle item sub\n\n\n  var _toggle = function _toggle(item) {\n    if (!item) {\n      item = the.triggerElement;\n    }\n\n    if (_isItemSubShown(item) === true) {\n      _hide(item);\n    } else {\n      _show(item);\n    }\n  }; // Show item sub\n\n\n  var _show = function _show(item) {\n    if (!item) {\n      item = the.triggerElement;\n    }\n\n    if (_isItemSubShown(item) === true) {\n      return;\n    }\n\n    if (_getItemSubType(item) === 'dropdown') {\n      _showDropdown(item); // // show current dropdown\n\n    } else if (_getItemSubType(item) === 'accordion') {\n      _showAccordion(item);\n    } // Remember last submenu type\n\n\n    KTUtil.data(item).set('type', _getItemSubType(item)); // updated\n  }; // Hide item sub\n\n\n  var _hide = function _hide(item) {\n    if (!item) {\n      item = the.triggerElement;\n    }\n\n    if (_isItemSubShown(item) === false) {\n      return;\n    }\n\n    if (_getItemSubType(item) === 'dropdown') {\n      _hideDropdown(item);\n    } else if (_getItemSubType(item) === 'accordion') {\n      _hideAccordion(item);\n    }\n  }; // Reset item state classes if item sub type changed\n\n\n  var _reset = function _reset(item) {\n    if (_hasItemSub(item) === false) {\n      return;\n    }\n\n    var sub = _getItemSubElement(item); // Reset sub state if sub type is changed during the window resize\n\n\n    if (KTUtil.data(item).has('type') && KTUtil.data(item).get('type') !== _getItemSubType(item)) {\n      // updated\n      KTUtil.removeClass(item, 'hover');\n      KTUtil.removeClass(item, 'show');\n      KTUtil.removeClass(sub, 'show');\n    } // updated\n\n  }; // Update all item state classes if item sub type changed\n\n\n  var _update = function _update() {\n    var items = the.element.querySelectorAll('.menu-item[data-kt-menu-trigger]');\n\n    if (items && items.length > 0) {\n      for (var i = 0, len = items.length; i < len; i++) {\n        _reset(items[i]);\n      }\n    }\n  }; // Set external trigger element\n\n\n  var _setTriggerElement = function _setTriggerElement() {\n    var target = document.querySelector('[data-kt-menu-target=\"# ' + the.element.getAttribute('id') + '\"]');\n\n    if (target !== null) {\n      the.triggerElement = target;\n    } else if (the.element.closest('[data-kt-menu-trigger]')) {\n      the.triggerElement = the.element.closest('[data-kt-menu-trigger]');\n    } else if (the.element.parentNode && KTUtil.child(the.element.parentNode, '[data-kt-menu-trigger]')) {\n      the.triggerElement = KTUtil.child(the.element.parentNode, '[data-kt-menu-trigger]');\n    }\n\n    if (the.triggerElement) {\n      KTUtil.data(the.triggerElement).set('menu', the);\n    }\n  }; // Test if menu has external trigger element\n\n\n  var _isTriggerElement = function _isTriggerElement(item) {\n    return the.triggerElement === item ? true : false;\n  }; // Test if item's sub is shown\n\n\n  var _isItemSubShown = function _isItemSubShown(item) {\n    var sub = _getItemSubElement(item);\n\n    if (sub !== null) {\n      if (_getItemSubType(item) === 'dropdown') {\n        if (KTUtil.hasClass(sub, 'show') === true && sub.hasAttribute('data-popper-placement') === true) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return KTUtil.hasClass(item, 'show');\n      }\n    } else {\n      return false;\n    }\n  }; // Test if item dropdown is permanent\n\n\n  var _isItemDropdownPermanent = function _isItemDropdownPermanent(item) {\n    return _getItemOption(item, 'permanent') === true ? true : false;\n  }; // Test if item's parent is shown\n\n\n  var _isItemParentShown = function _isItemParentShown(item) {\n    return KTUtil.parents(item, '.menu-item.show').length > 0;\n  }; // Test of it is item sub element\n\n\n  var _isItemSubElement = function _isItemSubElement(item) {\n    return KTUtil.hasClass(item, 'menu-sub');\n  }; // Test if item has sub\n\n\n  var _hasItemSub = function _hasItemSub(item) {\n    return KTUtil.hasClass(item, 'menu-item') && item.hasAttribute('data-kt-menu-trigger');\n  }; // Get link element\n\n\n  var _getItemLinkElement = function _getItemLinkElement(item) {\n    return KTUtil.child(item, '.menu-link');\n  }; // Get toggle element\n\n\n  var _getItemToggleElement = function _getItemToggleElement(item) {\n    if (the.triggerElement) {\n      return the.triggerElement;\n    } else {\n      return _getItemLinkElement(item);\n    }\n  }; // Get item sub element\n\n\n  var _getItemSubElement = function _getItemSubElement(item) {\n    if (_isTriggerElement(item) === true) {\n      return the.element;\n    }\n\n    if (item.classList.contains('menu-sub') === true) {\n      return item;\n    } else if (KTUtil.data(item).has('sub')) {\n      return KTUtil.data(item).get('sub');\n    } else {\n      return KTUtil.child(item, '.menu-sub');\n    }\n  }; // Get item sub type\n\n\n  var _getItemSubType = function _getItemSubType(element) {\n    var sub = _getItemSubElement(element);\n\n    if (sub && parseInt(KTUtil.css(sub, 'z-index')) > 0) {\n      return \"dropdown\";\n    } else {\n      return \"accordion\";\n    }\n  }; // Get item element\n\n\n  var _getItemElement = function _getItemElement(element) {\n    var item, sub; // Element is the external trigger element\n\n    if (_isTriggerElement(element)) {\n      return element;\n    } // Element has item toggler attribute\n\n\n    if (element.hasAttribute('data-kt-menu-trigger')) {\n      return element;\n    } // Element has item DOM reference in it's data storage\n\n\n    if (KTUtil.data(element).has('item')) {\n      return KTUtil.data(element).get('item');\n    } // Item is parent of element\n\n\n    if (item = element.closest('.menu-item[data-kt-menu-trigger]')) {\n      return item;\n    } // Element's parent has item DOM reference in it's data storage\n\n\n    if (sub = element.closest('.menu-sub')) {\n      if (KTUtil.data(sub).has('item') === true) {\n        return KTUtil.data(sub).get('item');\n      }\n    }\n  }; // Get item parent element\n\n\n  var _getItemParentElement = function _getItemParentElement(item) {\n    var sub = item.closest('.menu-sub');\n    var parentItem;\n\n    if (KTUtil.data(sub).has('item')) {\n      return KTUtil.data(sub).get('item');\n    }\n\n    if (sub && (parentItem = sub.closest('.menu-item[data-kt-menu-trigger]'))) {\n      return parentItem;\n    }\n\n    return null;\n  }; // Get item parent elements\n\n\n  var _getItemParentElements = function _getItemParentElements(item) {\n    var parents = [];\n    var parent;\n    var i = 0;\n\n    do {\n      parent = _getItemParentElement(item);\n\n      if (parent) {\n        parents.push(parent);\n        item = parent;\n      }\n\n      i++;\n    } while (parent !== null && i < 20);\n\n    if (the.triggerElement) {\n      parents.unshift(the.triggerElement);\n    }\n\n    return parents;\n  }; // Get item child element\n\n\n  var _getItemChildElement = function _getItemChildElement(item) {\n    var selector = item;\n    var element;\n\n    if (KTUtil.data(item).get('sub')) {\n      selector = KTUtil.data(item).get('sub');\n    }\n\n    if (selector !== null) {\n      //element = selector.querySelector('.show.menu-item[data-kt-menu-trigger]');\n      element = selector.querySelector('.menu-item[data-kt-menu-trigger]');\n\n      if (element) {\n        return element;\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }; // Get item child elements\n\n\n  var _getItemChildElements = function _getItemChildElements(item) {\n    var children = [];\n    var child;\n    var i = 0;\n\n    do {\n      child = _getItemChildElement(item);\n\n      if (child) {\n        children.push(child);\n        item = child;\n      }\n\n      i++;\n    } while (child !== null && i < 20);\n\n    return children;\n  }; // Show item dropdown\n\n\n  var _showDropdown = function _showDropdown(item) {\n    // Handle dropdown show event\n    if (KTEventHandler.trigger(the.element, 'kt.menu.dropdown.show', item) === false) {\n      return;\n    } // Hide all currently shown dropdowns except current one\n\n\n    KTMenu.hideDropdowns(item);\n    var toggle = _isTriggerElement(item) ? item : _getItemLinkElement(item);\n\n    var sub = _getItemSubElement(item);\n\n    var width = _getItemOption(item, 'width');\n\n    var height = _getItemOption(item, 'height');\n\n    var zindex = the.options.dropdown.zindex; // update\n\n    var parentZindex = KTUtil.getHighestZindex(item); // update\n    // Apply a new z-index if dropdown's toggle element or it's parent has greater z-index // update\n\n    if (parentZindex !== null && parentZindex >= zindex) {\n      zindex = parentZindex + 1;\n    }\n\n    if (zindex > 0) {\n      KTUtil.css(sub, 'z-index', zindex);\n    }\n\n    if (width !== null) {\n      KTUtil.css(sub, 'width', width);\n    }\n\n    if (height !== null) {\n      KTUtil.css(sub, 'height', height);\n    }\n\n    KTUtil.css(sub, 'display', '');\n    KTUtil.css(sub, 'overflow', ''); // Init popper(new)\n\n    _initDropdownPopper(item, sub);\n\n    KTUtil.addClass(item, 'show');\n    KTUtil.addClass(item, 'menu-dropdown');\n    KTUtil.addClass(sub, 'show'); // Append the sub the the root of the menu\n\n    if (_getItemOption(item, 'overflow') === true) {\n      document.body.appendChild(sub);\n      KTUtil.data(item).set('sub', sub);\n      KTUtil.data(sub).set('item', item);\n      KTUtil.data(sub).set('menu', the);\n    } else {\n      KTUtil.data(sub).set('item', item);\n    } // Handle dropdown shown event\n\n\n    KTEventHandler.trigger(the.element, 'kt.menu.dropdown.shown', item);\n  }; // Hide item dropdown\n\n\n  var _hideDropdown = function _hideDropdown(item) {\n    // Handle dropdown hide event\n    if (KTEventHandler.trigger(the.element, 'kt.menu.dropdown.hide', item) === false) {\n      return;\n    }\n\n    var sub = _getItemSubElement(item);\n\n    KTUtil.css(sub, 'z-index', '');\n    KTUtil.css(sub, 'width', '');\n    KTUtil.css(sub, 'height', '');\n    KTUtil.removeClass(item, 'show');\n    KTUtil.removeClass(item, 'menu-dropdown');\n    KTUtil.removeClass(sub, 'show'); // Append the sub back to it's parent\n\n    if (_getItemOption(item, 'overflow') === true) {\n      if (item.classList.contains('menu-item')) {\n        item.appendChild(sub);\n      } else {\n        KTUtil.insertAfter(the.element, item);\n      }\n\n      KTUtil.data(item).remove('sub');\n      KTUtil.data(sub).remove('item');\n      KTUtil.data(sub).remove('menu');\n    } // Destroy popper(new)\n\n\n    _destroyDropdownPopper(item); // Handle dropdown hidden event \n\n\n    KTEventHandler.trigger(the.element, 'kt.menu.dropdown.hidden', item);\n  }; // Init dropdown popper(new)\n\n\n  var _initDropdownPopper = function _initDropdownPopper(item, sub) {\n    // Setup popper instance\n    var reference;\n\n    var attach = _getItemOption(item, 'attach');\n\n    if (attach) {\n      if (attach === 'parent') {\n        reference = item.parentNode;\n      } else {\n        reference = document.querySelector(attach);\n      }\n    } else {\n      reference = item;\n    }\n\n    var popper = Popper.createPopper(reference, sub, _getDropdownPopperConfig(item));\n    KTUtil.data(item).set('popper', popper);\n  }; // Destroy dropdown popper(new)\n\n\n  var _destroyDropdownPopper = function _destroyDropdownPopper(item) {\n    if (KTUtil.data(item).has('popper') === true) {\n      KTUtil.data(item).get('popper').destroy();\n      KTUtil.data(item).remove('popper');\n    }\n  }; // Prepare popper config for dropdown(see: https://popper.js.org/docs/v2/)\n\n\n  var _getDropdownPopperConfig = function _getDropdownPopperConfig(item) {\n    // Placement\n    var placement = _getItemOption(item, 'placement');\n\n    if (!placement) {\n      placement = 'right';\n    } // Offset\n\n\n    var offsetValue = _getItemOption(item, 'offset');\n\n    var offset = offsetValue ? offsetValue.split(\",\") : []; // Strategy\n\n    var strategy = _getItemOption(item, 'overflow') === true ? 'absolute' : 'fixed';\n    var altAxis = _getItemOption(item, 'flip') !== false ? true : false;\n    var popperConfig = {\n      placement: placement,\n      strategy: strategy,\n      modifiers: [{\n        name: 'offset',\n        options: {\n          offset: offset\n        }\n      }, {\n        name: 'preventOverflow',\n        options: {\n          altAxis: altAxis\n        }\n      }, {\n        name: 'flip',\n        options: {\n          flipVariations: false\n        }\n      }]\n    };\n    return popperConfig;\n  }; // Show item accordion\n\n\n  var _showAccordion = function _showAccordion(item) {\n    if (KTEventHandler.trigger(the.element, 'kt.menu.accordion.show', item) === false) {\n      return;\n    }\n\n    if (the.options.accordion.expand === false) {\n      _hideAccordions(item);\n    }\n\n    var sub = _getItemSubElement(item);\n\n    if (KTUtil.data(item).has('popper') === true) {\n      _hideDropdown(item);\n    }\n\n    KTUtil.addClass(item, 'hover'); // updateWW\n\n    KTUtil.addClass(item, 'showing');\n    KTUtil.slideDown(sub, the.options.accordion.slideSpeed, function () {\n      KTUtil.removeClass(item, 'showing');\n      KTUtil.addClass(item, 'show');\n      KTUtil.addClass(sub, 'show');\n      KTEventHandler.trigger(the.element, 'kt.menu.accordion.shown', item);\n    });\n  }; // Hide item accordion\n\n\n  var _hideAccordion = function _hideAccordion(item) {\n    if (KTEventHandler.trigger(the.element, 'kt.menu.accordion.hide', item) === false) {\n      return;\n    }\n\n    var sub = _getItemSubElement(item);\n\n    KTUtil.addClass(item, 'hiding');\n    KTUtil.slideUp(sub, the.options.accordion.slideSpeed, function () {\n      KTUtil.removeClass(item, 'hiding');\n      KTUtil.removeClass(item, 'show');\n      KTUtil.removeClass(sub, 'show');\n      KTUtil.removeClass(item, 'hover'); // update\n\n      KTEventHandler.trigger(the.element, 'kt.menu.accordion.hidden', item);\n    });\n  }; // Hide all shown accordions of item\n\n\n  var _hideAccordions = function _hideAccordions(item) {\n    var itemsToHide = KTUtil.findAll(the.element, '.show[data-kt-menu-trigger]');\n    var itemToHide;\n\n    if (itemsToHide && itemsToHide.length > 0) {\n      for (var i = 0, len = itemsToHide.length; i < len; i++) {\n        itemToHide = itemsToHide[i];\n\n        if (_getItemSubType(itemToHide) === 'accordion' && itemToHide !== item && item.contains(itemToHide) === false && itemToHide.contains(item) === false) {\n          _hideAccordion(itemToHide);\n        }\n      }\n    }\n  }; // Get item option(through html attributes)\n\n\n  var _getItemOption = function _getItemOption(item, name) {\n    var attr;\n    var value = null;\n\n    if (item && item.hasAttribute('data-kt-menu-' + name)) {\n      attr = item.getAttribute('data-kt-menu-' + name);\n      value = KTUtil.getResponsiveValue(attr);\n\n      if (value !== null && String(value) === 'true') {\n        value = true;\n      } else if (value !== null && String(value) === 'false') {\n        value = false;\n      }\n    }\n\n    return value;\n  };\n\n  var _destroy = function _destroy() {\n    KTUtil.data(the.element).remove('menu');\n  }; // Construct Class\n\n\n  _construct(); ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n  // Event Handlers\n\n\n  the.click = function (element, e) {\n    return _click(element, e);\n  };\n\n  the.link = function (element, e) {\n    return _link(element, e);\n  };\n\n  the.dismiss = function (element, e) {\n    return _dismiss(element, e);\n  };\n\n  the.mouseover = function (element, e) {\n    return _mouseover(element, e);\n  };\n\n  the.mouseout = function (element, e) {\n    return _mouseout(element, e);\n  }; // General Methods\n\n\n  the.getItemTriggerType = function (item) {\n    return _getItemOption(item, 'trigger');\n  };\n\n  the.getItemSubType = function (element) {\n    return _getItemSubType(element);\n  };\n\n  the.show = function (item) {\n    return _show(item);\n  };\n\n  the.hide = function (item) {\n    return _hide(item);\n  };\n\n  the.reset = function (item) {\n    return _reset(item);\n  };\n\n  the.update = function () {\n    return _update();\n  };\n\n  the.getElement = function () {\n    return the.element;\n  };\n\n  the.getItemLinkElement = function (item) {\n    return _getItemLinkElement(item);\n  };\n\n  the.getItemToggleElement = function (item) {\n    return _getItemToggleElement(item);\n  };\n\n  the.getItemSubElement = function (item) {\n    return _getItemSubElement(item);\n  };\n\n  the.getItemParentElements = function (item) {\n    return _getItemParentElements(item);\n  };\n\n  the.isItemSubShown = function (item) {\n    return _isItemSubShown(item);\n  };\n\n  the.isItemParentShown = function (item) {\n    return _isItemParentShown(item);\n  };\n\n  the.getTriggerElement = function () {\n    return the.triggerElement;\n  };\n\n  the.isItemDropdownPermanent = function (item) {\n    return _isItemDropdownPermanent(item);\n  };\n\n  the.destroy = function () {\n    return _destroy();\n  }; // Accordion Mode Methods\n\n\n  the.hideAccordions = function (item) {\n    return _hideAccordions(item);\n  }; // Event API\n\n\n  the.on = function (name, handler) {\n    return KTEventHandler.on(the.element, name, handler);\n  };\n\n  the.one = function (name, handler) {\n    return KTEventHandler.one(the.element, name, handler);\n  };\n\n  the.off = function (name) {\n    return KTEventHandler.off(the.element, name);\n  };\n}; // Get KTMenu instance by element\n\n\nKTMenu.getInstance = function (element) {\n  var menu;\n  var item; // Element has menu DOM reference in it's DATA storage\n\n  if (KTUtil.data(element).has('menu')) {\n    return KTUtil.data(element).get('menu');\n  } // Element has .menu parent \n\n\n  if (menu = element.closest('.menu')) {\n    if (KTUtil.data(menu).has('menu')) {\n      return KTUtil.data(menu).get('menu');\n    }\n  } // Element has a parent with DOM reference to .menu in it's DATA storage\n\n\n  if (KTUtil.hasClass(element, 'menu-link')) {\n    var sub = element.closest('.menu-sub');\n\n    if (KTUtil.data(sub).has('menu')) {\n      return KTUtil.data(sub).get('menu');\n    }\n  }\n\n  return null;\n}; // Hide all dropdowns and skip one if provided\n\n\nKTMenu.hideDropdowns = function (skip) {\n  var items = document.querySelectorAll('.show.menu-dropdown[data-kt-menu-trigger]');\n\n  if (items && items.length > 0) {\n    for (var i = 0, len = items.length; i < len; i++) {\n      var item = items[i];\n      var menu = KTMenu.getInstance(item);\n\n      if (menu && menu.getItemSubType(item) === 'dropdown') {\n        if (skip) {\n          if (menu.getItemSubElement(item).contains(skip) === false && item.contains(skip) === false && item !== skip) {\n            menu.hide(item);\n          }\n        } else {\n          menu.hide(item);\n        }\n      }\n    }\n  }\n}; // Update all dropdowns popover instances\n\n\nKTMenu.updateDropdowns = function () {\n  var items = document.querySelectorAll('.show.menu-dropdown[data-kt-menu-trigger]');\n\n  if (items && items.length > 0) {\n    for (var i = 0, len = items.length; i < len; i++) {\n      var item = items[i];\n\n      if (KTUtil.data(item).has('popper')) {\n        KTUtil.data(item).get('popper').forceUpdate();\n      }\n    }\n  }\n}; // Global handlers\n\n\nKTMenu.initGlobalHandlers = function () {\n  // Dropdown handler\n  document.addEventListener(\"click\", function (e) {\n    var items = document.querySelectorAll('.show.menu-dropdown[data-kt-menu-trigger]');\n    var menu;\n    var item;\n    var sub;\n    var menuObj;\n\n    if (items && items.length > 0) {\n      for (var i = 0, len = items.length; i < len; i++) {\n        item = items[i];\n        menuObj = KTMenu.getInstance(item);\n\n        if (menuObj && menuObj.getItemSubType(item) === 'dropdown') {\n          menu = menuObj.getElement();\n          sub = menuObj.getItemSubElement(item);\n\n          if (item === e.target || item.contains(e.target)) {\n            continue;\n          }\n\n          if (sub === e.target || sub.contains(e.target)) {\n            continue;\n          }\n\n          menuObj.hide(item);\n        }\n      }\n    }\n  }); // Sub toggle handler(updated)\n\n  KTUtil.on(document.body, '.menu-item[data-kt-menu-trigger] > .menu-link, [data-kt-menu-trigger]:not(.menu-item):not([data-kt-menu-trigger=\"auto\"])', 'click', function (e) {\n    var menu = KTMenu.getInstance(this);\n\n    if (menu !== null) {\n      return menu.click(this, e);\n    }\n  }); // Link handler\n\n  KTUtil.on(document.body, '.menu-item:not([data-kt-menu-trigger]) > .menu-link', 'click', function (e) {\n    var menu = KTMenu.getInstance(this);\n\n    if (menu !== null) {\n      return menu.link(this, e);\n    }\n  }); // Dismiss handler\n\n  KTUtil.on(document.body, '[data-kt-menu-dismiss=\"true\"]', 'click', function (e) {\n    var menu = KTMenu.getInstance(this);\n\n    if (menu !== null) {\n      return menu.dismiss(this, e);\n    }\n  }); // Mouseover handler\n\n  KTUtil.on(document.body, '[data-kt-menu-trigger], .menu-sub', 'mouseover', function (e) {\n    var menu = KTMenu.getInstance(this);\n\n    if (menu !== null && menu.getItemSubType(this) === 'dropdown') {\n      return menu.mouseover(this, e);\n    }\n  }); // Mouseout handler\n\n  KTUtil.on(document.body, '[data-kt-menu-trigger], .menu-sub', 'mouseout', function (e) {\n    var menu = KTMenu.getInstance(this);\n\n    if (menu !== null && menu.getItemSubType(this) === 'dropdown') {\n      return menu.mouseout(this, e);\n    }\n  }); // Resize handler\n\n  window.addEventListener('resize', function () {\n    var menu;\n    var timer;\n    KTUtil.throttle(timer, function () {\n      // Locate and update Offcanvas instances on window resize\n      var elements = document.querySelectorAll('[data-kt-menu=\"true\"]');\n\n      if (elements && elements.length > 0) {\n        for (var i = 0, len = elements.length; i < len; i++) {\n          menu = KTMenu.getInstance(elements[i]);\n\n          if (menu) {\n            menu.update();\n          }\n        }\n      }\n    }, 200);\n  });\n}; // Global instances\n\n\nKTMenu.createInstances = function () {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-kt-menu=\"true\"]';\n  // Initialize menus\n  var elements = document.querySelectorAll(selector);\n\n  if (elements && elements.length > 0) {\n    for (var i = 0, len = elements.length; i < len; i++) {\n      new KTMenu(elements[i]);\n    }\n  }\n}; // Global initialization\n\n\nKTMenu.init = function () {\n  // Global Event Handlers\n  KTMenu.initGlobalHandlers(); // Lazy Initialization\n\n  KTMenu.createInstances();\n}; // On document ready\n\n\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', KTMenu.init);\n} else {\n  KTMenu.init();\n} // Webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTMenu;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/theme/js/components/menu.js\n");

/***/ }),

/***/ "./resources/theme/js/components/password-meter.js":
/*!*********************************************************!*\
  !*** ./resources/theme/js/components/password-meter.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
eval(" // Class definition\n\nvar KTPasswordMeter = function KTPasswordMeter(element, options) {\n  ////////////////////////////\n  // ** Private variables  ** //\n  ////////////////////////////\n  var the = this;\n\n  if (!element) {\n    return;\n  } // Default Options\n\n\n  var defaultOptions = {\n    minLength: 8,\n    checkUppercase: true,\n    checkLowercase: true,\n    checkDigit: true,\n    checkChar: true,\n    scoreHighlightClass: 'active'\n  }; ////////////////////////////\n  // ** Private methods  ** //\n  ////////////////////////////\n  // Constructor\n\n  var _construct = function _construct() {\n    if (KTUtil.data(element).has('password-meter') === true) {\n      the = KTUtil.data(element).get('password-meter');\n    } else {\n      _init();\n    }\n  }; // Initialize\n\n\n  var _init = function _init() {\n    // Variables\n    the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    the.score = 0;\n    the.checkSteps = 5; // Elements\n\n    the.element = element;\n    the.inputElement = the.element.querySelector('input[type]');\n    the.visibilityElement = the.element.querySelector('[data-kt-password-meter-control=\"visibility\"]');\n    the.highlightElement = the.element.querySelector('[data-kt-password-meter-control=\"highlight\"]'); // Set initialized\n\n    the.element.setAttribute('data-kt-password-meter', 'true'); // Event Handlers\n\n    _handlers(); // Bind Instance\n\n\n    KTUtil.data(the.element).set('password-meter', the);\n  }; // Handlers\n\n\n  var _handlers = function _handlers() {\n    the.inputElement.addEventListener('input', function () {\n      _check();\n    });\n\n    if (the.visibilityElement) {\n      the.visibilityElement.addEventListener('click', function () {\n        _visibility();\n      });\n    }\n  }; // Event handlers\n\n\n  var _check = function _check() {\n    var score = 0;\n\n    var checkScore = _getCheckScore();\n\n    if (_checkLength() === true) {\n      score = score + checkScore;\n    }\n\n    if (the.options.checkUppercase === true && _checkLowercase() === true) {\n      score = score + checkScore;\n    }\n\n    if (the.options.checkLowercase === true && _checkUppercase() === true) {\n      score = score + checkScore;\n    }\n\n    if (the.options.checkDigit === true && _checkDigit() === true) {\n      score = score + checkScore;\n    }\n\n    if (the.options.checkChar === true && _checkChar() === true) {\n      score = score + checkScore;\n    }\n\n    the.score = score;\n\n    _highlight();\n  };\n\n  var _checkLength = function _checkLength() {\n    return the.inputElement.value.length >= the.options.minLength; // 20 score\n  };\n\n  var _checkLowercase = function _checkLowercase() {\n    return /[a-z]/.test(the.inputElement.value); // 20 score\n  };\n\n  var _checkUppercase = function _checkUppercase() {\n    return /[A-Z]/.test(the.inputElement.value); // 20 score\n  };\n\n  var _checkDigit = function _checkDigit() {\n    return /[0-9]/.test(the.inputElement.value); // 20 score\n  };\n\n  var _checkChar = function _checkChar() {\n    return /[~`!#$%\\^&*+=\\-\\[\\]\\\\';,/{}|\\\\\":<>\\?]/g.test(the.inputElement.value); // 20 score\n  };\n\n  var _getCheckScore = function _getCheckScore() {\n    var count = 1;\n\n    if (the.options.checkUppercase === true) {\n      count++;\n    }\n\n    if (the.options.checkLowercase === true) {\n      count++;\n    }\n\n    if (the.options.checkDigit === true) {\n      count++;\n    }\n\n    if (the.options.checkChar === true) {\n      count++;\n    }\n\n    the.checkSteps = count;\n    return 100 / the.checkSteps;\n  };\n\n  var _highlight = function _highlight() {\n    var items = [].slice.call(the.highlightElement.querySelectorAll('div'));\n    var total = items.length;\n    var index = 0;\n\n    var checkScore = _getCheckScore();\n\n    var score = _getScore();\n\n    items.map(function (item) {\n      index++;\n\n      if (checkScore * index * (the.checkSteps / total) <= score) {\n        item.classList.add('active');\n      } else {\n        item.classList.remove('active');\n      }\n    });\n  };\n\n  var _visibility = function _visibility() {\n    var visibleIcon = the.visibilityElement.querySelector('i:not(.d-none), .svg-icon:not(.d-none)');\n    var hiddenIcon = the.visibilityElement.querySelector('i.d-none, .svg-icon.d-none');\n\n    if (the.inputElement.getAttribute('type').toLowerCase() === 'password') {\n      the.inputElement.setAttribute('type', 'text');\n    } else {\n      the.inputElement.setAttribute('type', 'password');\n    }\n\n    visibleIcon.classList.add('d-none');\n    hiddenIcon.classList.remove('d-none');\n    the.inputElement.focus();\n  };\n\n  var _reset = function _reset() {\n    the.score = 0;\n\n    _highlight();\n  }; // Gets current password score\n\n\n  var _getScore = function _getScore() {\n    return the.score;\n  };\n\n  var _destroy = function _destroy() {\n    KTUtil.data(the.element).remove('password-meter');\n  }; // Construct class\n\n\n  _construct(); ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n  // Plugin API\n\n\n  the.check = function () {\n    return _check();\n  };\n\n  the.getScore = function () {\n    return _getScore();\n  };\n\n  the.reset = function () {\n    return _reset();\n  };\n\n  the.destroy = function () {\n    return _destroy();\n  };\n}; // Static methods\n\n\nKTPasswordMeter.getInstance = function (element) {\n  if (element !== null && KTUtil.data(element).has('password-meter')) {\n    return KTUtil.data(element).get('password-meter');\n  } else {\n    return null;\n  }\n}; // Create instances\n\n\nKTPasswordMeter.createInstances = function () {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-kt-password-meter]';\n  // Get instances\n  var elements = document.body.querySelectorAll(selector);\n\n  if (elements && elements.length > 0) {\n    for (var i = 0, len = elements.length; i < len; i++) {\n      // Initialize instances\n      new KTPasswordMeter(elements[i]);\n    }\n  }\n}; // Global initialization\n\n\nKTPasswordMeter.init = function () {\n  KTPasswordMeter.createInstances();\n}; // On document ready\n\n\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', KTPasswordMeter.init);\n} else {\n  KTPasswordMeter.init();\n} // Webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTPasswordMeter;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvdGhlbWUvanMvY29tcG9uZW50cy9wYXNzd29yZC1tZXRlci5qcy5qcyIsIm1hcHBpbmdzIjoiQ0FFQTs7QUFDQSxJQUFJQSxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLENBQVNDLE9BQVQsRUFBa0JDLE9BQWxCLEVBQTJCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLE1BQUlDLEdBQUcsR0FBRyxJQUFWOztBQUVBLE1BQUksQ0FBQ0YsT0FBTCxFQUFjO0FBQ1Y7QUFDSCxHQVI0QyxDQVU3Qzs7O0FBQ0EsTUFBSUcsY0FBYyxHQUFHO0FBQ2pCQyxJQUFBQSxTQUFTLEVBQUUsQ0FETTtBQUVqQkMsSUFBQUEsY0FBYyxFQUFFLElBRkM7QUFHakJDLElBQUFBLGNBQWMsRUFBRSxJQUhDO0FBSWpCQyxJQUFBQSxVQUFVLEVBQUUsSUFKSztBQUtqQkMsSUFBQUEsU0FBUyxFQUFFLElBTE07QUFNakJDLElBQUFBLG1CQUFtQixFQUFFO0FBTkosR0FBckIsQ0FYNkMsQ0FvQjdDO0FBQ0E7QUFDQTtBQUVBOztBQUNBLE1BQUlDLFVBQVUsR0FBRyxTQUFiQSxVQUFhLEdBQVc7QUFDeEIsUUFBS0MsTUFBTSxDQUFDQyxJQUFQLENBQVlaLE9BQVosRUFBcUJhLEdBQXJCLENBQXlCLGdCQUF6QixNQUErQyxJQUFwRCxFQUEyRDtBQUN2RFgsTUFBQUEsR0FBRyxHQUFHUyxNQUFNLENBQUNDLElBQVAsQ0FBWVosT0FBWixFQUFxQmMsR0FBckIsQ0FBeUIsZ0JBQXpCLENBQU47QUFDSCxLQUZELE1BRU87QUFDSEMsTUFBQUEsS0FBSztBQUNSO0FBQ0osR0FORCxDQXpCNkMsQ0FpQzdDOzs7QUFDQSxNQUFJQSxLQUFLLEdBQUcsU0FBUkEsS0FBUSxHQUFXO0FBQ25CO0FBQ0FiLElBQUFBLEdBQUcsQ0FBQ0QsT0FBSixHQUFjVSxNQUFNLENBQUNLLFVBQVAsQ0FBa0IsRUFBbEIsRUFBc0JiLGNBQXRCLEVBQXNDRixPQUF0QyxDQUFkO0FBQ0FDLElBQUFBLEdBQUcsQ0FBQ2Us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QUN5RSxJQUFoQixHQUF1QixZQUFXO0FBQzlCekUsRUFBQUEsZUFBZSxDQUFDa0UsZUFBaEI7QUFDSCxDQUZELEMsQ0FJQTs7O0FBQ0EsSUFBSUcsUUFBUSxDQUFDSyxVQUFULEtBQXdCLFNBQTVCLEVBQXVDO0FBQ3BDTCxFQUFBQSxRQUFRLENBQUMxQyxnQkFBVCxDQUEwQixrQkFBMUIsRUFBOEMzQixlQUFlLENBQUN5RSxJQUE5RDtBQUNGLENBRkQsTUFFTztBQUNIekUsRUFBQUEsZUFBZSxDQUFDeUUsSUFBaEI7QUFDSCxDLENBRUQ7OztBQUNBLElBQUksU0FBaUMsT0FBT0UsTUFBTSxDQUFDQyxPQUFkLEtBQTBCLFdBQS9ELEVBQTRFO0FBQ3hFRCxFQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUI1RSxlQUFqQjtBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3RoZW1lL2pzL2NvbXBvbmVudHMvcGFzc3dvcmQtbWV0ZXIuanM/MmYxYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLy8gQ2xhc3MgZGVmaW5pdGlvblxudmFyIEtUUGFzc3dvcmRNZXRlciA9IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gKiogUHJpdmF0ZSB2YXJpYWJsZXMgICoqIC8vXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIHZhciB0aGUgPSB0aGlzO1xuXG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBEZWZhdWx0IE9wdGlvbnNcbiAgICB2YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICAgIG1pbkxlbmd0aDogOCxcbiAgICAgICAgY2hlY2tVcHBlcmNhc2U6IHRydWUsICAgICAgICBcbiAgICAgICAgY2hlY2tMb3dlcmNhc2U6IHRydWUsXG4gICAgICAgIGNoZWNrRGlnaXQ6IHRydWUsXG4gICAgICAgIGNoZWNrQ2hhcjogdHJ1ZSxcbiAgICAgICAgc2NvcmVIaWdobGlnaHRDbGFzczogJ2FjdGl2ZSdcbiAgICB9O1xuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vICoqIFByaXZhdGUgbWV0aG9kcyAgKiogLy9cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAvLyBDb25zdHJ1Y3RvclxuICAgIHZhciBfY29uc3RydWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICggS1RVdGlsLmRhdGEoZWxlbWVudCkuaGFzKCdwYXNzd29yZC1tZXRlcicpID09PSB0cnVlICkge1xuICAgICAgICAgICAgdGhlID0gS1RVdGlsLmRhdGEoZWxlbWVudCkuZ2V0KCdwYXNzd29yZC1tZXRlcicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX2luaXQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemVcbiAgICB2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVmFyaWFibGVzXG4gICAgICAgIHRoZS5vcHRpb25zID0gS1RVdGlsLmRlZXBFeHRlbmQoe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgdGhlLnNjb3JlID0gMDtcbiAgICAgICAgdGhlLmNoZWNrU3RlcHMgPSA1O1xuXG4gICAgICAgIC8vIEVsZW1lbnRzXG4gICAgICAgIHRoZS5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhlLmlucHV0RWxlbWVudCA9IHRoZS5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3R5cGVdJyk7XG4gICAgICAgIHRoZS52aXNpYmlsaXR5RWxlbWVudCA9IHRoZS5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWt0LXBhc3N3b3JkLW1ldGVyLWNvbnRyb2w9XCJ2aXNpYmlsaXR5XCJdJyk7XG4gICAgICAgIHRoZS5oaWdobGlnaHRFbGVtZW50ID0gdGhlLmVsZW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEta3QtcGFzc3dvcmQtbWV0ZXItY29udHJvbD1cImhpZ2hsaWdodFwiXScpOyBcblxuICAgICAgICAvLyBTZXQgaW5pdGlhbGl6ZWRcbiAgICAgICAgdGhlLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWt0LXBhc3N3b3JkLW1ldGVyJywgJ3RydWUnKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEV2ZW50IEhhbmRsZXJzXG4gICAgICAgIF9oYW5kbGVycygpO1xuXG4gICAgICAgIC8vIEJpbmQgSW5zdGFuY2VcbiAgICAgICAgS1RVdGlsLmRhdGEodGhlLmVsZW1lbnQpLnNldCgncGFzc3dvcmQtbWV0ZXInLCB0aGUpO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZXJzXG4gICAgdmFyIF9oYW5kbGVycyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGUuaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBfY2hlY2soKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoZS52aXNpYmlsaXR5RWxlbWVudCkge1xuICAgICAgICAgICAgdGhlLnZpc2liaWxpdHlFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX3Zpc2liaWxpdHkoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSAgIFxuXG4gICAgLy8gRXZlbnQgaGFuZGxlcnNcbiAgICB2YXIgX2NoZWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzY29yZSA9IDA7XG4gICAgICAgIHZhciBjaGVja1Njb3JlID0gX2dldENoZWNrU2NvcmUoKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChfY2hlY2tMZW5ndGgoKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgc2NvcmUgPSBzY29yZSArIGNoZWNrU2NvcmU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhlLm9wdGlvbnMuY2hlY2tVcHBlcmNhc2UgPT09IHRydWUgJiYgX2NoZWNrTG93ZXJjYXNlKCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHNjb3JlID0gc2NvcmUgKyBjaGVja1Njb3JlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoZS5vcHRpb25zLmNoZWNrTG93ZXJjYXNlID09PSB0cnVlICYmIF9jaGVja1VwcGVyY2FzZSgpID09PSB0cnVlICkge1xuICAgICAgICAgICAgc2NvcmUgPSBzY29yZSArIGNoZWNrU2NvcmU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhlLm9wdGlvbnMuY2hlY2tEaWdpdCA9PT0gdHJ1ZSAmJiBfY2hlY2tEaWdpdCgpID09PSB0cnVlICkge1xuICAgICAgICAgICAgc2NvcmUgPSBzY29yZSArIGNoZWNrU2NvcmU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhlLm9wdGlvbnMuY2hlY2tDaGFyID09PSB0cnVlICYmIF9jaGVja0NoYXIoKSA9PT0gdHJ1ZSApIHtcbiAgICAgICAgICAgIHNjb3JlID0gc2NvcmUgKyBjaGVja1Njb3JlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhlLnNjb3JlID0gc2NvcmU7XG5cbiAgICAgICAgX2hpZ2hsaWdodCgpO1xuICAgIH1cblxuICAgIHZhciBfY2hlY2tMZW5ndGggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoZS5pbnB1dEVsZW1lbnQudmFsdWUubGVuZ3RoID49IHRoZS5vcHRpb25zLm1pbkxlbmd0aDsgIC8vIDIwIHNjb3JlXG4gICAgfVxuXG4gICAgdmFyIF9jaGVja0xvd2VyY2FzZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gL1thLXpdLy50ZXN0KHRoZS5pbnB1dEVsZW1lbnQudmFsdWUpOyAgLy8gMjAgc2NvcmVcbiAgICB9XG5cbiAgICB2YXIgX2NoZWNrVXBwZXJjYXNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAvW0EtWl0vLnRlc3QodGhlLmlucHV0RWxlbWVudC52YWx1ZSk7ICAvLyAyMCBzY29yZVxuICAgIH1cblxuICAgIHZhciBfY2hlY2tEaWdpdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gL1swLTldLy50ZXN0KHRoZS5pbnB1dEVsZW1lbnQudmFsdWUpOyAgLy8gMjAgc2NvcmVcbiAgICB9XG5cbiAgICB2YXIgX2NoZWNrQ2hhciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gL1t+YCEjJCVcXF4mKis9XFwtXFxbXFxdXFxcXCc7LC97fXxcXFxcXCI6PD5cXD9dL2cudGVzdCh0aGUuaW5wdXRFbGVtZW50LnZhbHVlKTsgIC8vIDIwIHNjb3JlXG4gICAgfSAgICBcblxuICAgIHZhciBfZ2V0Q2hlY2tTY29yZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY291bnQgPSAxO1xuICAgICAgICBcbiAgICAgICAgaWYgKHRoZS5vcHRpb25zLmNoZWNrVXBwZXJjYXNlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoZS5vcHRpb25zLmNoZWNrTG93ZXJjYXNlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoZS5vcHRpb25zLmNoZWNrRGlnaXQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhlLm9wdGlvbnMuY2hlY2tDaGFyID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhlLmNoZWNrU3RlcHMgPSBjb3VudDtcblxuICAgICAgICByZXR1cm4gMTAwIC8gdGhlLmNoZWNrU3RlcHM7XG4gICAgfVxuICAgIFxuICAgIHZhciBfaGlnaGxpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpdGVtcyA9IFtdLnNsaWNlLmNhbGwodGhlLmhpZ2hsaWdodEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnZGl2JykpO1xuICAgICAgICB2YXIgdG90YWwgPSBpdGVtcy5sZW5ndGg7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBjaGVja1Njb3JlID0gX2dldENoZWNrU2NvcmUoKTtcbiAgICAgICAgdmFyIHNjb3JlID0gX2dldFNjb3JlKCk7XG5cbiAgICAgICAgaXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICBpbmRleCsrO1xuXG4gICAgICAgICAgICBpZiAoIChjaGVja1Njb3JlICogaW5kZXggKiAodGhlLmNoZWNrU3RlcHMgLyB0b3RhbCkpIDw9IHNjb3JlICkge1xuICAgICAgICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgICAgICAgICB9ICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBfdmlzaWJpbGl0eSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmlzaWJsZUljb24gPSB0aGUudmlzaWJpbGl0eUVsZW1lbnQucXVlcnlTZWxlY3RvcignaTpub3QoLmQtbm9uZSksIC5zdmctaWNvbjpub3QoLmQtbm9uZSknKTtcbiAgICAgICAgdmFyIGhpZGRlbkljb24gPSB0aGUudmlzaWJpbGl0eUVsZW1lbnQucXVlcnlTZWxlY3RvcignaS5kLW5vbmUsIC5zdmctaWNvbi5kLW5vbmUnKTtcbiAgICAgICAgXG4gICAgICAgIGlmICh0aGUuaW5wdXRFbGVtZW50LmdldEF0dHJpYnV0ZSgndHlwZScpLnRvTG93ZXJDYXNlKCkgPT09ICdwYXNzd29yZCcgKSB7XG4gICAgICAgICAgICB0aGUuaW5wdXRFbGVtZW50LnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0Jyk7XG4gICAgICAgIH0gIGVsc2Uge1xuICAgICAgICAgICAgdGhlLmlucHV0RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAncGFzc3dvcmQnKTtcbiAgICAgICAgfSAgICAgICAgXG5cbiAgICAgICAgdmlzaWJsZUljb24uY2xhc3NMaXN0LmFkZCgnZC1ub25lJyk7XG4gICAgICAgIGhpZGRlbkljb24uY2xhc3NMaXN0LnJlbW92ZSgnZC1ub25lJyk7XG5cbiAgICAgICAgdGhlLmlucHV0RWxlbWVudC5mb2N1cygpO1xuICAgIH1cblxuICAgIHZhciBfcmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhlLnNjb3JlID0gMDtcblxuICAgICAgICBfaGlnaGxpZ2h0KCk7XG4gICAgfVxuXG4gICAgLy8gR2V0cyBjdXJyZW50IHBhc3N3b3JkIHNjb3JlXG4gICAgdmFyIF9nZXRTY29yZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgIHJldHVybiB0aGUuc2NvcmU7XG4gICAgfVxuXG4gICAgdmFyIF9kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIEtUVXRpbC5kYXRhKHRoZS5lbGVtZW50KS5yZW1vdmUoJ3Bhc3N3b3JkLW1ldGVyJyk7XG4gICAgfVxuXG4gICAgLy8gQ29uc3RydWN0IGNsYXNzXG4gICAgX2NvbnN0cnVjdCgpO1xuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyAqKiBQdWJsaWMgQVBJICAqKiAvL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAvLyBQbHVnaW4gQVBJXG4gICAgdGhlLmNoZWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfY2hlY2soKTtcbiAgICB9XG5cbiAgICB0aGUuZ2V0U2NvcmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9nZXRTY29yZSgpO1xuICAgIH1cblxuICAgIHRoZS5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3Jlc2V0KCk7XG4gICAgfVxuXG4gICAgdGhlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9kZXN0cm95KCk7XG4gICAgfVxufTtcblxuLy8gU3RhdGljIG1ldGhvZHNcbktUUGFzc3dvcmRNZXRlci5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICBpZiAoIGVsZW1lbnQgIT09IG51bGwgJiYgS1RVdGlsLmRhdGEoZWxlbWVudCkuaGFzKCdwYXNzd29yZC1tZXRlcicpICkge1xuICAgICAgICByZXR1cm4gS1RVdGlsLmRhdGEoZWxlbWVudCkuZ2V0KCdwYXNzd29yZC1tZXRlcicpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuLy8gQ3JlYXRlIGluc3RhbmNlc1xuS1RQYXNzd29yZE1ldGVyLmNyZWF0ZUluc3RhbmNlcyA9IGZ1bmN0aW9uKHNlbGVjdG9yID0gJ1tkYXRhLWt0LXBhc3N3b3JkLW1ldGVyXScpIHtcbiAgICAvLyBHZXQgaW5zdGFuY2VzXG4gICAgdmFyIGVsZW1lbnRzID0gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcblxuICAgIGlmICggZWxlbWVudHMgJiYgZWxlbWVudHMubGVuZ3RoID4gMCApIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGVsZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIGluc3RhbmNlc1xuICAgICAgICAgICAgbmV3IEtUUGFzc3dvcmRNZXRlcihlbGVtZW50c1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIEdsb2JhbCBpbml0aWFsaXphdGlvblxuS1RQYXNzd29yZE1ldGVyLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgICBLVFBhc3N3b3JkTWV0ZXIuY3JlYXRlSW5zdGFuY2VzKCk7XG59O1xuXG4vLyBPbiBkb2N1bWVudCByZWFkeVxuaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdsb2FkaW5nJykge1xuICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIEtUUGFzc3dvcmRNZXRlci5pbml0KTtcbn0gZWxzZSB7XG4gICAgS1RQYXNzd29yZE1ldGVyLmluaXQoKTtcbn1cblxuLy8gV2VicGFjayBzdXBwb3J0XG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gS1RQYXNzd29yZE1ldGVyO1xufSJdLCJuYW1lcyI6WyJLVFBhc3N3b3JkTWV0ZXIiLCJlbGVtZW50Iiwib3B0aW9ucyIsInRoZSIsImRlZmF1bHRPcHRpb25zIiwibWluTGVuZ3RoIiwiY2hlY2tVcHBlcmNhc2UiLCJjaGVja0xvd2VyY2FzZSIsImNoZWNrRGlnaXQiLCJjaGVja0NoYXIiLCJzY29yZUhpZ2hsaWdodENsYXNzIiwiX2NvbnN0cnVjdCIsIktUVXRpbCIsImRhdGEiLCJoYXMiLCJnZXQiLCJfaW5pdCIsImRlZXBFeHRlbmQiLCJzY29yZSIsImNoZWNrU3RlcHMiLCJpbnB1dEVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwidmlzaWJpbGl0eUVsZW1lbnQiLCJoaWdobGlnaHRFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiX2hhbmRsZXJzIiwic2V0IiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9jaGVjayIsIl92aXNpYmlsaXR5IiwiY2hlY2tTY29yZSIsIl9nZXRDaGVja1Njb3JlIiwiX2NoZWNrTGVuZ3RoIiwiX2NoZWNrTG93ZXJjYXNlIiwiX2NoZWNrVXBwZXJjYXNlIiwiX2NoZWNrRGlnaXQiLCJfY2hlY2tDaGFyIiwiX2hpZ2hsaWdodCIsInZhbHVlIiwibGVuZ3RoIiwidGVzdCIsImNvdW50IiwiaXRlbXMiLCJzbGljZSIsImNhbGwiLCJxdWVyeVNlbGVjdG9yQWxsIiwidG90YWwiLCJpbmRleCIsIl9nZXRTY29yZSIsIm1hcCIsIml0ZW0iLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJ2aXNpYmxlSWNvbiIsImhpZGRlbkljb24iLCJnZXRBdHRyaWJ1dGUiLCJ0b0xvd2VyQ2FzZSIsImZvY3VzIiwiX3Jlc2V0IiwiX2Rlc3Ryb3kiLCJjaGVjayIsImdldFNjb3JlIiwicmVzZXQiLCJkZXN0cm95IiwiZ2V0SW5zdGFuY2UiLCJjcmVhdGVJbnN0YW5jZXMiLCJzZWxlY3RvciIsImVsZW1lbnRzIiwiZG9jdW1lbnQiLCJib2R5IiwiaSIsImxlbiIsImluaXQiLCJyZWFkeVN0YXRlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/theme/js/components/password-meter.js\n");

/***/ }),

/***/ "./resources/theme/js/components/scroll.js":
/*!*************************************************!*\
  !*** ./resources/theme/js/components/scroll.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval(" // Class definition\n\nvar KTScroll = function KTScroll(element, options) {\n  ////////////////////////////\n  // ** Private Variables  ** //\n  ////////////////////////////\n  var the = this;\n  var body = document.getElementsByTagName(\"BODY\")[0];\n\n  if (!element) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {\n    saveState: true\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var _construct = function _construct() {\n    if (KTUtil.data(element).has('scroll')) {\n      the = KTUtil.data(element).get('scroll');\n    } else {\n      _init();\n    }\n  };\n\n  var _init = function _init() {\n    // Variables\n    the.options = KTUtil.deepExtend({}, defaultOptions, options); // Elements\n\n    the.element = element;\n    the.id = the.element.getAttribute('id'); // Set initialized\n\n    the.element.setAttribute('data-kt-scroll', 'true'); // Update\n\n    _update(); // Bind Instance\n\n\n    KTUtil.data(the.element).set('scroll', the);\n  };\n\n  var _setupHeight = function _setupHeight() {\n    var heightType = _getHeightType();\n\n    var height = _getHeight(); // Set height\n\n\n    if (height !== null && height.length > 0) {\n      KTUtil.css(the.element, heightType, height);\n    } else {\n      KTUtil.css(the.element, heightType, '');\n    }\n  };\n\n  var _setupState = function _setupState() {\n    if (_getOption('save-state') === true && typeof KTCookie !== 'undefined' && the.id) {\n      if (KTCookie.get(the.id + 'st')) {\n        var pos = parseInt(KTCookie.get(the.id + 'st'));\n\n        if (pos > 0) {\n          the.element.scrollTop = pos;\n        }\n      }\n    }\n  };\n\n  var _setupScrollHandler = function _setupScrollHandler() {\n    if (_getOption('save-state') === true && typeof KTCookie !== 'undefined' && the.id) {\n      the.element.addEventListener('scroll', _scrollHandler);\n    } else {\n      the.element.removeEventListener('scroll', _scrollHandler);\n    }\n  };\n\n  var _destroyScrollHandler = function _destroyScrollHandler() {\n    the.element.removeEventListener('scroll', _scrollHandler);\n  };\n\n  var _resetHeight = function _resetHeight() {\n    KTUtil.css(the.element, _getHeightType(), '');\n  };\n\n  var _scrollHandler = function _scrollHandler() {\n    KTCookie.set(the.id + 'st', the.element.scrollTop);\n  };\n\n  var _update = function _update() {\n    // Activate/deactivate\n    if (_getOption('activate') === true || the.element.hasAttribute('data-kt-scroll-activate') === false) {\n      _setupHeight();\n\n      _setupScrollHandler();\n\n      _setupState();\n    } else {\n      _resetHeight();\n\n      _destroyScrollHandler();\n    }\n  };\n\n  var _getHeight = function _getHeight() {\n    var height = _getOption(_getHeightType());\n\n    if (height instanceof Function) {\n      return height.call();\n    } else if (height !== null && typeof height === 'string' && height.toLowerCase() === 'auto') {\n      return _getAutoHeight();\n    } else {\n      return height;\n    }\n  };\n\n  var _getAutoHeight = function _getAutoHeight() {\n    var height = KTUtil.getViewPort().height;\n\n    var dependencies = _getOption('dependencies');\n\n    var wrappers = _getOption('wrappers');\n\n    var offset = _getOption('offset'); // Height dependencies\n\n\n    if (dependencies !== null) {\n      var elements = document.querySelectorAll(dependencies);\n\n      if (elements && elements.length > 0) {\n        for (var i = 0, len = elements.length; i < len; i++) {\n          var element = elements[i];\n\n          if (KTUtil.visible(element) === false) {\n            continue;\n          }\n\n          height = height - parseInt(KTUtil.css(element, 'height'));\n          height = height - parseInt(KTUtil.css(element, 'margin-top'));\n          height = height - parseInt(KTUtil.css(element, 'margin-bottom'));\n\n          if (KTUtil.css(element, 'border-top')) {\n            height = height - parseInt(KTUtil.css(element, 'border-top'));\n          }\n\n          if (KTUtil.css(element, 'border-bottom')) {\n            height = height - parseInt(KTUtil.css(element, 'border-bottom'));\n          }\n        }\n      }\n    } // Wrappers\n\n\n    if (wrappers !== null) {\n      var elements = document.querySelectorAll(wrappers);\n\n      if (elements && elements.length > 0) {\n        for (var i = 0, len = elements.length; i < len; i++) {\n          var element = elements[i];\n\n          if (KTUtil.visible(element) === false) {\n            continue;\n          }\n\n          height = height - parseInt(KTUtil.css(element, 'margin-top'));\n          height = height - parseInt(KTUtil.css(element, 'margin-bottom'));\n          height = height - parseInt(KTUtil.css(element, 'padding-top'));\n          height = height - parseInt(KTUtil.css(element, 'padding-bottom'));\n\n          if (KTUtil.css(element, 'border-top')) {\n            height = height - parseInt(KTUtil.css(element, 'border-top'));\n          }\n\n          if (KTUtil.css(element, 'border-bottom')) {\n            height = height - parseInt(KTUtil.css(element, 'border-bottom'));\n          }\n        }\n      }\n    } // Custom offset\n\n\n    if (offset !== null) {\n      height = height - parseInt(offset);\n    }\n\n    height = height - parseInt(KTUtil.css(the.element, 'margin-top'));\n    height = height - parseInt(KTUtil.css(the.element, 'margin-bottom'));\n\n    if (KTUtil.css(element, 'border-top')) {\n      height = height - parseInt(KTUtil.css(element, 'border-top'));\n    }\n\n    if (KTUtil.css(element, 'border-bottom')) {\n      height = height - parseInt(KTUtil.css(element, 'border-bottom'));\n    }\n\n    height = String(height) + 'px';\n    return height;\n  };\n\n  var _getOption = function _getOption(name) {\n    if (the.element.hasAttribute('data-kt-scroll-' + name) === true) {\n      var attr = the.element.getAttribute('data-kt-scroll-' + name);\n      var value = KTUtil.getResponsiveValue(attr);\n\n      if (value !== null && String(value) === 'true') {\n        value = true;\n      } else if (value !== null && String(value) === 'false') {\n        value = false;\n      }\n\n      return value;\n    } else {\n      var optionName = KTUtil.snakeToCamel(name);\n\n      if (the.options[optionName]) {\n        return KTUtil.getResponsiveValue(the.options[optionName]);\n      } else {\n        return null;\n      }\n    }\n  };\n\n  var _getHeightType = function _getHeightType() {\n    if (_getOption('height')) {\n      return 'height';\n    }\n\n    if (_getOption('min-height')) {\n      return 'min-height';\n    }\n\n    if (_getOption('max-height')) {\n      return 'max-height';\n    }\n  };\n\n  var _destroy = function _destroy() {\n    KTUtil.data(the.element).remove('scroll');\n  }; // Construct Class\n\n\n  _construct(); ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n\n\n  the.update = function () {\n    return _update();\n  };\n\n  the.getHeight = function () {\n    return _getHeight();\n  };\n\n  the.getElement = function () {\n    return the.element;\n  };\n\n  the.destroy = function () {\n    return _destroy();\n  };\n}; // Static methods\n\n\nKTScroll.getInstance = function (element) {\n  if (element !== null && KTUtil.data(element).has('scroll')) {\n    return KTUtil.data(element).get('scroll');\n  } else {\n    return null;\n  }\n}; // Create instances\n\n\nKTScroll.createInstances = function () {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-kt-scroll=\"true\"]';\n  var body = document.getElementsByTagName(\"BODY\")[0]; // Initialize Menus\n\n  var elements = body.querySelectorAll(selector);\n\n  if (elements && elements.length > 0) {\n    for (var i = 0, len = elements.length; i < len; i++) {\n      new KTScroll(elements[i]);\n    }\n  }\n}; // Window resize handling\n\n\nwindow.addEventListener('resize', function () {\n  var timer;\n  var body = document.getElementsByTagName(\"BODY\")[0];\n  KTUtil.throttle(timer, function () {\n    // Locate and update Offcanvas instances on window resize\n    var elements = body.querySelectorAll('[data-kt-scroll=\"true\"]');\n\n    if (elements && elements.length > 0) {\n      for (var i = 0, len = elements.length; i < len; i++) {\n        var scroll = KTScroll.getInstance(elements[i]);\n\n        if (scroll) {\n          scroll.update();\n        }\n      }\n    }\n  }, 200);\n}); // Global initialization\n\nKTScroll.init = function () {\n  KTScroll.createInstances();\n}; // On document ready\n\n\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', KTScroll.init);\n} else {\n  KTScroll.init();\n} // Webpack Support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTScroll;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/theme/js/components/scroll.js\n");

/***/ }),

/***/ "./resources/theme/js/components/scrolltop.js":
/*!****************************************************!*\
  !*** ./resources/theme/js/components/scrolltop.js ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
eval(" // Class definition\n\nvar KTScrolltop = function KTScrolltop(element, options) {\n  ////////////////////////////\n  // ** Private variables  ** //\n  ////////////////////////////\n  var the = this;\n  var body = document.getElementsByTagName(\"BODY\")[0];\n\n  if (typeof element === \"undefined\" || element === null) {\n    return;\n  } // Default options\n\n\n  var defaultOptions = {\n    offset: 300,\n    speed: 600\n  }; ////////////////////////////\n  // ** Private methods  ** //\n  ////////////////////////////\n\n  var _construct = function _construct() {\n    if (KTUtil.data(element).has('scrolltop')) {\n      the = KTUtil.data(element).get('scrolltop');\n    } else {\n      _init();\n    }\n  };\n\n  var _init = function _init() {\n    // Variables\n    the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    the.uid = KTUtil.getUniqueId('scrolltop');\n    the.element = element; // Set initialized\n\n    the.element.setAttribute('data-kt-scrolltop', 'true'); // Event Handlers\n\n    _handlers(); // Bind Instance\n\n\n    KTUtil.data(the.element).set('scrolltop', the);\n  };\n\n  var _handlers = function _handlers() {\n    var timer;\n    window.addEventListener('scroll', function () {\n      KTUtil.throttle(timer, function () {\n        _scroll();\n      }, 200);\n    });\n    KTUtil.addEvent(the.element, 'click', function (e) {\n      e.preventDefault();\n\n      _go();\n    });\n  };\n\n  var _scroll = function _scroll() {\n    var offset = parseInt(_getOption('offset'));\n    var pos = KTUtil.getScrollTop(); // current vertical position\n\n    if (pos > offset) {\n      if (body.hasAttribute('data-kt-scrolltop') === false) {\n        body.setAttribute('data-kt-scrolltop', 'on');\n      }\n    } else {\n      if (body.hasAttribute('data-kt-scrolltop') === true) {\n        body.removeAttribute('data-kt-scrolltop');\n      }\n    }\n  };\n\n  var _go = function _go() {\n    var speed = parseInt(_getOption('speed'));\n    KTUtil.scrollTop(0, speed);\n  };\n\n  var _getOption = function _getOption(name) {\n    if (the.element.hasAttribute('data-kt-scrolltop-' + name) === true) {\n      var attr = the.element.getAttribute('data-kt-scrolltop-' + name);\n      var value = KTUtil.getResponsiveValue(attr);\n\n      if (value !== null && String(value) === 'true') {\n        value = true;\n      } else if (value !== null && String(value) === 'false') {\n        value = false;\n      }\n\n      return value;\n    } else {\n      var optionName = KTUtil.snakeToCamel(name);\n\n      if (the.options[optionName]) {\n        return KTUtil.getResponsiveValue(the.options[optionName]);\n      } else {\n        return null;\n      }\n    }\n  };\n\n  var _destroy = function _destroy() {\n    KTUtil.data(the.element).remove('scrolltop');\n  }; // Construct class\n\n\n  _construct(); ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n  // Plugin API\n\n\n  the.go = function () {\n    return _go();\n  };\n\n  the.getElement = function () {\n    return the.element;\n  };\n\n  the.destroy = function () {\n    return _destroy();\n  };\n}; // Static methods\n\n\nKTScrolltop.getInstance = function (element) {\n  if (element && KTUtil.data(element).has('scrolltop')) {\n    return KTUtil.data(element).get('scrolltop');\n  } else {\n    return null;\n  }\n}; // Create instances\n\n\nKTScrolltop.createInstances = function () {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-kt-scrolltop=\"true\"]';\n  var body = document.getElementsByTagName(\"BODY\")[0]; // Initialize Menus\n\n  var elements = body.querySelectorAll(selector);\n  var scrolltop;\n\n  if (elements && elements.length > 0) {\n    for (var i = 0, len = elements.length; i < len; i++) {\n      scrolltop = new KTScrolltop(elements[i]);\n    }\n  }\n}; // Global initialization\n\n\nKTScrolltop.init = function () {\n  KTScrolltop.createInstances();\n}; // On document ready\n\n\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', KTScrolltop.init);\n} else {\n  KTScrolltop.init();\n} // Webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTScrolltop;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/theme/js/components/scrolltop.js\n");

/***/ }),

/***/ "./resources/theme/js/components/search.js":
/*!*************************************************!*\
  !*** ./resources/theme/js/components/search.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval(" // Class definition\n\nvar KTSearch = function KTSearch(element, options) {\n  ////////////////////////////\n  // ** Private variables  ** //\n  ////////////////////////////\n  var the = this;\n\n  if (!element) {\n    return;\n  } // Default Options\n\n\n  var defaultOptions = {\n    minLength: 2,\n    // Miniam text lenght to query search\n    keypress: true,\n    // Enable search on keypress \n    enter: true,\n    // Enable search on enter key press\n    layout: 'menu',\n    // Use 'menu' or 'inline' layout options to display search results\n    responsive: null,\n    // Pass integer value or bootstrap compatible breakpoint key(sm,md,lg,xl,xxl) to enable reponsive form mode for device width below the breakpoint value\n    showOnFocus: true // Always show menu on input focus\n\n  }; ////////////////////////////\n  // ** Private methods  ** //\n  ////////////////////////////\n  // Construct\n\n  var _construct = function _construct() {\n    if (KTUtil.data(element).has('search') === true) {\n      the = KTUtil.data(element).get('search');\n    } else {\n      _init();\n    }\n  }; // Init\n\n\n  var _init = function _init() {\n    // Variables\n    the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    the.processing = false; // Elements\n\n    the.element = element;\n    the.contentElement = _getElement('content');\n    the.formElement = _getElement('form');\n    the.inputElement = _getElement('input');\n    the.spinnerElement = _getElement('spinner');\n    the.clearElement = _getElement('clear');\n    the.toggleElement = _getElement('toggle');\n    the.submitElement = _getElement('submit');\n    the.toolbarElement = _getElement('toolbar');\n    the.resultsElement = _getElement('results');\n    the.suggestionElement = _getElement('suggestion');\n    the.emptyElement = _getElement('empty'); // Set initialized\n\n    the.element.setAttribute('data-kt-search', 'true'); // Layout\n\n    the.layout = _getOption('layout'); // Menu\n\n    if (the.layout === 'menu') {\n      the.menuObject = new KTMenu(the.contentElement);\n    } else {\n      the.menuObject = null;\n    } // Update\n\n\n    _update(); // Event Handlers\n\n\n    _handlers(); // Bind Instance\n\n\n    KTUtil.data(the.element).set('search', the);\n  }; // Handlera\n\n\n  var _handlers = function _handlers() {\n    // Focus\n    the.inputElement.addEventListener('focus', _focus); // Blur\n\n    the.inputElement.addEventListener('blur', _blur); // Keypress\n\n    if (_getOption('keypress') === true) {\n      the.inputElement.addEventListener('input', _input);\n    } // Submit\n\n\n    if (the.submitElement) {\n      the.submitElement.addEventListener('click', _search);\n    } // Enter\n\n\n    if (_getOption('enter') === true) {\n      the.inputElement.addEventListener('keypress', _enter);\n    } // Clear \n\n\n    if (the.clearElement) {\n      the.clearElement.addEventListener('click', _clear);\n    } // Menu\n\n\n    if (the.menuObject) {\n      // Toggle menu\n      if (the.toggleElement) {\n        the.toggleElement.addEventListener('click', _show);\n        the.menuObject.on('kt.menu.dropdown.show', function (item) {\n          if (KTUtil.visible(the.toggleElement)) {\n            the.toggleElement.classList.add('active');\n            the.toggleElement.classList.add('show');\n          }\n        });\n        the.menuObject.on('kt.menu.dropdown.hide', function (item) {\n          if (KTUtil.visible(the.toggleElement)) {\n            the.toggleElement.classList.remove('active');\n            the.toggleElement.classList.remove('show');\n          }\n        });\n      }\n\n      the.menuObject.on('kt.menu.dropdown.shown', function () {\n        the.inputElement.focus();\n      });\n    } // Window resize handling\n\n\n    window.addEventListener('resize', function () {\n      var timer;\n      KTUtil.throttle(timer, function () {\n        _update();\n      }, 200);\n    });\n  }; // Focus\n\n\n  var _focus = function _focus() {\n    the.element.classList.add('focus');\n\n    if (_getOption('show-on-focus') === true || the.inputElement.value.length >= minLength) {\n      _show();\n    }\n  }; // Blur\n\n\n  var _blur = function _blur() {\n    the.element.classList.remove('focus');\n  }; // Enter \n\n\n  var _enter = function _enter(e) {\n    var key = e.charCode || e.keyCode || 0;\n\n    if (key == 13) {\n      e.preventDefault();\n\n      _search();\n    }\n  }; // Input\n\n\n  var _input = function _input() {\n    if (_getOption('min-length')) {\n      var minLength = parseInt(_getOption('min-length'));\n\n      if (the.inputElement.value.length >= minLength) {\n        _search();\n      } else if (the.inputElement.value.length === 0) {\n        _clear();\n      }\n    }\n  }; // Search\n\n\n  var _search = function _search() {\n    if (the.processing === false) {\n      // Show search spinner\n      if (the.spinnerElement) {\n        the.spinnerElement.classList.remove(\"d-none\");\n      } // Hide search clear button\n\n\n      if (the.clearElement) {\n        the.clearElement.classList.add(\"d-none\");\n      } // Hide search toolbar\n\n\n      if (the.toolbarElement && the.formElement.contains(the.toolbarElement)) {\n        the.toolbarElement.classList.add(\"d-none\");\n      } // Focus input\n\n\n      the.inputElement.focus();\n      the.processing = true;\n      KTEventHandler.trigger(the.element, 'kt.search.process', the);\n    }\n  }; // Complete\n\n\n  var _complete = function _complete() {\n    if (the.spinnerElement) {\n      the.spinnerElement.classList.add(\"d-none\");\n    } // Show search toolbar\n\n\n    if (the.clearElement) {\n      the.clearElement.classList.remove(\"d-none\");\n    }\n\n    if (the.inputElement.value.length === 0) {\n      _clear();\n    } // Focus input\n\n\n    the.inputElement.focus();\n\n    _show();\n\n    the.processing = false;\n  }; // Clear\n\n\n  var _clear = function _clear() {\n    if (KTEventHandler.trigger(the.element, 'kt.search.clear', the) === false) {\n      return;\n    } // Clear and focus input\n\n\n    the.inputElement.value = \"\";\n    the.inputElement.focus(); // Hide clear icon\n\n    if (the.clearElement) {\n      the.clearElement.classList.add(\"d-none\");\n    } // Show search toolbar\n\n\n    if (the.toolbarElement && the.formElement.contains(the.toolbarElement)) {\n      the.toolbarElement.classList.remove(\"d-none\");\n    } // Hide menu\n\n\n    if (_getOption('show-on-focus') === false) {\n      _hide();\n    }\n\n    KTEventHandler.trigger(the.element, 'kt.search.cleared', the);\n  }; // Update\n\n\n  var _update = function _update() {\n    // Handle responsive form\n    if (the.layout === 'menu') {\n      var responsiveFormMode = _getResponsiveFormMode();\n\n      if (responsiveFormMode === 'on' && the.contentElement.contains(the.formElement) === false) {\n        the.contentElement.prepend(the.formElement);\n        the.formElement.classList.remove('d-none');\n      } else if (responsiveFormMode === 'off' && the.contentElement.contains(the.formElement) === true) {\n        the.element.prepend(the.formElement);\n        the.formElement.classList.add('d-none');\n      }\n    }\n  }; // Show menu\n\n\n  var _show = function _show() {\n    if (the.menuObject) {\n      _update();\n\n      the.menuObject.show(the.element);\n    }\n  }; // Hide menu\n\n\n  var _hide = function _hide() {\n    if (the.menuObject) {\n      _update();\n\n      the.menuObject.hide(the.element);\n    }\n  }; // Get option\n\n\n  var _getOption = function _getOption(name) {\n    if (the.element.hasAttribute('data-kt-search-' + name) === true) {\n      var attr = the.element.getAttribute('data-kt-search-' + name);\n      var value = KTUtil.getResponsiveValue(attr);\n\n      if (value !== null && String(value) === 'true') {\n        value = true;\n      } else if (value !== null && String(value) === 'false') {\n        value = false;\n      }\n\n      return value;\n    } else {\n      var optionName = KTUtil.snakeToCamel(name);\n\n      if (the.options[optionName]) {\n        return KTUtil.getResponsiveValue(the.options[optionName]);\n      } else {\n        return null;\n      }\n    }\n  }; // Get element\n\n\n  var _getElement = function _getElement(name) {\n    return the.element.querySelector('[data-kt-search-element=\"' + name + '\"]');\n  }; // Check if responsive form mode is enabled\n\n\n  var _getResponsiveFormMode = function _getResponsiveFormMode() {\n    var responsive = _getOption('responsive');\n\n    var width = KTUtil.getViewPort().width;\n\n    if (!responsive) {\n      return null;\n    }\n\n    var breakpoint = KTUtil.getBreakpoint(responsive);\n\n    if (!breakpoint) {\n      breakpoint = parseInt(responsive);\n    }\n\n    if (width < breakpoint) {\n      return \"on\";\n    } else {\n      return \"off\";\n    }\n  };\n\n  var _destroy = function _destroy() {\n    KTUtil.data(the.element).remove('search');\n  }; // Construct class\n\n\n  _construct(); ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n  // Plugin API\n\n\n  the.show = function () {\n    return _show();\n  };\n\n  the.hide = function () {\n    return _hide();\n  };\n\n  the.update = function () {\n    return _update();\n  };\n\n  the.search = function () {\n    return _search();\n  };\n\n  the.complete = function () {\n    return _complete();\n  };\n\n  the.clear = function () {\n    return _clear();\n  };\n\n  the.isProcessing = function () {\n    return the.processing;\n  };\n\n  the.getQuery = function () {\n    return the.inputElement.value;\n  };\n\n  the.getMenu = function () {\n    return the.menuObject;\n  };\n\n  the.getFormElement = function () {\n    return the.formElement;\n  };\n\n  the.getInputElement = function () {\n    return the.inputElement;\n  };\n\n  the.getContentElement = function () {\n    return the.contentElement;\n  };\n\n  the.getElement = function () {\n    return the.element;\n  };\n\n  the.destroy = function () {\n    return _destroy();\n  }; // Event API\n\n\n  the.on = function (name, handler) {\n    return KTEventHandler.on(the.element, name, handler);\n  };\n\n  the.one = function (name, handler) {\n    return KTEventHandler.one(the.element, name, handler);\n  };\n\n  the.off = function (name) {\n    return KTEventHandler.off(the.element, name);\n  };\n}; // Static methods\n\n\nKTSearch.getInstance = function (element) {\n  if (element !== null && KTUtil.data(element).has('search')) {\n    return KTUtil.data(element).get('search');\n  } else {\n    return null;\n  }\n}; // Webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTSearch;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvdGhlbWUvanMvY29tcG9uZW50cy9zZWFyY2guanMuanMiLCJtYXBwaW5ncyI6IkNBRUE7O0FBQ0EsSUFBSUEsUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBU0MsT0FBVCxFQUFrQkMsT0FBbEIsRUFBMkI7QUFDdEM7QUFDQTtBQUNBO0FBQ0EsTUFBSUMsR0FBRyxHQUFHLElBQVY7O0FBRUEsTUFBSSxDQUFDRixPQUFMLEVBQWM7QUFDVjtBQUNILEdBUnFDLENBVXRDOzs7QUFDQSxNQUFJRyxjQUFjLEdBQUc7QUFDakJDLElBQUFBLFNBQVMsRUFBRSxDQURNO0FBQ0Y7QUFDZkMsSUFBQUEsUUFBUSxFQUFFLElBRk87QUFFQTtBQUNqQkMsSUFBQUEsS0FBSyxFQUFFLElBSFU7QUFHSDtBQUNkQyxJQUFBQSxNQUFNLEVBQUUsTUFKUztBQUlBO0FBQ2pCQyxJQUFBQSxVQUFVLEVBQUUsSUFMSztBQUtDO0FBQ2xCQyxJQUFBQSxXQUFXLEVBQUUsSUFOSSxDQU1DOztBQU5ELEdBQXJCLENBWHNDLENBb0J0QztBQUNBO0FBQ0E7QUFFQTs7QUFDQSxNQUFJQyxVQUFVLEdBQUcsU0FBYkEsVUFBYSxHQUFXO0FBQ3hCLFFBQUtDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZWixPQUFaLEVBQXFCYSxHQUFyQixDQUF5QixRQUF6QixNQUF1QyxJQUE1QyxFQUFtRDtBQUMvQ1gsTUFBQUEsR0FBRyxHQUFHUyxNQUFNLENBQUNDLElBQVAsQ0FBWVosT0FBWixFQUFxQmMsR0FBckIsQ0FBeUIsUUFBekIsQ0FBTjtBQUNILEtBRkQsTUFFTztBQUNIQyxNQUFBQSxLQUFLO0FBQ1I7QUFDSixHQU5ELENBekJzQyxDQWlDdEM7OztBQUNBLE1BQUlBLEtBQUssR0FBRyxTQUFSQSxLQUFRLEdBQVc7QUFDbkI7QUFDQWIsSUFBQUEsR0FBRyxDQUFDRCxPQUFKLEdBQWNVLE1BQU0sQ0FBQ0ssVUFBUCxDQUFrQixFQUFsQixFQUFzQmIsY0FBdEIsRUFBc0NGLE9BQXRDLENBQWQ7QUFDQUMsSUFBQUEsR0FBRyxDQUFDZSxVQUFKLEdBQWlCLEtBQWpCLENBSG1CLENBS25COztBQUNBZixJQUFBQSxHQUFHLENBQUNGLE9BQUosR0FBY0EsT0FBZDtBQUNBRSxJQUFBQSxHQUFHLENBQUNnQixjQUFKLEdBQXFCQyxXQUFXLENBQUMsU0FBRCxDQUFoQztBQUNBakIsSUFBQUEsR0FBRyxDQUFDa0IsV0FBSixHQUFrQkQsV0FBVyxDQUFDLE1BQUQsQ0FBN0I7QUFDQWpCLElBQUFBLEdBQUcsQ0FBQ21CLFlBQUosR0FBbUJGLFdBQVcsQ0FBQyxPQUFELENBQTlCO0FBQ0FqQixJQUFBQSxHQUFHLENBQUNvQixjQUFKLEdBQXFCSCxXQUFXLENBQUMsU0FBRCxDQUFoQztBQUNBakIsSUFBQUEsR0FBRyxDQUFDcUIsWUFBSixHQUFtQkosV0FBVyxDQUFDLE9BQUQsQ0FBOUI7QUFDQWpCLElBQUFBLEdBQUcsQ0FBQ3NCLGFBQUosR0FBb0JMLFdBQVcsQ0FBQyxRQUFELENBQS9CO0FBQ0FqQixJQUFBQSxHQUFHLENBQUN1QixhQUFKLEdBQW9CTixXQUFXLENBQUMsUUFBRCxDQUEvQjtBQUNBakIsSUFBQUEsR0FBRyxDQUFDd0IsY0FBSixHQUFxQlAsV0FBVyxDQUFDLFNBQUQsQ0FBaEM7QUFFQWpCLElBQUFBLEdBQUcsQ0FBQ3lCLGNBQUosR0FBcUJSLFdBQVcsQ0FBQyxTQUFELENBQWhDO0FBQ0FqQixJQUFBQSxHQUFHLENBQUMwQixpQkFBSixHQUF3QlQsV0FBVyxDQUFDLFlBQUQsQ0FBbkM7QUFDQWpCLElBQUFBLEdBQUcsQ0FBQzJCLFlBQUosR0FBbUJWLFdBQVcsQ0FBQyxPQUFELENBQTlCLENBbEJtQixDQW9CbkI7O0FBQ0FqQixJQUFBQSxHQUFHLENBQUNGLE9BQUosQ0FBWThCLFlBQVosQ0FBeUIsZ0JBQXpCLEVBQTJDLE1BQTNDLEVBckJtQixDQXVCbkI7O0FBQ0E1QixJQUFBQSxHQUFHLENBQUNLLE1BQUosR0FBYXdCLFVBQVUsQ0FBQyxRQUFELENBQXZCLENBeEJtQixDQTBCbkI7O0FBQ0EsUUFBSzdCLEdBQUcsQ0FBQ0ssTUFBSixLQUFlLE1BQXBCLEVBQTZCO0FBQ3pCTCxNQUFBQSxHQUFHLENBQUM4QixVQUFKLEdBQWlCLElBQUlDLE1BQUosQ0FBVy9CLEdBQUcsQ0FBQ2dCLGNBQWYsQ0FBakI7QUFDSCxLQUZELE1BRU87QUFDSGhCLE1BQUFBLEdBQUcsQ0FBQzhCLFVBQUosR0FBaUIsSUFBakI7QUFDSCxLQS9Ca0IsQ0FpQ25COzs7QUFDQUUsSUFBQUEsT0FBTyxHQWxDWSxDQW9DbkI7OztBQUNBQyxJQUFBQSxTQUFTLEdBckNVLENBdUNuQjs7O0FBQ0F4QixJQUFBQSxNQUFNLENBQUNDLElBQVAsQ0FBWVYsR0FBRyxDQUFDRixPQUFoQixFQUF5Qm9DLEdBQXpCLENBQTZCLFFBQTdCLEVBQXVDbEMsR0FBdkM7QUFDSCxHQXpDRCxDQWxDc0MsQ0E2RXRDOzs7QUFDQSxNQUFJaUMsU0FBUyxHQUFHLFNBQVpBLFNBQVksR0FBVztBQUN2QjtBQUNBakMsSUFBQUEsR0FBRyxDQUFDbUIsWUFBSixDQUFpQmdCLGdCQUFqQixDQUFrQyxPQUFsQyxFQUEyQ0MsTUFBM0MsRUFGdUIsQ0FJdkI7O0FBQ0FwQyxJQUFBQSxHQUFHLENBQUNtQixZQUFKLENBQWlCZ0IsZ0JBQWpCLENBQWtDLE1BQWxDLEVBQTBDRSxLQUExQyxFQUx1QixDQU92Qjs7QUFDQSxRQUFLUixVQUFVLENBQUMsVUFBRCxDQUFWLEtBQTJCLElBQWhDLEVBQXVDO0FBQ25DN0IsTUFBQUEsR0FBRyxDQUFDbUIsWUFBSixDQUFpQmdCLGdCQUFqQixDQUFrQyxPQUFsQyxFQUEyQ0csTUFBM0M7QUFDSCxLQVZzQixDQVl2Qjs7O0FBQ0EsUUFBS3RDLEdBQUcsQ0FBQ3VCLGFBQVQsRUFBeUI7QUFDckJ2QixNQUFBQSxHQUFHLENBQUN1QixhQUFKLENBQWtCWSxnQkFBbEIsQ0FBbUMsT0FBbkMsRUFBNENJLE9BQTVDO0FBQ0gsS0Fmc0IsQ0FpQnZCOzs7QUFDQSxRQUFLVixVQUFVLENBQUMsT0FBRCxDQUFWLEtBQXdCLElBQTdCLEVBQW9DO0FBQ2hDN0IsTUFBQUEsR0FBRyxDQUFDbUIsWUFBSixDQUFpQmdCLGdCQUFqQixDQUFrQyxVQUFsQyxFQUE4Q0ssTUFBOUM7QUFDSCxLQXBCc0IsQ0FzQnZCOzs7QUFDQSxRQUFLeEMsR0FBRyxDQUFDcUIsWUFBVCxFQUF3QjtBQUNwQnJCLE1BQUFBLEdBQUcsQ0FBQ3FCLFlBQUosQ0FBaUJjLGdCQUFqQixDQUFrQyxPQUFsQyxFQUEyQ00sTUFBM0M7QUFDSCxLQXpCc0IsQ0EyQnZCOzs7QUFDQSxRQUFLekMsR0FBRyxDQUFDOEIsVUFBVCxFQUFzQjtBQUNsQjtBQUNBLFVBQUs5QixHQUFHLENBQUNzQixhQUFULEVBQXlCO0FBQ3JCdEIsUUFBQUEsR0FBRyxDQUFDc0IsYUFBSixDQUFrQmEsZ0JBQWxCLENBQW1DLE9BQW5DLEVBQTRDTyxLQUE1QztBQUVBMUMsUUFBQUEsR0FBRyxDQUFDOEIsVUFBSixDQUFlYSxFQUFmLENBQWtCLHVCQUFsQixFQUEyQyxVQUFTQyxJQUFULEVBQWU7QUFDdEQsY0FBSW5DLE1BQU0sQ0FBQ29DLE9BQVAsQ0FBZTdDLEdBQUcsQ0FBQ3NCLGFBQW5CLENBQUosRUFBdUM7QUFDbkN0QixZQUFBQSxHQUFHLENBQUNzQixhQUFKLENBQWtCd0IsU0FBbEIsQ0FBNEJDLEdBQTVCLENBQWdDLFFBQWhDO0FBQ0EvQyxZQUFBQSxHQUFHLENBQUNzQixhQUFKLENBQWtCd0IsU0FBbEIsQ0FBNEJDLEdBQTVCLENBQWdDLE1BQWhDO0FBQ0g7QUFDSixTQUxEO0FBT0EvQyxRQUFBQSxHQUFHLENBQUM4QixVQUFKLENBQWVhLEVBQWYsQ0FBa0IsdUJBQWxCLEVBQTJDLFVBQVNDLElBQVQsRUFBZTtBQUN0RCxjQUFJbkMsTUFBTSxDQUFDb0MsT0FBUCxDQUFlN0MsR0FBRyxDQUFDc0IsYUFBbkIsQ0FBSixFQUF1QztBQUNuQ3RCLFlBQUFBLEdBQUcsQ0FBQ3NCLGFBQUosQ0FBa0J3QixTQUFsQixDQUE0QkUsTUFBNUIsQ0FBbUMsUUFBbkM7QUFDQWhELFlBQUFBLEdBQUcsQ0FBQ3NCLGFBQUosQ0FBa0J3QixTQUFsQixDQUE0QkUsTUFBNUIsQ0FBbUMsTUFBbkM7QUFDSDtBQUNKLFNBTEQ7QUFNSDs7QUFFRGhELE1BQUFBLEdBQUcsQ0FBQzhCLFVBQUosQ0FBZWEsRUFBZixDQUFrQix3QkFBbEIsRUFBNEMsWUFBVztBQUNuRDNDLFFBQUFBLEdBQUcsQ0FBQ21CLFlBQUosQ0FBaUI4QixLQUFqQjtBQUNILE9BRkQ7QUFHSCxLQW5Ec0IsQ0FxRHZCOzs7QUFDQUMsSUFBQUEsTUFBTSxDQUFDZixnQkFBUCxDQUF3QixRQUF4QixFQUFrQyxZQUFXO0FBQ3pDLFVBQUlnQixLQUFKO0FBRUExQyxNQUFBQSxNQUFNLENBQUMyQyxRQUFQLENBQWdCRCxLQUFoQixFQUF1QixZQUFXO0FBQzlCbkIsUUFBQUEsT0FBTztBQUNWLE9BRkQsRUFFRyxHQUZIO0FBR0gsS0FORDtBQU9ILEdBN0RELENBOUVzQyxDQTZJdEM7OztBQUNBLE1BQUlJLE1BQU0sR0FBRyxTQUFUQSxNQUFTLEdBQVc7QUFDcEJwQyxJQUFBQSxHQUFHLENBQUNGLE9BQUosQ0FBWWdELFNBQVosQ0FBc0JDLEdBQXRCLENBQTBCLE9BQTFCOztBQUVBLFFBQUtsQixVQUFVLENBQUMsZUFBRCxDQUFWLEtBQWdDLElBQWhDLElBQXdDN0IsR0FBRyxDQUFDbUIsWUFBSixDQUFpQmtDLEtBQWpCLENBQXVCQyxNQUF2QixJQUFpQ3BELFNBQTlFLEVBQTBGO0FBQ3RGd0MsTUFBQUEsS0FBSztBQUNSO0FBQ0osR0FORCxDQTlJc0MsQ0FzSnRDOzs7QUFDQSxNQUFJTCxLQUFLLEdBQUcsU0FBUkEsS0FBUSxHQUFXO0FBQ25CckMsSUFBQUEsR0FBRyxDQUFDRixPQUFKLENBQVlnRCxTQUFaLENBQXNCRSxNQUF0QixDQUE2QixPQUE3QjtBQUNILEdBRkQsQ0F2SnNDLENBMkp0Qzs7O0FBQ0EsTUFBSVIsTUFBTSxHQUFHLFNBQVRBLE1BQVMsQ0FBU2UsQ0FBVCxFQUFZO0FBQ3JCLFFBQUlDLEdBQUcsR0FBR0QsQ0FBQyxDQUFDRSxRQUFGLElBQWNGLENBQUMsQ0FBQ0csT0FBaEIsSUFBMkIsQ0FBckM7O0FBRUEsUUFBSUYsR0FBRyxJQUFJLEVBQVgsRUFBZTtBQUNYRCxNQUFBQSxDQUFDLENBQUNJLGNBQUY7O0FBRUFwQixNQUFBQSxPQUFPO0FBQ1Y7QUFDSixHQVJELENBNUpzQyxDQXNLdEM7OztBQUNBLE1BQUlELE1BQU0sR0FBRyxTQUFUQSxNQUFTLEdBQVc7QUFDcEIsUUFBS1QsVUFBVSxDQUFDLFlBQUQsQ0FBZixFQUFpQztBQUM3QixVQUFJM0IsU0FBUyxHQUFHMEQsUUFBUSxDQUFDL0IsVUFBVSxDQUFDLFlBQUQsQ0FBWCxDQUF4Qjs7QUFFQSxVQUFLN0IsR0FBRyxDQUFDbUIsWUFBSixDQUFpQmtDLEtBQWpCLENBQXVCQyxNQUF2QixJQUFpQ3BELFNBQXRDLEVBQWtEO0FBQzlDcUMsUUFBQUEsT0FBTztBQUNWLE9BRkQsTUFFTyxJQUFLdkMsR0FBRyxDQUFDbUIsWUFBSixDQUFpQmtDLEtBQWpCLENBQXVCQyxNQUF2QixLQUFrQyxDQUF2QyxFQUEyQztBQUM5Q2IsUUFBQUEsTUFBTTtBQUNUO0FBQ0o7QUFDSixHQVZELENBdktzQyxDQW1MdEM7OztBQUNBLE1BQUlGLE9BQU8sR0FBRyxTQUFWQSxPQUFVLEdBQVc7QUFDckIsUUFBSXZDLEdBQUcsQ0FBQ2UsVUFBSixLQUFtQixLQUF2QixFQUE4QjtBQUMxQjtBQUNBLFVBQUlmLEdBQUcsQ0FBQ29CLGNBQVIsRUFBd0I7QUFDcEJwQixRQUFBQSxHQUFHLENBQUNvQixjQUFKLENBQW1CMEIsU0FBbkIsQ0FBNkJFLE1BQTdCLENBQW9DLFFBQXBDO0FBQ0gsT0FKeUIsQ0FNMUI7OztBQUNBLFVBQUloRCxHQUFHLENBQUNxQixZQUFSLEVBQXNCO0FBQ2xCckIsUUFBQUEsR0FBRyxDQUFDcUIsWUFBSixDQUFpQnlCLFNBQWpCLENBQTJCQyxHQUEzQixDQUErQixRQUEvQjtBQUNILE9BVHlCLENBVzFCOzs7QUFDQSxVQUFJL0MsR0FBRyxDQUFDd0IsY0FBSixJQUFzQnhCLEdBQUcsQ0FBQ2tCLFdBQUosQ0FBZ0IyQyxRQUFoQixDQUF5QjdELEdBQUcsQ0FBQ3dCLGNBQTdCLENBQTFCLEVBQXdFO0FBQ3BFeEIsUUFBQUEsR0FBRyxDQUFDd0IsY0FBSixDQUFtQnNCLFNBQW5CLENBQTZCQyxHQUE3QixDQUFpQyxRQUFqQztBQUNILE9BZHlCLENBZ0IxQjs7O0FBQ0EvQyxNQUFBQSxHQUFHLENBQUNtQixZQUFKLENBQWlCOEIsS0FBakI7QUFFQWpELE1BQUFBLEdBQUcsQ0FBQ2UsVUFBSixHQUFpQixJQUFqQjtBQUNBK0MsTUFBQUEsY0FBYyxDQUFDQyxPQUFmLENBQXVCL0QsR0FBRyxDQUFDRixPQUEzQixFQUFvQyxtQkFBcEMsRUFBeURFLEdBQXpEO0FBQ0g7QUFDSixHQXZCRCxDQXBMc0MsQ0E2TXRDOzs7QUFDQSxNQUFJZ0UsU0FBUyxHQUFHLFNBQVpBLFNBQVksR0FBVztBQUN2QixRQUFJaEUsR0FBRyxDQUFDb0IsY0FBUixFQUF3QjtBQUNwQnBCLE1BQUFBLEdBQUcsQ0FBQ29CLGNBQUosQ0FBbUIwQixTQUFuQixDQUE2QkMsR0FBN0IsQ0FBaUMsUUFBakM7QUFDSCxLQUhzQixDQUt2Qjs7O0FBQ0EsUUFBSS9DLEdBQUcsQ0FBQ3FCLFlBQVIsRUFBc0I7QUFDbEJyQixNQUFBQSxHQUFHLENBQUNxQixZQUFKLENBQWlCeUIsU0FBakIsQ0FBMkJFLE1BQTNCLENBQWtDLFFBQWxDO0FBQ0g7O0FBRUQsUUFBS2hELEdBQUcsQ0FBQ21CLFlBQUosQ0FBaUJrQyxLQUFqQixDQUF1QkMsTUFBdkIsS0FBa0MsQ0FBdkMsRUFBMkM7QUFDdkNiLE1BQUFBLE1BQU07QUFDVCxLQVpzQixDQWN2Qjs7O0FBQ0F6QyxJQUFBQSxHQUFHLENBQUNtQixZQUFKLENBQWlCOEIsS0FBakI7O0FBRUFQLElBQUFBLEtBQUs7O0FBRUwxQyxJQUFBQSxHQUFHLENBQUNlLFVBQUosR0FBaUIsS0FBakI7QUFDSCxHQXBCRCxDQTlNc0MsQ0FvT3RDOzs7QUFDQSxNQUFJMEIsTUFBTSxHQUFHLFNBQVRBLE1BQVMsR0FBVztBQUNwQixRQUFLcUIsY0FBYyxDQUFDQyxPQUFmLENBQXVCL0QsR0FBRyxDQUFDRixPQUEzQixFQUFvQyxpQkFBcEMsRUFBdURFLEdBQXZELE1BQWdFLEtBQXJFLEVBQThFO0FBQzFFO0FBQ0gsS0FIbUIsQ0FLcEI7OztBQUNBQSxJQUFBQSxHQUFHLENBQUNtQixZQUFKLENBQWlCa0MsS0FBakIsR0FBeUIsRUFBekI7QUFDQXJELElBQUFBLEdBQUcsQ0FBQ21CLFlBQUosQ0FBaUI4QixLQUFqQixHQVBvQixDQVNwQjs7QUFDQSxRQUFJakQsR0FBRyxDQUFDcUIsWUFBUixFQUFzQjtBQUNsQnJCLE1BQUFBLEdBQUcsQ0FBQ3FCLFlBQUosQ0FBaUJ5QixTQUFqQixDQUEyQkMsR0FBM0IsQ0FBK0IsUUFBL0I7QUFDSCxLQVptQixDQWNwQjs7O0FBQ0EsUUFBSS9DLEdBQUcsQ0FBQ3dCLGNBQUosSUFBc0J4QixHQUFHLENBQUNrQixXQUFKLENBQWdCMkMsUUFBaEIsQ0FBeUI3RCxHQUFHLENBQUN3QixjQUE3QixDQUExQixFQUF3RTtBQUNwRXhCLE1BQUFBLEdBQUcsQ0FBQ3dCLGNBQUosQ0FBbUJzQixTQUFuQixDQUE2QkUsTUFBN0IsQ0FBb0MsUUFBcEM7QUFDSCxLQWpCbUIsQ0FtQnBCOzs7QUFDQSxRQUFLbkIsVUFBVSxDQUFDLGVBQUQsQ0FBVixLQUFnQyxLQUFyQyxFQUE2QztBQUN6Q29DLE1BQUFBLEtBQUs7QUFDUjs7QUFFREgsSUFBQUEsY0FBYyxDQUFDQyxPQUFmLENBQXVCL0QsR0FBRyxDQUFDRixPQUEzQixFQUFvQyxtQkFBcEMsRUFBeURFLEdBQXpEO0FBQ0gsR0F6QkQsQ0FyT3NDLENBZ1F0Qzs7O0FBQ0EsTUFBSWdDLE9BQU8sR0FBRyxTQUFWQSxPQUFVLEdBQVc7QUFDckI7QUFDQSxRQUFJaEMsR0FBRyxDQUFDSyxNQUFKLEtBQWUsTUFBbkIsRUFBMkI7QUFDdkIsVUFBSTZELGtCQUFrQixHQUFHQyxzQkFBc0IsRUFBL0M7O0FBRUEsVUFBS0Qsa0JBQWtCLEtBQUssSUFBdkIsSUFBK0JsRSxHQUFHLENBQUNnQixjQUFKLENBQW1CNkMsUUFBbkIsQ0FBNEI3RCxHQUFHLENBQUNrQixXQUFoQyxNQUFpRCxLQUFyRixFQUE2RjtBQUN6RmxCLFFBQUFBLEdBQUcsQ0FBQ2dCLGNBQUosQ0FBbUJvRCxPQUFuQixDQUEyQnBFLEdBQUcsQ0FBQ2tCLFdBQS9CO0FBQ0FsQixRQUFBQSxHQUFHLENBQUNrQixXQUFKLENBQWdCNEIsU0FBaEIsQ0FBMEJFLE1BQTFCLENBQWlDLFFBQWpDO0FBQ0gsT0FIRCxNQUdPLElBQUtrQixrQkFBa0IsS0FBSyxLQUF2QixJQUFnQ2xFLEdBQUcsQ0FBQ2dCLGNBQUosQ0FBbUI2QyxRQUFuQixDQUE0QjdELEdBQUcsQ0FBQ2tCLFdBQWhDLE1BQWlELElBQXRGLEVBQTZGO0FBQ2hHbEIsUUFBQUEsR0FBRyxDQUFDRixPQUFKLENBQVlzRSxPQUFaLENBQW9CcEUsR0FBRyxDQUFDa0IsV0FBeEI7QUFDQWxCLFFBQUFBLEdBQUcsQ0FBQ2tCLFdBQUosQ0FBZ0I0QixTQUFoQixDQUEwQkMsR0FBMUIsQ0FBOEIsUUFBOUI7QUFDSDtBQUNKO0FBQ0osR0FiRCxDQWpRc0MsQ0FnUnRDOzs7QUFDQSxNQUFJTCxLQUFLLEdBQUcsU0FBUkEsS0FBUSxHQUFXO0FBQ25CLFFBQUsxQyxHQUFHLENBQUM4QixVQUFULEVBQXNCO0FBQ2xCRSxNQUFBQSxPQUFPOztBQUVQaEMsTUFBQUEsR0FBRyxDQUFDOEIsVUFBSixDQUFldUMsSUFBZixDQUFvQnJFLEdBQUcsQ0FBQ0YsT0FBeEI7QUFDSDtBQUNKLEdBTkQsQ0FqUnNDLENBeVJ0Qzs7O0FBQ0EsTUFBSW1FLEtBQUssR0FBRyxTQUFSQSxLQUFRLEdBQVc7QUFDbkIsUUFBS2pFLEdBQUcsQ0FBQzhCLFVBQVQsRUFBc0I7QUFDbEJFLE1BQUFBLE9BQU87O0FBRVBoQyxNQUFBQSxHQUFHLENBQUM4QixVQUFKLENBQWV3QyxJQUFmLENBQW9CdEUsR0FBRyxDQUFDRixPQUF4QjtBQUNIO0FBQ0osR0FORCxDQTFSc0MsQ0FrU3RDOzs7QUFDQSxNQUFJK0IsVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBUzBDLElBQVQsRUFBZTtBQUM1QixRQUFLdkUsR0FBRyxDQUFDRixPQUFKLENBQVkwRSxZQUFaLENBQXlCLG9CQUFvQkQsSUFBN0MsTUFBdUQsSUFBNUQsRUFBbUU7QUFDL0QsVUFBSUUsSUFBSSxHQUFHekUsR0FBRyxDQUFDRixPQUFKLENBQVk0RSxZQUFaLENBQXlCLG9CQUFvQkgsSUFBN0MsQ0FBWDtBQUNBLFVBQUlsQixLQUFLLEdBQUc1QyxNQUFNLENBQUNrRSxrQkFBUCxDQUEwQkYsSUFBMUIsQ0FBWjs7QUFFQSxVQUFLcEIsS0FBSyxLQUFLLElBQVYsSUFBa0J1QixNQUFNLENBQUN2QixLQUFELENBQU4sS0FBa0IsTUFBekMsRUFBa0Q7QUFDOUNBLFFBQUFBLEtBQUssR0FBRyxJQUFSO0FBQ0gsT0FGRCxNQUVPLElBQUtBLEtBQUssS0FBSyxJQUFWLElBQWtCdUIsTUFBTSxDQUFDdkIsS0FBRCxDQUFOLEtBQWtCLE9BQXpDLEVBQW1EO0FBQ3REQSxRQUFBQSxLQUFLLEdBQUcsS0FBUjtBQUNIOztBQUVELGFBQU9BLEtBQVA7QUFDSCxLQVhELE1BV087QUFDSCxVQUFJd0IsVUFBVSxHQUFHcEUsTUFBTSxDQUFDcUUsWUFBUCxDQUFvQlAsSUFBcEIsQ0FBakI7O0FBRUEsVUFBS3ZFLEdBQUcsQ0FBQ0QsT0FBSixDQUFZOEUsVUFBWixDQUFMLEVBQStCO0FBQzNCLGVBQU9wRSxNQUFNLENBQUNrRSxrQkFBUCxDQUEwQjNFLEdBQUcsQ0FBQ0QsT0FBSixDQUFZOEUsVUFBWixDQUExQixDQUFQO0FBQ0gsT0FGRCxNQUVPO0FBQ0gsZUFBTyxJQUFQO0FBQ0g7QUFDSjtBQUNKLEdBckJELENBblNzQyxDQTBUdEM7OztBQUNBLE1BQUk1RCxXQUFXLEdBQUcsU0FBZEEsV0FBYyxDQUFTc0QsSUFBVCxFQUFlO0FBQzdCLFdBQU92RSxHQUFHLENBQUNGLE9BQUosQ0FBWWlGLGFBQVosQ0FBMEIsOEJBQThCUixJQUE5QixHQUFxQyxJQUEvRCxDQUFQO0FBQ0gsR0FGRCxDQTNUc0MsQ0ErVHRDOzs7QUFDQSxNQUFJSixzQkFBc0IsR0FBRyxTQUF6QkEsc0JBQXlCLEdBQVc7QUFDcEMsUUFBSTdELFVBQVUsR0FBR3VCLFVBQVUsQ0FBQyxZQUFELENBQTNCOztBQUNBLFFBQUltRCxLQUFLLEdBQUd2RSxNQUFNLENBQUN3RSxXQUFQLEdBQXFCRCxLQUFqQzs7QUFFQSxRQUFJLENBQUMxRSxVQUFMLEVBQWlCO0FBQ2IsYUFBTyxJQUFQO0FBQ0g7O0FBRUQsUUFBSTRFLFVBQVUsR0FBR3pFLE1BQU0sQ0FBQzBFLGFBQVAsQ0FBcUI3RSxVQUFyQixDQUFqQjs7QUFFQSxRQUFJLENBQUM0RSxVQUFMLEVBQWtCO0FBQ2RBLE1BQUFBLFVBQVUsR0FBR3RCLFFBQVEsQ0FBQ3RELFVBQUQsQ0FBckI7QUFDSDs7QUFFRCxRQUFJMEUsS0FBSyxHQUFHRSxVQUFaLEVBQXdCO0FBQ3BCLGFBQU8sSUFBUDtBQUNILEtBRkQsTUFFTztBQUNILGFBQU8sS0FBUDtBQUNIO0FBQ0osR0FuQkQ7O0FBcUJBLE1BQUlFLFFBQVEsR0FBRyxTQUFYQSxRQUFXLEdBQVc7QUFDdEIzRSxJQUFBQSxNQUFNLENBQUNDLElBQVAsQ0FBWVYsR0FBRyxDQUFDRixPQUFoQixFQUF5QmtELE1BQXpCLENBQWdDLFFBQWhDO0FBQ0gsR0FGRCxDQXJWc0MsQ0F5VnRDOzs7QUFDQXhDLEVBQUFBLFVBQVUsR0ExVjRCLENBNFZ0QztBQUNBO0FBQ0E7QUFFQTs7O0FBQ0FSLEVBQUFBLEdBQUcsQ0FBQ3FFLElBQUosR0FBVyxZQUFXO0FBQ2xCLFdBQU8zQixLQUFLLEVBQVo7QUFDSCxHQUZEOztBQUlBMUMsRUFBQUEsR0FBRyxDQUFDc0UsSUFBSixHQUFXLFlBQVc7QUFDbEIsV0FBT0wsS0FBSyxFQUFaO0FBQ0gsR0FGRDs7QUFJQWpFLEVBQUFBLEdBQUcsQ0FBQ3FGLE1BQUosR0FBYSxZQUFXO0FBQ3BCLFdBQU9yRCxPQUFPLEVBQWQ7QUFDSCxHQUZEOztBQUlBaEMsRUFBQUEsR0FBRyxDQUFDc0YsTUFBSixHQUFhLFlBQVc7QUFDcEIsV0FBTy9DLE9BQU8sRUFBZDtBQUNILEdBRkQ7O0FBSUF2QyxFQUFBQSxHQUFHLENBQUN1RixRQUFKLEdBQWUsWUFBVztBQUN0QixXQUFPdkIsU0FBUyxFQUFoQjtBQUNILEdBRkQ7O0FBSUFoRSxFQUFBQSxHQUFHLENBQUN3RixLQUFKLEdBQVksWUFBVztBQUNuQixXQUFPL0MsTUFBTSxFQUFiO0FBQ0gsR0FGRDs7QUFJQXpDLEVBQUFBLEdBQUcsQ0FBQ3lGLFlBQUosR0FBbUIsWUFBVztBQUMxQixXQUFPekYsR0FBRyxDQUFDZSxVQUFYO0FBQ0gsR0FGRDs7QUFJQWYsRUFBQUEsR0FBRyxDQUFDMEYsUUFBSixHQUFlLFlBQVc7QUFDdEIsV0FBTzFGLEdBQUcsQ0FBQ21CLFlBQUosQ0FBaUJrQyxLQUF4QjtBQUNILEdBRkQ7O0FBSUFyRCxFQUFBQSxHQUFHLENBQUMyRixPQUFKLEdBQWMsWUFBVztBQUNyQixXQUFPM0YsR0FBRyxDQUFDOEIsVUFBWDtBQUNILEdBRkQ7O0FBSUE5QixFQUFBQSxHQUFHLENBQUM0RixjQUFKLEdBQXFCLFlBQVc7QUFDNUIsV0FBTzVGLEdBQUcsQ0FBQ2tCLFdBQVg7QUFDSCxHQUZEOztBQUlBbEIsRUFBQUEsR0FBRyxDQUFDNkYsZUFBSixHQUFzQixZQUFXO0FBQzdCLFdBQU83RixHQUFHLENBQUNtQixZQUFYO0FBQ0gsR0FGRDs7QUFJQW5CLEVBQUFBLEdBQUcsQ0FBQzhGLGlCQUFKLEdBQXdCLFlBQVc7QUFDL0IsV0FBTzlGLEdBQUcsQ0FBQ2dCLGNBQVg7QUFDSCxHQUZEOztBQUlBaEIsRUFBQUEsR0FBRyxDQUFDK0YsVUFBSixHQUFpQixZQUFXO0FBQ3hCLFdBQU8vRixHQUFHLENBQUNGLE9BQVg7QUFDSCxHQUZEOztBQUlBRSxFQUFBQSxHQUFHLENBQUNnRyxPQUFKLEdBQWMsWUFBVztBQUNyQixXQUFPWixRQUFRLEVBQWY7QUFDSCxHQUZELENBclpzQyxDQXladEM7OztBQUNBcEYsRUFBQUEsR0FBRyxDQUFDMkMsRUFBSixHQUFTLFVBQVM0QixJQUFULEVBQWUwQixPQUFmLEVBQXdCO0FBQzdCLFdBQU9uQyxjQUFjLENBQUNuQixFQUFmLENBQWtCM0MsR0FBRyxDQUFDRixPQUF0QixFQUErQnlFLElBQS9CLEVBQXFDMEIsT0FBckMsQ0FBUDtBQUNILEdBRkQ7O0FBSUFqRyxFQUFBQSxHQUFHLENBQUNrRyxHQUFKLEdBQVUsVUFBUzNCLElBQVQsRUFBZTBCLE9BQWYsRUFBd0I7QUFDOUIsV0FBT25DLGNBQWMsQ0FBQ29DLEdBQWYsQ0FBbUJsRyxHQUFHLENBQUNGLE9BQXZCLEVBQWdDeUUsSUFBaEMsRUFBc0MwQixPQUF0QyxDQUFQO0FBQ0gsR0FGRDs7QUFJQWpHLEVBQUFBLEdBQUcsQ0FBQ21HLEdBQUosR0FBVSxVQUFTNUIsSUFBVCxFQUFlO0FBQ3JCLFdBQU9ULGNBQWMsQ0FBQ3FDLEdBQWYsQ0FBbUJuRyxHQUFHLENBQUNGLE9BQXZCLEVBQWdDeUUsSUFBaEMsQ0FBUDtBQUNILEdBRkQ7QUFHSCxDQXJhRCxDLENBdWFBOzs7QUFDQTFFLFFBQVEsQ0FBQ3VHLFdBQVQsR0FBdUIsVUFBU3RHLE9BQVQsRUFBa0I7QUFDckMsTUFBS0EsT0FBTyxLQUFLLElBQVosSUFBb0JXLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZWixPQUFaLEVBQXFCYSxHQUFyQixDQUF5QixRQUF6QixDQUF6QixFQUE4RDtBQUMxRCxXQUFPRixNQUFNLENBQUNDLElBQVAsQ0FBWVosT0FBWixFQUFxQmMsR0FBckIsQ0FBeUIsUUFBekIsQ0FBUDtBQUNILEdBRkQsTUFFTztBQUNILFdBQU8sSUFBUDtBQUNIO0FBQ0osQ0FORCxDLENBUUE7OztBQUNBLElBQUksU0FBaUMsT0FBT3lGLE1BQU0sQ0FBQ0MsT0FBZCxLQUEwQixXQUEvRCxFQUE0RTtBQUN4RUQsRUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCekcsUUFBakI7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy90aGVtZS9qcy9jb21wb25lbnRzL3NlYXJjaC5qcz9jYWIzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vLyBDbGFzcyBkZWZpbml0aW9uXG52YXIgS1RTZWFyY2ggPSBmdW5jdGlvbihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vICoqIFByaXZhdGUgdmFyaWFibGVzICAqKiAvL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICB2YXIgdGhlID0gdGhpcztcblxuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRGVmYXVsdCBPcHRpb25zXG4gICAgdmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgICBtaW5MZW5ndGg6IDIsICAvLyBNaW5pYW0gdGV4dCBsZW5naHQgdG8gcXVlcnkgc2VhcmNoXG4gICAgICAgIGtleXByZXNzOiB0cnVlLCAgLy8gRW5hYmxlIHNlYXJjaCBvbiBrZXlwcmVzcyBcbiAgICAgICAgZW50ZXI6IHRydWUsICAvLyBFbmFibGUgc2VhcmNoIG9uIGVudGVyIGtleSBwcmVzc1xuICAgICAgICBsYXlvdXQ6ICdtZW51JywgIC8vIFVzZSAnbWVudScgb3IgJ2lubGluZScgbGF5b3V0IG9wdGlvbnMgdG8gZGlzcGxheSBzZWFyY2ggcmVzdWx0c1xuICAgICAgICByZXNwb25zaXZlOiBudWxsLCAvLyBQYXNzIGludGVnZXIgdmFsdWUgb3IgYm9vdHN0cmFwIGNvbXBhdGlibGUgYnJlYWtwb2ludCBrZXkoc20sbWQsbGcseGwseHhsKSB0byBlbmFibGUgcmVwb25zaXZlIGZvcm0gbW9kZSBmb3IgZGV2aWNlIHdpZHRoIGJlbG93IHRoZSBicmVha3BvaW50IHZhbHVlXG4gICAgICAgIHNob3dPbkZvY3VzOiB0cnVlIC8vIEFsd2F5cyBzaG93IG1lbnUgb24gaW5wdXQgZm9jdXNcbiAgICB9O1xuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vICoqIFByaXZhdGUgbWV0aG9kcyAgKiogLy9cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAvLyBDb25zdHJ1Y3RcbiAgICB2YXIgX2NvbnN0cnVjdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIEtUVXRpbC5kYXRhKGVsZW1lbnQpLmhhcygnc2VhcmNoJykgPT09IHRydWUgKSB7XG4gICAgICAgICAgICB0aGUgPSBLVFV0aWwuZGF0YShlbGVtZW50KS5nZXQoJ3NlYXJjaCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX2luaXQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEluaXRcbiAgICB2YXIgX2luaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVmFyaWFibGVzXG4gICAgICAgIHRoZS5vcHRpb25zID0gS1RVdGlsLmRlZXBFeHRlbmQoe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgdGhlLnByb2Nlc3NpbmcgPSBmYWxzZTtcblxuICAgICAgICAvLyBFbGVtZW50c1xuICAgICAgICB0aGUuZWxlbWVudCA9IGVsZW1lbnQ7ICAgICAgICAgICAgICAgXG4gICAgICAgIHRoZS5jb250ZW50RWxlbWVudCA9IF9nZXRFbGVtZW50KCdjb250ZW50Jyk7ICAgICBcbiAgICAgICAgdGhlLmZvcm1FbGVtZW50ID0gX2dldEVsZW1lbnQoJ2Zvcm0nKTsgICAgICAgICBcbiAgICAgICAgdGhlLmlucHV0RWxlbWVudCA9IF9nZXRFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICB0aGUuc3Bpbm5lckVsZW1lbnQgPSBfZ2V0RWxlbWVudCgnc3Bpbm5lcicpO1xuICAgICAgICB0aGUuY2xlYXJFbGVtZW50ID0gX2dldEVsZW1lbnQoJ2NsZWFyJyk7XG4gICAgICAgIHRoZS50b2dnbGVFbGVtZW50ID0gX2dldEVsZW1lbnQoJ3RvZ2dsZScpOyAgIFxuICAgICAgICB0aGUuc3VibWl0RWxlbWVudCA9IF9nZXRFbGVtZW50KCdzdWJtaXQnKTtcbiAgICAgICAgdGhlLnRvb2xiYXJFbGVtZW50ID0gX2dldEVsZW1lbnQoJ3Rvb2xiYXInKTsgICBcblxuICAgICAgICB0aGUucmVzdWx0c0VsZW1lbnQgPSBfZ2V0RWxlbWVudCgncmVzdWx0cycpO1xuICAgICAgICB0aGUuc3VnZ2VzdGlvbkVsZW1lbnQgPSBfZ2V0RWxlbWVudCgnc3VnZ2VzdGlvbicpOyBcbiAgICAgICAgdGhlLmVtcHR5RWxlbWVudCA9IF9nZXRFbGVtZW50KCdlbXB0eScpOyBcblxuICAgICAgICAvLyBTZXQgaW5pdGlhbGl6ZWRcbiAgICAgICAgdGhlLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWt0LXNlYXJjaCcsICd0cnVlJyk7XG4gICAgICAgIFxuICAgICAgICAvLyBMYXlvdXRcbiAgICAgICAgdGhlLmxheW91dCA9IF9nZXRPcHRpb24oJ2xheW91dCcpO1xuICAgICAgICBcbiAgICAgICAgLy8gTWVudVxuICAgICAgICBpZiAoIHRoZS5sYXlvdXQgPT09ICdtZW51JyApIHtcbiAgICAgICAgICAgIHRoZS5tZW51T2JqZWN0ID0gbmV3IEtUTWVudSh0aGUuY29udGVudEVsZW1lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhlLm1lbnVPYmplY3QgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlXG4gICAgICAgIF91cGRhdGUoKTtcblxuICAgICAgICAvLyBFdmVudCBIYW5kbGVyc1xuICAgICAgICBfaGFuZGxlcnMoKTtcblxuICAgICAgICAvLyBCaW5kIEluc3RhbmNlXG4gICAgICAgIEtUVXRpbC5kYXRhKHRoZS5lbGVtZW50KS5zZXQoJ3NlYXJjaCcsIHRoZSk7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlcmFcbiAgICB2YXIgX2hhbmRsZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIEZvY3VzXG4gICAgICAgIHRoZS5pbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBfZm9jdXMpO1xuXG4gICAgICAgIC8vIEJsdXJcbiAgICAgICAgdGhlLmlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgX2JsdXIpO1xuXG4gICAgICAgIC8vIEtleXByZXNzXG4gICAgICAgIGlmICggX2dldE9wdGlvbigna2V5cHJlc3MnKSA9PT0gdHJ1ZSApIHtcbiAgICAgICAgICAgIHRoZS5pbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBfaW5wdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3VibWl0XG4gICAgICAgIGlmICggdGhlLnN1Ym1pdEVsZW1lbnQgKSB7XG4gICAgICAgICAgICB0aGUuc3VibWl0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF9zZWFyY2gpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRW50ZXJcbiAgICAgICAgaWYgKCBfZ2V0T3B0aW9uKCdlbnRlcicpID09PSB0cnVlICkge1xuICAgICAgICAgICAgdGhlLmlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIF9lbnRlcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDbGVhciBcbiAgICAgICAgaWYgKCB0aGUuY2xlYXJFbGVtZW50ICkge1xuICAgICAgICAgICAgdGhlLmNsZWFyRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF9jbGVhcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNZW51XG4gICAgICAgIGlmICggdGhlLm1lbnVPYmplY3QgKSB7XG4gICAgICAgICAgICAvLyBUb2dnbGUgbWVudVxuICAgICAgICAgICAgaWYgKCB0aGUudG9nZ2xlRWxlbWVudCApIHtcbiAgICAgICAgICAgICAgICB0aGUudG9nZ2xlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF9zaG93KTtcblxuICAgICAgICAgICAgICAgIHRoZS5tZW51T2JqZWN0Lm9uKCdrdC5tZW51LmRyb3Bkb3duLnNob3cnLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChLVFV0aWwudmlzaWJsZSh0aGUudG9nZ2xlRWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoZS50b2dnbGVFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhlLnRvZ2dsZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnc2hvdycpO1xuICAgICAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgICAgIH0pO1xuICAgIFxuICAgICAgICAgICAgICAgIHRoZS5tZW51T2JqZWN0Lm9uKCdrdC5tZW51LmRyb3Bkb3duLmhpZGUnLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChLVFV0aWwudmlzaWJsZSh0aGUudG9nZ2xlRWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoZS50b2dnbGVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhlLnRvZ2dsZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9ICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIHRoZS5tZW51T2JqZWN0Lm9uKCdrdC5tZW51LmRyb3Bkb3duLnNob3duJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhlLmlucHV0RWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gXG5cbiAgICAgICAgLy8gV2luZG93IHJlc2l6ZSBoYW5kbGluZ1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGltZXI7XG5cbiAgICAgICAgICAgIEtUVXRpbC50aHJvdHRsZSh0aW1lciwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX3VwZGF0ZSgpO1xuICAgICAgICAgICAgfSwgMjAwKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gRm9jdXNcbiAgICB2YXIgX2ZvY3VzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoZS5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2ZvY3VzJyk7XG5cbiAgICAgICAgaWYgKCBfZ2V0T3B0aW9uKCdzaG93LW9uLWZvY3VzJykgPT09IHRydWUgfHwgdGhlLmlucHV0RWxlbWVudC52YWx1ZS5sZW5ndGggPj0gbWluTGVuZ3RoICkge1xuICAgICAgICAgICAgX3Nob3coKTtcbiAgICAgICAgfSAgICAgICAgXG4gICAgfVxuXG4gICAgLy8gQmx1clxuICAgIHZhciBfYmx1ciA9IGZ1bmN0aW9uKCkgeyAgICAgICAgXG4gICAgICAgIHRoZS5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2ZvY3VzJyk7XG4gICAgfVxuXG4gICAgLy8gRW50ZXIgXG4gICAgdmFyIF9lbnRlciA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIGtleSA9IGUuY2hhckNvZGUgfHwgZS5rZXlDb2RlIHx8IDA7XG5cbiAgICAgICAgaWYgKGtleSA9PSAxMykge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICBfc2VhcmNoKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJbnB1dFxuICAgIHZhciBfaW5wdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCBfZ2V0T3B0aW9uKCdtaW4tbGVuZ3RoJykgKSAge1xuICAgICAgICAgICAgdmFyIG1pbkxlbmd0aCA9IHBhcnNlSW50KF9nZXRPcHRpb24oJ21pbi1sZW5ndGgnKSk7XG5cbiAgICAgICAgICAgIGlmICggdGhlLmlucHV0RWxlbWVudC52YWx1ZS5sZW5ndGggPj0gbWluTGVuZ3RoICkge1xuICAgICAgICAgICAgICAgIF9zZWFyY2goKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHRoZS5pbnB1dEVsZW1lbnQudmFsdWUubGVuZ3RoID09PSAwICkge1xuICAgICAgICAgICAgICAgIF9jbGVhcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2VhcmNoXG4gICAgdmFyIF9zZWFyY2ggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoZS5wcm9jZXNzaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgLy8gU2hvdyBzZWFyY2ggc3Bpbm5lclxuICAgICAgICAgICAgaWYgKHRoZS5zcGlubmVyRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHRoZS5zcGlubmVyRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiZC1ub25lXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBIaWRlIHNlYXJjaCBjbGVhciBidXR0b25cbiAgICAgICAgICAgIGlmICh0aGUuY2xlYXJFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdGhlLmNsZWFyRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZC1ub25lXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBIaWRlIHNlYXJjaCB0b29sYmFyXG4gICAgICAgICAgICBpZiAodGhlLnRvb2xiYXJFbGVtZW50ICYmIHRoZS5mb3JtRWxlbWVudC5jb250YWlucyh0aGUudG9vbGJhckVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgdGhlLnRvb2xiYXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJkLW5vbmVcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZvY3VzIGlucHV0XG4gICAgICAgICAgICB0aGUuaW5wdXRFbGVtZW50LmZvY3VzKCk7XG5cbiAgICAgICAgICAgIHRoZS5wcm9jZXNzaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIEtURXZlbnRIYW5kbGVyLnRyaWdnZXIodGhlLmVsZW1lbnQsICdrdC5zZWFyY2gucHJvY2VzcycsIHRoZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDb21wbGV0ZVxuICAgIHZhciBfY29tcGxldGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoZS5zcGlubmVyRWxlbWVudCkge1xuICAgICAgICAgICAgdGhlLnNwaW5uZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJkLW5vbmVcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTaG93IHNlYXJjaCB0b29sYmFyXG4gICAgICAgIGlmICh0aGUuY2xlYXJFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGUuY2xlYXJFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJkLW5vbmVcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHRoZS5pbnB1dEVsZW1lbnQudmFsdWUubGVuZ3RoID09PSAwICkge1xuICAgICAgICAgICAgX2NsZWFyKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGb2N1cyBpbnB1dFxuICAgICAgICB0aGUuaW5wdXRFbGVtZW50LmZvY3VzKCk7XG5cbiAgICAgICAgX3Nob3coKTtcblxuICAgICAgICB0aGUucHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIENsZWFyXG4gICAgdmFyIF9jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIEtURXZlbnRIYW5kbGVyLnRyaWdnZXIodGhlLmVsZW1lbnQsICdrdC5zZWFyY2guY2xlYXInLCB0aGUpID09PSBmYWxzZSApICB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDbGVhciBhbmQgZm9jdXMgaW5wdXRcbiAgICAgICAgdGhlLmlucHV0RWxlbWVudC52YWx1ZSA9IFwiXCI7XG4gICAgICAgIHRoZS5pbnB1dEVsZW1lbnQuZm9jdXMoKTtcblxuICAgICAgICAvLyBIaWRlIGNsZWFyIGljb25cbiAgICAgICAgaWYgKHRoZS5jbGVhckVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoZS5jbGVhckVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImQtbm9uZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNob3cgc2VhcmNoIHRvb2xiYXJcbiAgICAgICAgaWYgKHRoZS50b29sYmFyRWxlbWVudCAmJiB0aGUuZm9ybUVsZW1lbnQuY29udGFpbnModGhlLnRvb2xiYXJFbGVtZW50KSkge1xuICAgICAgICAgICAgdGhlLnRvb2xiYXJFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJkLW5vbmVcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIaWRlIG1lbnVcbiAgICAgICAgaWYgKCBfZ2V0T3B0aW9uKCdzaG93LW9uLWZvY3VzJykgPT09IGZhbHNlICkge1xuICAgICAgICAgICAgX2hpZGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIEtURXZlbnRIYW5kbGVyLnRyaWdnZXIodGhlLmVsZW1lbnQsICdrdC5zZWFyY2guY2xlYXJlZCcsIHRoZSk7XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlXG4gICAgdmFyIF91cGRhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gSGFuZGxlIHJlc3BvbnNpdmUgZm9ybVxuICAgICAgICBpZiAodGhlLmxheW91dCA9PT0gJ21lbnUnKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2l2ZUZvcm1Nb2RlID0gX2dldFJlc3BvbnNpdmVGb3JtTW9kZSgpO1xuXG4gICAgICAgICAgICBpZiAoIHJlc3BvbnNpdmVGb3JtTW9kZSA9PT0gJ29uJyAmJiB0aGUuY29udGVudEVsZW1lbnQuY29udGFpbnModGhlLmZvcm1FbGVtZW50KSA9PT0gZmFsc2UgKSB7XG4gICAgICAgICAgICAgICAgdGhlLmNvbnRlbnRFbGVtZW50LnByZXBlbmQodGhlLmZvcm1FbGVtZW50KTtcbiAgICAgICAgICAgICAgICB0aGUuZm9ybUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnZC1ub25lJyk7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSBlbHNlIGlmICggcmVzcG9uc2l2ZUZvcm1Nb2RlID09PSAnb2ZmJyAmJiB0aGUuY29udGVudEVsZW1lbnQuY29udGFpbnModGhlLmZvcm1FbGVtZW50KSA9PT0gdHJ1ZSApIHtcbiAgICAgICAgICAgICAgICB0aGUuZWxlbWVudC5wcmVwZW5kKHRoZS5mb3JtRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgdGhlLmZvcm1FbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2Qtbm9uZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2hvdyBtZW51XG4gICAgdmFyIF9zaG93ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICggdGhlLm1lbnVPYmplY3QgKSB7XG4gICAgICAgICAgICBfdXBkYXRlKCk7XG5cbiAgICAgICAgICAgIHRoZS5tZW51T2JqZWN0LnNob3codGhlLmVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGlkZSBtZW51XG4gICAgdmFyIF9oaWRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICggdGhlLm1lbnVPYmplY3QgKSB7XG4gICAgICAgICAgICBfdXBkYXRlKCk7XG5cbiAgICAgICAgICAgIHRoZS5tZW51T2JqZWN0LmhpZGUodGhlLmVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gR2V0IG9wdGlvblxuICAgIHZhciBfZ2V0T3B0aW9uID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgICBpZiAoIHRoZS5lbGVtZW50Lmhhc0F0dHJpYnV0ZSgnZGF0YS1rdC1zZWFyY2gtJyArIG5hbWUpID09PSB0cnVlICkge1xuICAgICAgICAgICAgdmFyIGF0dHIgPSB0aGUuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEta3Qtc2VhcmNoLScgKyBuYW1lKTtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IEtUVXRpbC5nZXRSZXNwb25zaXZlVmFsdWUoYXR0cik7XG5cbiAgICAgICAgICAgIGlmICggdmFsdWUgIT09IG51bGwgJiYgU3RyaW5nKHZhbHVlKSA9PT0gJ3RydWUnICkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHZhbHVlICE9PSBudWxsICYmIFN0cmluZyh2YWx1ZSkgPT09ICdmYWxzZScgKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIG9wdGlvbk5hbWUgPSBLVFV0aWwuc25ha2VUb0NhbWVsKG5hbWUpO1xuXG4gICAgICAgICAgICBpZiAoIHRoZS5vcHRpb25zW29wdGlvbk5hbWVdICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBLVFV0aWwuZ2V0UmVzcG9uc2l2ZVZhbHVlKHRoZS5vcHRpb25zW29wdGlvbk5hbWVdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBHZXQgZWxlbWVudFxuICAgIHZhciBfZ2V0RWxlbWVudCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoZS5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWt0LXNlYXJjaC1lbGVtZW50PVwiJyArIG5hbWUgKyAnXCJdJyk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgcmVzcG9uc2l2ZSBmb3JtIG1vZGUgaXMgZW5hYmxlZFxuICAgIHZhciBfZ2V0UmVzcG9uc2l2ZUZvcm1Nb2RlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZXNwb25zaXZlID0gX2dldE9wdGlvbigncmVzcG9uc2l2ZScpO1xuICAgICAgICB2YXIgd2lkdGggPSBLVFV0aWwuZ2V0Vmlld1BvcnQoKS53aWR0aDtcblxuICAgICAgICBpZiAoIXJlc3BvbnNpdmUpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGJyZWFrcG9pbnQgPSBLVFV0aWwuZ2V0QnJlYWtwb2ludChyZXNwb25zaXZlKTtcblxuICAgICAgICBpZiAoIWJyZWFrcG9pbnQgKSB7XG4gICAgICAgICAgICBicmVha3BvaW50ID0gcGFyc2VJbnQocmVzcG9uc2l2ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod2lkdGggPCBicmVha3BvaW50KSB7XG4gICAgICAgICAgICByZXR1cm4gXCJvblwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFwib2ZmXCI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgX2Rlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgS1RVdGlsLmRhdGEodGhlLmVsZW1lbnQpLnJlbW92ZSgnc2VhcmNoJyk7XG4gICAgfSAgICBcblxuICAgIC8vIENvbnN0cnVjdCBjbGFzc1xuICAgIF9jb25zdHJ1Y3QoKTtcblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gKiogUHVibGljIEFQSSAgKiogLy9cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgLy8gUGx1Z2luIEFQSVxuICAgIHRoZS5zaG93ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfc2hvdygpO1xuICAgIH1cblxuICAgIHRoZS5oaWRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfaGlkZSgpO1xuICAgIH1cblxuICAgIHRoZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF91cGRhdGUoKTtcbiAgICB9XG5cbiAgICB0aGUuc2VhcmNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfc2VhcmNoKCk7XG4gICAgfVxuXG4gICAgdGhlLmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfY29tcGxldGUoKTtcbiAgICB9XG5cbiAgICB0aGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9jbGVhcigpO1xuICAgIH1cblxuICAgIHRoZS5pc1Byb2Nlc3NpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoZS5wcm9jZXNzaW5nO1xuICAgIH1cblxuICAgIHRoZS5nZXRRdWVyeSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhlLmlucHV0RWxlbWVudC52YWx1ZTtcbiAgICB9ICAgIFxuXG4gICAgdGhlLmdldE1lbnUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoZS5tZW51T2JqZWN0O1xuICAgIH1cblxuICAgIHRoZS5nZXRGb3JtRWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhlLmZvcm1FbGVtZW50O1xuICAgIH1cblxuICAgIHRoZS5nZXRJbnB1dEVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoZS5pbnB1dEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgdGhlLmdldENvbnRlbnRFbGVtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGUuY29udGVudEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgdGhlLmdldEVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoZS5lbGVtZW50O1xuICAgIH1cblxuICAgIHRoZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfZGVzdHJveSgpO1xuICAgIH1cblxuICAgIC8vIEV2ZW50IEFQSVxuICAgIHRoZS5vbiA9IGZ1bmN0aW9uKG5hbWUsIGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIEtURXZlbnRIYW5kbGVyLm9uKHRoZS5lbGVtZW50LCBuYW1lLCBoYW5kbGVyKTtcbiAgICB9XG5cbiAgICB0aGUub25lID0gZnVuY3Rpb24obmFtZSwgaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gS1RFdmVudEhhbmRsZXIub25lKHRoZS5lbGVtZW50LCBuYW1lLCBoYW5kbGVyKTtcbiAgICB9XG5cbiAgICB0aGUub2ZmID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgICByZXR1cm4gS1RFdmVudEhhbmRsZXIub2ZmKHRoZS5lbGVtZW50LCBuYW1lKTtcbiAgICB9XG59O1xuXG4vLyBTdGF0aWMgbWV0aG9kc1xuS1RTZWFyY2guZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgaWYgKCBlbGVtZW50ICE9PSBudWxsICYmIEtUVXRpbC5kYXRhKGVsZW1lbnQpLmhhcygnc2VhcmNoJykgKSB7XG4gICAgICAgIHJldHVybiBLVFV0aWwuZGF0YShlbGVtZW50KS5nZXQoJ3NlYXJjaCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuLy8gV2VicGFjayBzdXBwb3J0XG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gS1RTZWFyY2g7XG59XG4iXSwibmFtZXMiOlsiS1RTZWFyY2giLCJlbGVtZW50Iiwib3B0aW9ucyIsInRoZSIsImRlZmF1bHRPcHRpb25zIiwibWluTGVuZ3RoIiwia2V5cHJlc3MiLCJlbnRlciIsImxheW91dCIsInJlc3BvbnNpdmUiLCJzaG93T25Gb2N1cyIsIl9jb25zdHJ1Y3QiLCJLVFV0aWwiLCJkYXRhIiwiaGFzIiwiZ2V0IiwiX2luaXQiLCJkZWVwRXh0ZW5kIiwicHJvY2Vzc2luZyIsImNvbnRlbnRFbGVtZW50IiwiX2dldEVsZW1lbnQiLCJmb3JtRWxlbWVudCIsImlucHV0RWxlbWVudCIsInNwaW5uZXJFbGVtZW50IiwiY2xlYXJFbGVtZW50IiwidG9nZ2xlRWxlbWVudCIsInN1Ym1pdEVsZW1lbnQiLCJ0b29sYmFyRWxlbWVudCIsInJlc3VsdHNFbGVtZW50Iiwic3VnZ2VzdGlvbkVsZW1lbnQiLCJlbXB0eUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJfZ2V0T3B0aW9uIiwibWVudU9iamVjdCIsIktUTWVudSIsIl91cGRhdGUiLCJfaGFuZGxlcnMiLCJzZXQiLCJhZGRFdmVudExpc3RlbmVyIiwiX2ZvY3VzIiwiX2JsdXIiLCJfaW5wdXQiLCJfc2VhcmNoIiwiX2VudGVyIiwiX2NsZWFyIiwiX3Nob3ciLCJvbiIsIml0ZW0iLCJ2aXNpYmxlIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwiZm9jdXMiLCJ3aW5kb3ciLCJ0aW1lciIsInRocm90dGxlIiwidmFsdWUiLCJsZW5ndGgiLCJlIiwia2V5IiwiY2hhckNvZGUiLCJrZXlDb2RlIiwicHJldmVudERlZmF1bHQiLCJwYXJzZUludCIsImNvbnRhaW5zIiwiS1RFdmVudEhhbmRsZXIiLCJ0cmlnZ2VyIiwiX2NvbXBsZXRlIiwiX2hpZGUiLCJyZXNwb25zaXZlRm9ybU1vZGUiLCJfZ2V0UmVzcG9uc2l2ZUZvcm1Nb2RlIiwicHJlcGVuZCIsInNob3ciLCJoaWRlIiwibmFtZSIsImhhc0F0dHJpYnV0ZSIsImF0dHIiLCJnZXRBdHRyaWJ1dGUiLCJnZXRSZXNwb25zaXZlVmFsdWUiLCJTdHJpbmciLCJvcHRpb25OYW1lIiwic25ha2VUb0NhbWVsIiwicXVlcnlTZWxlY3RvciIsIndpZHRoIiwiZ2V0Vmlld1BvcnQiLCJicmVha3BvaW50IiwiZ2V0QnJlYWtwb2ludCIsIl9kZXN0cm95IiwidXBkYXRlIiwic2VhcmNoIiwiY29tcGxldGUiLCJjbGVhciIsImlzUHJvY2Vzc2luZyIsImdldFF1ZXJ5IiwiZ2V0TWVudSIsImdldEZvcm1FbGVtZW50IiwiZ2V0SW5wdXRFbGVtZW50IiwiZ2V0Q29udGVudEVsZW1lbnQiLCJnZXRFbGVtZW50IiwiZGVzdHJveSIsImhhbmRsZXIiLCJvbmUiLCJvZmYiLCJnZXRJbnN0YW5jZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/theme/js/components/search.js\n");

/***/ }),

/***/ "./resources/theme/js/components/stepper.js":
/*!**************************************************!*\
  !*** ./resources/theme/js/components/stepper.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";
eval(" // Class definition\n\nvar KTStepper = function KTStepper(element, options) {\n  //////////////////////////////\n  // ** Private variables  ** //\n  //////////////////////////////\n  var the = this;\n  var body = document.getElementsByTagName(\"BODY\")[0];\n\n  if (typeof element === \"undefined\" || element === null) {\n    return;\n  } // Default Options\n\n\n  var defaultOptions = {\n    startIndex: 1,\n    animation: false,\n    animationSpeed: '0.3s',\n    animationNextClass: 'animate__animated animate__slideInRight animate__fast',\n    animationPreviousClass: 'animate__animated animate__slideInLeft animate__fast'\n  }; ////////////////////////////\n  // ** Private methods  ** //\n  ////////////////////////////\n\n  var _construct = function _construct() {\n    if (KTUtil.data(element).has('stepper') === true) {\n      the = KTUtil.data(element).get('stepper');\n    } else {\n      _init();\n    }\n  };\n\n  var _init = function _init() {\n    the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    the.uid = KTUtil.getUniqueId('stepper');\n    the.element = element; // Set initialized\n\n    the.element.setAttribute('data-kt-stepper', 'true'); // Elements\n\n    the.steps = KTUtil.findAll(the.element, '[data-kt-stepper-element=\"nav\"]');\n    the.btnNext = KTUtil.find(the.element, '[data-kt-stepper-action=\"next\"]');\n    the.btnPrevious = KTUtil.find(the.element, '[data-kt-stepper-action=\"previous\"]');\n    the.btnSubmit = KTUtil.find(the.element, '[data-kt-stepper-action=\"submit\"]'); // Variables\n\n    the.totalStepsNumber = the.steps.length;\n    the.passedStepIndex = 0;\n    the.currentStepIndex = 1;\n    the.clickedStepIndex = 0; // Set Current Step\n\n    if (the.options.startIndex > 1) {\n      _goTo(the.options.startIndex);\n    } // Event Handlers\n\n\n    KTUtil.addEvent(the.btnNext, 'click', function (e) {\n      e.preventDefault();\n      KTEventHandler.trigger(the.element, 'kt.stepper.next', the);\n    });\n    KTUtil.addEvent(the.btnPrevious, 'click', function (e) {\n      e.preventDefault();\n      KTEventHandler.trigger(the.element, 'kt.stepper.previous', the);\n    });\n    KTUtil.on(the.element, '[data-kt-stepper-action=\"step\"]', 'click', function (e) {\n      e.preventDefault();\n\n      if (the.steps && the.steps.length > 0) {\n        for (var i = 0, len = the.steps.length; i < len; i++) {\n          if (the.steps[i] === this) {\n            the.clickedStepIndex = i + 1;\n            KTEventHandler.trigger(the.element, 'kt.stepper.click', the);\n            return;\n          }\n        }\n      }\n    }); // Bind Instance\n\n    KTUtil.data(the.element).set('stepper', the);\n  };\n\n  var _goTo = function _goTo(index) {\n    // Trigger \"change\" event\n    KTEventHandler.trigger(the.element, 'kt.stepper.change', the); // Skip if this step is already shown\n\n    if (index === the.currentStepIndex || index > the.totalStepsNumber || index < 0) {\n      return;\n    } // Validate step number\n\n\n    index = parseInt(index); // Set current step\n\n    the.passedStepIndex = the.currentStepIndex;\n    the.currentStepIndex = index; // Refresh elements\n\n    _refreshUI(); // Trigger \"changed\" event\n\n\n    KTEventHandler.trigger(the.element, 'kt.stepper.changed', the);\n    return the;\n  };\n\n  var _goNext = function _goNext() {\n    return _goTo(_getNextStepIndex());\n  };\n\n  var _goPrevious = function _goPrevious() {\n    return _goTo(_getPreviousStepIndex());\n  };\n\n  var _goLast = function _goLast() {\n    return _goTo(_getLastStepIndex());\n  };\n\n  var _goFirst = function _goFirst() {\n    return _goTo(_getFirstStepIndex());\n  };\n\n  var _refreshUI = function _refreshUI() {\n    var state = '';\n\n    if (_isLastStep()) {\n      state = 'last';\n    } else if (_isFirstStep()) {\n      state = 'first';\n    } else {\n      state = 'between';\n    } // Set state class\n\n\n    KTUtil.removeClass(the.element, 'last');\n    KTUtil.removeClass(the.element, 'first');\n    KTUtil.removeClass(the.element, 'between');\n    KTUtil.addClass(the.element, state); // Step Items\n\n    var elements = KTUtil.findAll(the.element, '[data-kt-stepper-element=\"nav\"], [data-kt-stepper-element=\"content\"], [data-kt-stepper-element=\"info\"]');\n\n    if (elements && elements.length > 0) {\n      for (var i = 0, len = elements.length; i < len; i++) {\n        var element = elements[i];\n        var index = KTUtil.index(element) + 1;\n        KTUtil.removeClass(element, 'current');\n        KTUtil.removeClass(element, 'completed');\n        KTUtil.removeClass(element, 'pending');\n\n        if (index == the.currentStepIndex) {\n          KTUtil.addClass(element, 'current');\n\n          if (the.options.animation !== false && element.getAttribute('data-kt-stepper-element') == 'content') {\n            KTUtil.css(element, 'animationDuration', the.options.animationSpeed);\n            var animation = _getStepDirection(the.passedStepIndex) === 'previous' ? the.options.animationPreviousClass : the.options.animationNextClass;\n            KTUtil.animateClass(element, animation);\n          }\n        } else {\n          if (index < the.currentStepIndex) {\n            KTUtil.addClass(element, 'completed');\n          } else {\n            KTUtil.addClass(element, 'pending');\n          }\n        }\n      }\n    }\n  };\n\n  var _isLastStep = function _isLastStep() {\n    return the.currentStepIndex === the.totalStepsNumber;\n  };\n\n  var _isFirstStep = function _isFirstStep() {\n    return the.currentStepIndex === 1;\n  };\n\n  var _isBetweenStep = function _isBetweenStep() {\n    return _isLastStep() === false && _isFirstStep() === false;\n  };\n\n  var _getNextStepIndex = function _getNextStepIndex() {\n    if (the.totalStepsNumber >= the.currentStepIndex + 1) {\n      return the.currentStepIndex + 1;\n    } else {\n      return the.totalStepsNumber;\n    }\n  };\n\n  var _getPreviousStepIndex = function _getPreviousStepIndex() {\n    if (the.currentStepIndex - 1 > 1) {\n      return the.currentStepIndex - 1;\n    } else {\n      return 1;\n    }\n  };\n\n  var _getFirstStepIndex = function _getFirstStepIndex() {\n    return 1;\n  };\n\n  var _getLastStepIndex = function _getLastStepIndex() {\n    return the.totalStepsNumber;\n  };\n\n  var _getTotalStepsNumber = function _getTotalStepsNumber() {\n    return the.totalStepsNumber;\n  };\n\n  var _getStepDirection = function _getStepDirection(index) {\n    if (index > the.currentStepIndex) {\n      return 'next';\n    } else {\n      return 'previous';\n    }\n  };\n\n  var _getStepContent = function _getStepContent(index) {\n    var content = KTUtil.findAll(the.element, '[data-kt-stepper-element=\"content\"]');\n\n    if (content[index - 1]) {\n      return content[index - 1];\n    } else {\n      return false;\n    }\n  };\n\n  var _destroy = function _destroy() {\n    KTUtil.data(the.element).remove('stepper');\n  }; // Construct Class\n\n\n  _construct(); ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n  // Plugin API\n\n\n  the.getElement = function (index) {\n    return the.element;\n  };\n\n  the.goTo = function (index) {\n    return _goTo(index);\n  };\n\n  the.goPrevious = function () {\n    return _goPrevious();\n  };\n\n  the.goNext = function () {\n    return _goNext();\n  };\n\n  the.goFirst = function () {\n    return _goFirst();\n  };\n\n  the.goLast = function () {\n    return _goLast();\n  };\n\n  the.getCurrentStepIndex = function () {\n    return the.currentStepIndex;\n  };\n\n  the.getNextStepIndex = function () {\n    return the.nextStepIndex;\n  };\n\n  the.getPassedStepIndex = function () {\n    return the.passedStepIndex;\n  };\n\n  the.getClickedStepIndex = function () {\n    return the.clickedStepIndex;\n  };\n\n  the.getPreviousStepIndex = function () {\n    return the.PreviousStepIndex;\n  };\n\n  the.destroy = function () {\n    return _destroy();\n  }; // Event API\n\n\n  the.on = function (name, handler) {\n    return KTEventHandler.on(the.element, name, handler);\n  };\n\n  the.one = function (name, handler) {\n    return KTEventHandler.one(the.element, name, handler);\n  };\n\n  the.off = function (name) {\n    return KTEventHandler.off(the.element, name);\n  };\n\n  the.trigger = function (name, event) {\n    return KTEventHandler.trigger(the.element, name, event, the, event);\n  };\n}; // Static methods\n\n\nKTStepper.getInstance = function (element) {\n  if (element !== null && KTUtil.data(element).has('stepper')) {\n    return KTUtil.data(element).get('stepper');\n  } else {\n    return null;\n  }\n}; // Webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTStepper;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/theme/js/components/stepper.js\n");

/***/ }),

/***/ "./resources/theme/js/components/sticky.js":
/*!*************************************************!*\
  !*** ./resources/theme/js/components/sticky.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval(" // Class definition\n\nvar KTSticky = function KTSticky(element, options) {\n  ////////////////////////////\n  // ** Private Variables  ** //\n  ////////////////////////////\n  var the = this;\n  var body = document.getElementsByTagName(\"BODY\")[0];\n\n  if (typeof element === \"undefined\" || element === null) {\n    return;\n  } // Default Options\n\n\n  var defaultOptions = {\n    offset: 200,\n    releaseOffset: 0,\n    reverse: false,\n    animation: true,\n    animationSpeed: '0.3s',\n    animationClass: 'animation-slide-in-down'\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var _construct = function _construct() {\n    if (KTUtil.data(element).has('sticky') === true) {\n      the = KTUtil.data(element).get('sticky');\n    } else {\n      _init();\n    }\n  };\n\n  var _init = function _init() {\n    the.element = element;\n    the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    the.uid = KTUtil.getUniqueId('sticky');\n    the.name = the.element.getAttribute('data-kt-sticky-name');\n    the.attributeName = 'data-kt-sticky-' + the.name;\n    the.eventTriggerState = true;\n    the.lastScrollTop = 0;\n    the.scrollHandler; // Set initialized\n\n    the.element.setAttribute('data-kt-sticky', 'true'); // Event Handlers\n\n    window.addEventListener('scroll', _scroll); // Initial Launch\n\n    _scroll(); // Bind Instance\n\n\n    KTUtil.data(the.element).set('sticky', the);\n  };\n\n  var _scroll = function _scroll(e) {\n    var offset = _getOption('offset');\n\n    var releaseOffset = _getOption('release-offset');\n\n    var reverse = _getOption('reverse');\n\n    var st;\n    var attrName;\n    var diff; // Exit if false\n\n    if (offset === false) {\n      return;\n    }\n\n    offset = parseInt(offset);\n    releaseOffset = releaseOffset ? parseInt(releaseOffset) : 0;\n    st = KTUtil.getScrollTop();\n    diff = document.documentElement.scrollHeight - window.innerHeight - KTUtil.getScrollTop();\n\n    if (reverse === true) {\n      // Release on reverse scroll mode\n      if (st > offset && (releaseOffset === 0 || releaseOffset < diff)) {\n        if (body.hasAttribute(the.attributeName) === false) {\n          _enable();\n\n          body.setAttribute(the.attributeName, 'on');\n        }\n\n        if (the.eventTriggerState === true) {\n          KTEventHandler.trigger(the.element, 'kt.sticky.on', the);\n          KTEventHandler.trigger(the.element, 'kt.sticky.change', the);\n          the.eventTriggerState = false;\n        }\n      } else {\n        // Back scroll mode\n        if (body.hasAttribute(the.attributeName) === true) {\n          _disable();\n\n          body.removeAttribute(the.attributeName);\n        }\n\n        if (the.eventTriggerState === false) {\n          KTEventHandler.trigger(the.element, 'kt.sticky.off', the);\n          KTEventHandler.trigger(the.element, 'kt.sticky.change', the);\n          the.eventTriggerState = true;\n        }\n      }\n\n      the.lastScrollTop = st;\n    } else {\n      // Classic scroll mode\n      if (st > offset && (releaseOffset === 0 || releaseOffset < diff)) {\n        if (body.hasAttribute(the.attributeName) === false) {\n          _enable();\n\n          body.setAttribute(the.attributeName, 'on');\n        }\n\n        if (the.eventTriggerState === true) {\n          KTEventHandler.trigger(the.element, 'kt.sticky.on', the);\n          KTEventHandler.trigger(the.element, 'kt.sticky.change', the);\n          the.eventTriggerState = false;\n        }\n      } else {\n        // back scroll mode\n        if (body.hasAttribute(the.attributeName) === true) {\n          _disable();\n\n          body.removeAttribute(the.attributeName);\n        }\n\n        if (the.eventTriggerState === false) {\n          KTEventHandler.trigger(the.element, 'kt.sticky.off', the);\n          KTEventHandler.trigger(the.element, 'kt.sticky.change', the);\n          the.eventTriggerState = true;\n        }\n      }\n    }\n\n    if (releaseOffset > 0) {\n      if (diff < releaseOffset) {\n        the.element.setAttribute('data-kt-sticky-released', 'true');\n      } else {\n        the.element.removeAttribute('data-kt-sticky-released');\n      }\n    }\n  };\n\n  var _enable = function _enable(update) {\n    var top = _getOption('top');\n\n    var left = _getOption('left');\n\n    var right = _getOption('right');\n\n    var width = _getOption('width');\n\n    var zindex = _getOption('zindex');\n\n    if (update !== true && _getOption('animation') === true) {\n      KTUtil.css(the.element, 'animationDuration', _getOption('animationSpeed'));\n      KTUtil.animateClass(the.element, 'animation ' + _getOption('animationClass'));\n    }\n\n    if (zindex !== null) {\n      KTUtil.css(the.element, 'z-index', zindex);\n      KTUtil.css(the.element, 'position', 'fixed');\n    }\n\n    if (top !== null) {\n      KTUtil.css(the.element, 'top', top);\n    }\n\n    if (width !== null) {\n      if (width['target']) {\n        var targetElement = document.querySelector(width['target']);\n\n        if (targetElement) {\n          width = KTUtil.css(targetElement, 'width');\n        }\n      }\n\n      KTUtil.css(the.element, 'width', width);\n    }\n\n    if (left !== null) {\n      if (String(left).toLowerCase() === 'auto') {\n        var offsetLeft = KTUtil.offset(the.element).left;\n\n        if (offsetLeft > 0) {\n          KTUtil.css(the.element, 'left', String(offsetLeft) + 'px');\n        }\n      }\n    }\n  };\n\n  var _disable = function _disable() {\n    KTUtil.css(the.element, 'top', '');\n    KTUtil.css(the.element, 'width', '');\n    KTUtil.css(the.element, 'left', '');\n    KTUtil.css(the.element, 'right', '');\n    KTUtil.css(the.element, 'z-index', '');\n    KTUtil.css(the.element, 'position', '');\n  };\n\n  var _getOption = function _getOption(name) {\n    if (the.element.hasAttribute('data-kt-sticky-' + name) === true) {\n      var attr = the.element.getAttribute('data-kt-sticky-' + name);\n      var value = KTUtil.getResponsiveValue(attr);\n\n      if (value !== null && String(value) === 'true') {\n        value = true;\n      } else if (value !== null && String(value) === 'false') {\n        value = false;\n      }\n\n      return value;\n    } else {\n      var optionName = KTUtil.snakeToCamel(name);\n\n      if (the.options[optionName]) {\n        return KTUtil.getResponsiveValue(the.options[optionName]);\n      } else {\n        return null;\n      }\n    }\n  };\n\n  var _destroy = function _destroy() {\n    window.removeEventListener('scroll', _scroll);\n    KTUtil.data(the.element).remove('sticky');\n  }; // Construct Class\n\n\n  _construct(); ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n  // Methods\n\n\n  the.update = function () {\n    if (body.hasAttribute(the.attributeName) === true) {\n      _disable();\n\n      body.removeAttribute(the.attributeName);\n\n      _enable(true);\n\n      body.setAttribute(the.attributeName, 'on');\n    }\n  };\n\n  the.destroy = function () {\n    return _destroy();\n  }; // Event API\n\n\n  the.on = function (name, handler) {\n    return KTEventHandler.on(the.element, name, handler);\n  };\n\n  the.one = function (name, handler) {\n    return KTEventHandler.one(the.element, name, handler);\n  };\n\n  the.off = function (name) {\n    return KTEventHandler.off(the.element, name);\n  };\n\n  the.trigger = function (name, event) {\n    return KTEventHandler.trigger(the.element, name, event, the, event);\n  };\n}; // Static methods\n\n\nKTSticky.getInstance = function (element) {\n  if (element !== null && KTUtil.data(element).has('sticky')) {\n    return KTUtil.data(element).get('sticky');\n  } else {\n    return null;\n  }\n}; // Create instances\n\n\nKTSticky.createInstances = function () {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-kt-sticky=\"true\"]';\n  var body = document.getElementsByTagName(\"BODY\")[0]; // Initialize Menus\n\n  var elements = body.querySelectorAll(selector);\n  var sticky;\n\n  if (elements && elements.length > 0) {\n    for (var i = 0, len = elements.length; i < len; i++) {\n      sticky = new KTSticky(elements[i]);\n    }\n  }\n}; // Window resize handler\n\n\nwindow.addEventListener('resize', function () {\n  var timer;\n  var body = document.getElementsByTagName(\"BODY\")[0];\n  KTUtil.throttle(timer, function () {\n    // Locate and update Offcanvas instances on window resize\n    var elements = body.querySelectorAll('[data-kt-sticky=\"true\"]');\n\n    if (elements && elements.length > 0) {\n      for (var i = 0, len = elements.length; i < len; i++) {\n        var sticky = KTSticky.getInstance(elements[i]);\n\n        if (sticky) {\n          sticky.update();\n        }\n      }\n    }\n  }, 200);\n}); // Global initialization\n\nKTSticky.init = function () {\n  KTSticky.createInstances();\n}; // On document ready\n\n\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', KTSticky.init);\n} else {\n  KTSticky.init();\n} // Webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTSticky;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/theme/js/components/sticky.js\n");

/***/ }),

/***/ "./resources/theme/js/components/swapper.js":
/*!**************************************************!*\
  !*** ./resources/theme/js/components/swapper.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";
eval(" // Class definition\n\nvar KTSwapper = function KTSwapper(element, options) {\n  ////////////////////////////\n  // ** Private Variables  ** //\n  ////////////////////////////\n  var the = this;\n\n  if (typeof element === \"undefined\" || element === null) {\n    return;\n  } // Default Options\n\n\n  var defaultOptions = {\n    mode: 'append'\n  }; ////////////////////////////\n  // ** Private Methods  ** //\n  ////////////////////////////\n\n  var _construct = function _construct() {\n    if (KTUtil.data(element).has('swapper') === true) {\n      the = KTUtil.data(element).get('swapper');\n    } else {\n      _init();\n    }\n  };\n\n  var _init = function _init() {\n    the.element = element;\n    the.options = KTUtil.deepExtend({}, defaultOptions, options); // Set initialized\n\n    the.element.setAttribute('data-kt-swapper', 'true'); // Initial update\n\n    _update(); // Bind Instance\n\n\n    KTUtil.data(the.element).set('swapper', the);\n  };\n\n  var _update = function _update(e) {\n    var parentSelector = _getOption('parent');\n\n    var mode = _getOption('mode');\n\n    var parentElement = parentSelector ? document.querySelector(parentSelector) : null;\n\n    if (parentElement && element.parentNode !== parentElement) {\n      if (mode === 'prepend') {\n        parentElement.prepend(element);\n      } else if (mode === 'append') {\n        parentElement.append(element);\n      }\n    }\n  };\n\n  var _getOption = function _getOption(name) {\n    if (the.element.hasAttribute('data-kt-swapper-' + name) === true) {\n      var attr = the.element.getAttribute('data-kt-swapper-' + name);\n      var value = KTUtil.getResponsiveValue(attr);\n\n      if (value !== null && String(value) === 'true') {\n        value = true;\n      } else if (value !== null && String(value) === 'false') {\n        value = false;\n      }\n\n      return value;\n    } else {\n      var optionName = KTUtil.snakeToCamel(name);\n\n      if (the.options[optionName]) {\n        return KTUtil.getResponsiveValue(the.options[optionName]);\n      } else {\n        return null;\n      }\n    }\n  };\n\n  var _destroy = function _destroy() {\n    KTUtil.data(the.element).remove('swapper');\n  }; // Construct Class\n\n\n  _construct(); ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n  // Methods\n\n\n  the.update = function () {\n    _update();\n  };\n\n  the.destroy = function () {\n    return _destroy();\n  }; // Event API\n\n\n  the.on = function (name, handler) {\n    return KTEventHandler.on(the.element, name, handler);\n  };\n\n  the.one = function (name, handler) {\n    return KTEventHandler.one(the.element, name, handler);\n  };\n\n  the.off = function (name) {\n    return KTEventHandler.off(the.element, name);\n  };\n\n  the.trigger = function (name, event) {\n    return KTEventHandler.trigger(the.element, name, event, the, event);\n  };\n}; // Static methods\n\n\nKTSwapper.getInstance = function (element) {\n  if (element !== null && KTUtil.data(element).has('swapper')) {\n    return KTUtil.data(element).get('swapper');\n  } else {\n    return null;\n  }\n}; // Create instances\n\n\nKTSwapper.createInstances = function () {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-kt-swapper=\"true\"]';\n  // Initialize Menus\n  var elements = document.querySelectorAll(selector);\n  var swapper;\n\n  if (elements && elements.length > 0) {\n    for (var i = 0, len = elements.length; i < len; i++) {\n      swapper = new KTSwapper(elements[i]);\n    }\n  }\n}; // Window resize handler\n\n\nwindow.addEventListener('resize', function () {\n  var timer;\n  KTUtil.throttle(timer, function () {\n    // Locate and update Offcanvas instances on window resize\n    var elements = document.querySelectorAll('[data-kt-swapper=\"true\"]');\n\n    if (elements && elements.length > 0) {\n      for (var i = 0, len = elements.length; i < len; i++) {\n        var swapper = KTSwapper.getInstance(elements[i]);\n\n        if (swapper) {\n          swapper.update();\n        }\n      }\n    }\n  }, 200);\n}); // Global initialization\n\nKTSwapper.init = function () {\n  KTSwapper.createInstances();\n}; // On document ready\n\n\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', KTSwapper.init);\n} else {\n  KTSwapper.init();\n} // Webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTSwapper;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/theme/js/components/swapper.js\n");

/***/ }),

/***/ "./resources/theme/js/components/toggle.js":
/*!*************************************************!*\
  !*** ./resources/theme/js/components/toggle.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval(" // Class definition\n\nvar KTToggle = function KTToggle(element, options) {\n  ////////////////////////////\n  // ** Private variables  ** //\n  ////////////////////////////\n  var the = this;\n  var body = document.getElementsByTagName(\"BODY\")[0];\n\n  if (!element) {\n    return;\n  } // Default Options\n\n\n  var defaultOptions = {\n    saveState: true\n  }; ////////////////////////////\n  // ** Private methods  ** //\n  ////////////////////////////\n\n  var _construct = function _construct() {\n    if (KTUtil.data(element).has('toggle') === true) {\n      the = KTUtil.data(element).get('toggle');\n    } else {\n      _init();\n    }\n  };\n\n  var _init = function _init() {\n    // Variables\n    the.options = KTUtil.deepExtend({}, defaultOptions, options);\n    the.uid = KTUtil.getUniqueId('toggle'); // Elements\n\n    the.element = element;\n    the.target = document.querySelector(the.element.getAttribute('data-kt-toggle-target')) ? document.querySelector(the.element.getAttribute('data-kt-toggle-target')) : the.element;\n    the.state = the.element.hasAttribute('data-kt-toggle-state') ? the.element.getAttribute('data-kt-toggle-state') : '';\n    the.attribute = 'data-kt-' + the.element.getAttribute('data-kt-toggle-name'); // Event Handlers\n\n    _handlers(); // Bind Instance\n\n\n    KTUtil.data(the.element).set('toggle', the);\n  };\n\n  var _handlers = function _handlers() {\n    KTUtil.addEvent(the.element, 'click', function (e) {\n      e.preventDefault();\n\n      _toggle();\n    });\n  }; // Event handlers\n\n\n  var _toggle = function _toggle() {\n    // Trigger \"after.toggle\" event\n    KTEventHandler.trigger(the.element, 'kt.toggle.change', the);\n\n    if (_isEnabled()) {\n      _disable();\n    } else {\n      _enable();\n    } // Trigger \"before.toggle\" event\n\n\n    KTEventHandler.trigger(the.element, 'kt.toggle.changed', the);\n    return the;\n  };\n\n  var _enable = function _enable() {\n    if (_isEnabled() === true) {\n      return;\n    }\n\n    KTEventHandler.trigger(the.element, 'kt.toggle.enable', the);\n    the.target.setAttribute(the.attribute, 'on');\n\n    if (the.state.length > 0) {\n      the.element.classList.add(the.state);\n    }\n\n    if (typeof KTCookie !== 'undefined' && the.options.saveState === true) {\n      KTCookie.set(the.attribute, 'on');\n    }\n\n    KTEventHandler.trigger(the.element, 'kt.toggle.enabled', the);\n    return the;\n  };\n\n  var _disable = function _disable() {\n    if (_isEnabled() === false) {\n      return;\n    }\n\n    KTEventHandler.trigger(the.element, 'kt.toggle.disable', the);\n    the.target.removeAttribute(the.attribute);\n\n    if (the.state.length > 0) {\n      the.element.classList.remove(the.state);\n    }\n\n    if (typeof KTCookie !== 'undefined' && the.options.saveState === true) {\n      KTCookie.remove(the.attribute);\n    }\n\n    KTEventHandler.trigger(the.element, 'kt.toggle.disabled', the);\n    return the;\n  };\n\n  var _isEnabled = function _isEnabled() {\n    return String(the.target.getAttribute(the.attribute)).toLowerCase() === 'on';\n  };\n\n  var _destroy = function _destroy() {\n    KTUtil.data(the.element).remove('toggle');\n  }; // Construct class\n\n\n  _construct(); ///////////////////////\n  // ** Public API  ** //\n  ///////////////////////\n  // Plugin API\n\n\n  the.toggle = function () {\n    return _toggle();\n  };\n\n  the.enable = function () {\n    return _enable();\n  };\n\n  the.disable = function () {\n    return _disable();\n  };\n\n  the.isEnabled = function () {\n    return _isEnabled();\n  };\n\n  the.goElement = function () {\n    return the.element;\n  };\n\n  the.destroy = function () {\n    return _destroy();\n  }; // Event API\n\n\n  the.on = function (name, handler) {\n    return KTEventHandler.on(the.element, name, handler);\n  };\n\n  the.one = function (name, handler) {\n    return KTEventHandler.one(the.element, name, handler);\n  };\n\n  the.off = function (name) {\n    return KTEventHandler.off(the.element, name);\n  };\n\n  the.trigger = function (name, event) {\n    return KTEventHandler.trigger(the.element, name, event, the, event);\n  };\n}; // Static methods\n\n\nKTToggle.getInstance = function (element) {\n  if (element !== null && KTUtil.data(element).has('toggle')) {\n    return KTUtil.data(element).get('toggle');\n  } else {\n    return null;\n  }\n}; // Create instances\n\n\nKTToggle.createInstances = function () {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-kt-toggle]';\n  var body = document.getElementsByTagName(\"BODY\")[0]; // Get instances\n\n  var elements = body.querySelectorAll(selector);\n\n  if (elements && elements.length > 0) {\n    for (var i = 0, len = elements.length; i < len; i++) {\n      // Initialize instances\n      new KTToggle(elements[i]);\n    }\n  }\n}; // Global initialization\n\n\nKTToggle.init = function () {\n  KTToggle.createInstances();\n}; // On document ready\n\n\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', KTToggle.init);\n} else {\n  KTToggle.init();\n} // Webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTToggle;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/theme/js/components/toggle.js\n");

/***/ }),

/***/ "./resources/theme/js/components/util.js":
/*!***********************************************!*\
  !*** ./resources/theme/js/components/util.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("\n/**\n * @class KTUtil  base utilize class that privides helper functions\n */\n// Polyfills\n// Element.matches() polyfill\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nif (!Element.prototype.matches) {\n  Element.prototype.matches = function (s) {\n    var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n        i = matches.length;\n\n    while (--i >= 0 && matches.item(i) !== this) {}\n\n    return i > -1;\n  };\n}\n/**\n * Element.closest() polyfill\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill\n */\n\n\nif (!Element.prototype.closest) {\n  Element.prototype.closest = function (s) {\n    var el = this;\n    var ancestor = this;\n    if (!document.documentElement.contains(el)) return null;\n\n    do {\n      if (ancestor.matches(s)) return ancestor;\n      ancestor = ancestor.parentElement;\n    } while (ancestor !== null);\n\n    return null;\n  };\n}\n/**\n * ChildNode.remove() polyfill\n * https://gomakethings.com/removing-an-element-from-the-dom-the-es6-way/\n * @author Chris Ferdinandi\n * @license MIT\n */\n\n\n(function (elem) {\n  for (var i = 0; i < elem.length; i++) {\n    if (!window[elem[i]] || 'remove' in window[elem[i]].prototype) continue;\n\n    window[elem[i]].prototype.remove = function () {\n      this.parentNode.removeChild(this);\n    };\n  }\n})(['Element', 'CharacterData', 'DocumentType']); //\n// requestAnimationFrame polyfill by Erik Möller.\n//  With fixes from Paul Irish and Tino Zijdel\n//\n//  http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n//  http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n//\n//  MIT license\n//\n\n\n(function () {\n  var lastTime = 0;\n  var vendors = ['webkit', 'moz'];\n\n  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n  }\n\n  if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback) {\n    var currTime = new Date().getTime();\n    var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n    var id = window.setTimeout(function () {\n      callback(currTime + timeToCall);\n    }, timeToCall);\n    lastTime = currTime + timeToCall;\n    return id;\n  };\n  if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {\n    clearTimeout(id);\n  };\n})(); // Source: https://github.com/jserz/js_piece/blob/master/DOM/ParentNode/prepend()/prepend().md\n\n\n(function (arr) {\n  arr.forEach(function (item) {\n    if (item.hasOwnProperty('prepend')) {\n      return;\n    }\n\n    Object.defineProperty(item, 'prepend', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: function prepend() {\n        var argArr = Array.prototype.slice.call(arguments),\n            docFrag = document.createDocumentFragment();\n        argArr.forEach(function (argItem) {\n          var isNode = argItem instanceof Node;\n          docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));\n        });\n        this.insertBefore(docFrag, this.firstChild);\n      }\n    });\n  });\n})([Element.prototype, Document.prototype, DocumentFragment.prototype]); // getAttributeNames\n\n\nif (Element.prototype.getAttributeNames == undefined) {\n  Element.prototype.getAttributeNames = function () {\n    var attributes = this.attributes;\n    var length = attributes.length;\n    var result = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      result[i] = attributes[i].name;\n    }\n\n    return result;\n  };\n} // Global variables\n\n\nwindow.KTUtilElementDataStore = {};\nwindow.KTUtilElementDataStoreID = 0;\nwindow.KTUtilDelegatedEventHandlers = {};\n\nvar KTUtil = function () {\n  var resizeHandlers = [];\n  /**\n   * Handle window resize event with some\n   * delay to attach event handlers upon resize complete\n   */\n\n  var _windowResizeHandler = function _windowResizeHandler() {\n    var _runResizeHandlers = function _runResizeHandlers() {\n      // reinitialize other subscribed elements\n      for (var i = 0; i < resizeHandlers.length; i++) {\n        var each = resizeHandlers[i];\n        each.call();\n      }\n    };\n\n    var timer;\n    window.addEventListener('resize', function () {\n      KTUtil.throttle(timer, function () {\n        _runResizeHandlers();\n      }, 200);\n    });\n  };\n\n  return {\n    /**\n     * Class main initializer.\n     * @param {object} settings.\n     * @returns null\n     */\n    //main function to initiate the theme\n    init: function init(settings) {\n      _windowResizeHandler();\n    },\n\n    /**\n     * Adds window resize event handler.\n     * @param {function} callback function.\n     */\n    addResizeHandler: function addResizeHandler(callback) {\n      resizeHandlers.push(callback);\n    },\n\n    /**\n     * Removes window resize event handler.\n     * @param {function} callback function.\n     */\n    removeResizeHandler: function removeResizeHandler(callback) {\n      for (var i = 0; i < resizeHandlers.length; i++) {\n        if (callback === resizeHandlers[i]) {\n          delete resizeHandlers[i];\n        }\n      }\n    },\n\n    /**\n     * Trigger window resize handlers.\n     */\n    runResizeHandlers: function runResizeHandlers() {\n      _runResizeHandlers();\n    },\n    resize: function resize() {\n      if (typeof Event === 'function') {\n        // modern browsers\n        window.dispatchEvent(new Event('resize'));\n      } else {\n        // for IE and other old browsers\n        // causes deprecation warning on modern browsers\n        var evt = window.document.createEvent('UIEvents');\n        evt.initUIEvent('resize', true, false, window, 0);\n        window.dispatchEvent(evt);\n      }\n    },\n\n    /**\n     * Get GET parameter value from URL.\n     * @param {string} paramName Parameter name.\n     * @returns {string}\n     */\n    getURLParam: function getURLParam(paramName) {\n      var searchString = window.location.search.substring(1),\n          i,\n          val,\n          params = searchString.split(\"&\");\n\n      for (i = 0; i < params.length; i++) {\n        val = params[i].split(\"=\");\n\n        if (val[0] == paramName) {\n          return unescape(val[1]);\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Checks whether current device is mobile touch.\n     * @returns {boolean}\n     */\n    isMobileDevice: function isMobileDevice() {\n      var test = this.getViewPort().width < this.getBreakpoint('lg') ? true : false;\n\n      if (test === false) {\n        // For use within normal web clients\n        test = navigator.userAgent.match(/iPad/i) != null;\n      }\n\n      return test;\n    },\n\n    /**\n     * Checks whether current device is desktop.\n     * @returns {boolean}\n     */\n    isDesktopDevice: function isDesktopDevice() {\n      return KTUtil.isMobileDevice() ? false : true;\n    },\n\n    /**\n     * Gets browser window viewport size. Ref:\n     * http://andylangton.co.uk/articles/javascript/get-viewport-size-javascript/\n     * @returns {object}\n     */\n    getViewPort: function getViewPort() {\n      var e = window,\n          a = 'inner';\n\n      if (!('innerWidth' in window)) {\n        a = 'client';\n        e = document.documentElement || document.body;\n      }\n\n      return {\n        width: e[a + 'Width'],\n        height: e[a + 'Height']\n      };\n    },\n\n    /**\n           * Checks whether given device mode is currently activated.\n           * @param {string} mode Responsive mode name(e.g: desktop,\n           *     desktop-and-tablet, tablet, tablet-and-mobile, mobile)\n           * @returns {boolean}\n           */\n    isBreakpointUp: function isBreakpointUp(mode) {\n      var width = this.getViewPort().width;\n      var breakpoint = this.getBreakpoint(mode);\n      return width >= breakpoint;\n    },\n    isBreakpointDown: function isBreakpointDown(mode) {\n      var width = this.getViewPort().width;\n      var breakpoint = this.getBreakpoint(mode);\n      return width < breakpoint;\n    },\n    getViewportWidth: function getViewportWidth() {\n      return this.getViewPort().width;\n    },\n\n    /**\n     * Generates unique ID for give prefix.\n     * @param {string} prefix Prefix for generated ID\n     * @returns {boolean}\n     */\n    getUniqueId: function getUniqueId(prefix) {\n      return prefix + Math.floor(Math.random() * new Date().getTime());\n    },\n\n    /**\n     * Gets window width for give breakpoint mode.\n     * @param {string} mode Responsive mode name(e.g: xl, lg, md, sm)\n     * @returns {number}\n     */\n    getBreakpoint: function getBreakpoint(breakpoint) {\n      var value = this.getCssVariableValue('--bs-' + breakpoint);\n\n      if (value) {\n        value = parseInt(value.trim());\n      }\n\n      return value;\n    },\n\n    /**\n     * Checks whether object has property matchs given key path.\n     * @param {object} obj Object contains values paired with given key path\n     * @param {string} keys Keys path seperated with dots\n     * @returns {object}\n     */\n    isset: function isset(obj, keys) {\n      var stone;\n      keys = keys || '';\n\n      if (keys.indexOf('[') !== -1) {\n        throw new Error('Unsupported object path notation.');\n      }\n\n      keys = keys.split('.');\n\n      do {\n        if (obj === undefined) {\n          return false;\n        }\n\n        stone = keys.shift();\n\n        if (!obj.hasOwnProperty(stone)) {\n          return false;\n        }\n\n        obj = obj[stone];\n      } while (keys.length);\n\n      return true;\n    },\n\n    /**\n     * Gets highest z-index of the given element parents\n     * @param {object} el jQuery element object\n     * @returns {number}\n     */\n    getHighestZindex: function getHighestZindex(el) {\n      var position, value;\n\n      while (el && el !== document) {\n        // Ignore z-index if position is set to a value where z-index is ignored by the browser\n        // This makes behavior of this function consistent across browsers\n        // WebKit always returns auto if the element is positioned\n        position = KTUtil.css(el, 'position');\n\n        if (position === \"absolute\" || position === \"relative\" || position === \"fixed\") {\n          // IE returns 0 when zIndex is not specified\n          // other browsers return a string\n          // we ignore the case of nested elements with an explicit value of 0\n          // <div style=\"z-index: -10;\"><div style=\"z-index: 0;\"></div></div>\n          value = parseInt(KTUtil.css(el, 'z-index'));\n\n          if (!isNaN(value) && value !== 0) {\n            return value;\n          }\n        }\n\n        el = el.parentNode;\n      }\n\n      return 1;\n    },\n\n    /**\n     * Checks whether the element has any parent with fixed positionfreg\n     * @param {object} el jQuery element object\n     * @returns {boolean}\n     */\n    hasFixedPositionedParent: function hasFixedPositionedParent(el) {\n      var position;\n\n      while (el && el !== document) {\n        position = KTUtil.css(el, 'position');\n\n        if (position === \"fixed\") {\n          return true;\n        }\n\n        el = el.parentNode;\n      }\n\n      return false;\n    },\n\n    /**\n     * Simulates delay\n     */\n    sleep: function sleep(milliseconds) {\n      var start = new Date().getTime();\n\n      for (var i = 0; i < 1e7; i++) {\n        if (new Date().getTime() - start > milliseconds) {\n          break;\n        }\n      }\n    },\n\n    /**\n     * Gets randomly generated integer value within given min and max range\n     * @param {number} min Range start value\n     * @param {number} max Range end value\n     * @returns {number}\n     */\n    getRandomInt: function getRandomInt(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    },\n\n    /**\n     * Checks whether Angular library is included\n     * @returns {boolean}\n     */\n    isAngularVersion: function isAngularVersion() {\n      return window.Zone !== undefined ? true : false;\n    },\n    // Deep extend:  $.extend(true, {}, objA, objB);\n    deepExtend: function deepExtend(out) {\n      out = out || {};\n\n      for (var i = 1; i < arguments.length; i++) {\n        var obj = arguments[i];\n        if (!obj) continue;\n\n        for (var key in obj) {\n          if (!obj.hasOwnProperty(key)) {\n            continue;\n          } // based on https://javascriptweblog.wordpress.com/2011/08/08/fixing-the-javascript-typeof-operator/\n\n\n          if (Object.prototype.toString.call(obj[key]) === '[object Object]') {\n            out[key] = KTUtil.deepExtend(out[key], obj[key]);\n            continue;\n          }\n\n          out[key] = obj[key];\n        }\n      }\n\n      return out;\n    },\n    // extend:  $.extend({}, objA, objB);\n    extend: function extend(out) {\n      out = out || {};\n\n      for (var i = 1; i < arguments.length; i++) {\n        if (!arguments[i]) continue;\n\n        for (var key in arguments[i]) {\n          if (arguments[i].hasOwnProperty(key)) out[key] = arguments[i][key];\n        }\n      }\n\n      return out;\n    },\n    getBody: function getBody() {\n      return document.getElementsByTagName('body')[0];\n    },\n\n    /**\n     * Checks whether the element has given classes\n     * @param {object} el jQuery element object\n     * @param {string} Classes string\n     * @returns {boolean}\n     */\n    hasClasses: function hasClasses(el, classes) {\n      if (!el) {\n        return;\n      }\n\n      var classesArr = classes.split(\" \");\n\n      for (var i = 0; i < classesArr.length; i++) {\n        if (KTUtil.hasClass(el, KTUtil.trim(classesArr[i])) == false) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    hasClass: function hasClass(el, className) {\n      if (!el) {\n        return;\n      }\n\n      return el.classList ? el.classList.contains(className) : new RegExp('\\\\b' + className + '\\\\b').test(el.className);\n    },\n    addClass: function addClass(el, className) {\n      if (!el || typeof className === 'undefined') {\n        return;\n      }\n\n      var classNames = className.split(' ');\n\n      if (el.classList) {\n        for (var i = 0; i < classNames.length; i++) {\n          if (classNames[i] && classNames[i].length > 0) {\n            el.classList.add(KTUtil.trim(classNames[i]));\n          }\n        }\n      } else if (!KTUtil.hasClass(el, className)) {\n        for (var x = 0; x < classNames.length; x++) {\n          el.className += ' ' + KTUtil.trim(classNames[x]);\n        }\n      }\n    },\n    removeClass: function removeClass(el, className) {\n      if (!el || typeof className === 'undefined') {\n        return;\n      }\n\n      var classNames = className.split(' ');\n\n      if (el.classList) {\n        for (var i = 0; i < classNames.length; i++) {\n          el.classList.remove(KTUtil.trim(classNames[i]));\n        }\n      } else if (KTUtil.hasClass(el, className)) {\n        for (var x = 0; x < classNames.length; x++) {\n          el.className = el.className.replace(new RegExp('\\\\b' + KTUtil.trim(classNames[x]) + '\\\\b', 'g'), '');\n        }\n      }\n    },\n    triggerCustomEvent: function triggerCustomEvent(el, eventName, data) {\n      var event;\n\n      if (window.CustomEvent) {\n        event = new CustomEvent(eventName, {\n          detail: data\n        });\n      } else {\n        event = document.createEvent('CustomEvent');\n        event.initCustomEvent(eventName, true, true, data);\n      }\n\n      el.dispatchEvent(event);\n    },\n    triggerEvent: function triggerEvent(node, eventName) {\n      // Make sure we use the ownerDocument from the provided node to avoid cross-window problems\n      var doc;\n\n      if (node.ownerDocument) {\n        doc = node.ownerDocument;\n      } else if (node.nodeType == 9) {\n        // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n        doc = node;\n      } else {\n        throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n      }\n\n      if (node.dispatchEvent) {\n        // Gecko-style approach (now the standard) takes more work\n        var eventClass = \"\"; // Different events have different event classes.\n        // If this switch statement can't map an eventName to an eventClass,\n        // the event firing is going to fail.\n\n        switch (eventName) {\n          case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n\n          case \"mouseenter\":\n          case \"mouseleave\":\n          case \"mousedown\":\n          case \"mouseup\":\n            eventClass = \"MouseEvents\";\n            break;\n\n          case \"focus\":\n          case \"change\":\n          case \"blur\":\n          case \"select\":\n            eventClass = \"HTMLEvents\";\n            break;\n\n          default:\n            throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n            break;\n        }\n\n        var event = doc.createEvent(eventClass);\n        var bubbles = eventName == \"change\" ? false : true;\n        event.initEvent(eventName, bubbles, true); // All events created as bubbling and cancelable.\n\n        event.synthetic = true; // allow detection of synthetic events\n        // The second parameter says go ahead with the default action\n\n        node.dispatchEvent(event, true);\n      } else if (node.fireEvent) {\n        // IE-old school style\n        var event = doc.createEventObject();\n        event.synthetic = true; // allow detection of synthetic events\n\n        node.fireEvent(\"on\" + eventName, event);\n      }\n    },\n    index: function index(el) {\n      var c = el.parentNode.children,\n          i = 0;\n\n      for (; i < c.length; i++) {\n        if (c[i] == el) return i;\n      }\n    },\n    trim: function trim(string) {\n      return string.trim();\n    },\n    eventTriggered: function eventTriggered(e) {\n      if (e.currentTarget.dataset.triggered) {\n        return true;\n      } else {\n        e.currentTarget.dataset.triggered = true;\n        return false;\n      }\n    },\n    remove: function remove(el) {\n      if (el && el.parentNode) {\n        el.parentNode.removeChild(el);\n      }\n    },\n    find: function find(parent, query) {\n      if (parent !== null) {\n        return parent.querySelector(query);\n      } else {\n        return null;\n      }\n    },\n    findAll: function findAll(parent, query) {\n      if (parent !== null) {\n        return parent.querySelectorAll(query);\n      } else {\n        return null;\n      }\n    },\n    insertAfter: function insertAfter(el, referenceNode) {\n      return referenceNode.parentNode.insertBefore(el, referenceNode.nextSibling);\n    },\n    parents: function parents(elem, selector) {\n      // Set up a parent array\n      var parents = []; // Push each parent element to the array\n\n      for (; elem && elem !== document; elem = elem.parentNode) {\n        if (selector) {\n          if (elem.matches(selector)) {\n            parents.push(elem);\n          }\n\n          continue;\n        }\n\n        parents.push(elem);\n      } // Return our parent array\n\n\n      return parents;\n    },\n    children: function children(el, selector, log) {\n      if (!el || !el.childNodes) {\n        return null;\n      }\n\n      var result = [],\n          i = 0,\n          l = el.childNodes.length;\n\n      for (var i; i < l; ++i) {\n        if (el.childNodes[i].nodeType == 1 && KTUtil.matches(el.childNodes[i], selector, log)) {\n          result.push(el.childNodes[i]);\n        }\n      }\n\n      return result;\n    },\n    child: function child(el, selector, log) {\n      var children = KTUtil.children(el, selector, log);\n      return children ? children[0] : null;\n    },\n    matches: function matches(el, selector, log) {\n      var p = Element.prototype;\n\n      var f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function (s) {\n        return [].indexOf.call(document.querySelectorAll(s), this) !== -1;\n      };\n\n      if (el && el.tagName) {\n        return f.call(el, selector);\n      } else {\n        return false;\n      }\n    },\n    data: function data(el) {\n      return {\n        set: function set(name, data) {\n          if (!el) {\n            return;\n          }\n\n          if (el.customDataTag === undefined) {\n            window.KTUtilElementDataStoreID++;\n            el.customDataTag = window.KTUtilElementDataStoreID;\n          }\n\n          if (window.KTUtilElementDataStore[el.customDataTag] === undefined) {\n            window.KTUtilElementDataStore[el.customDataTag] = {};\n          }\n\n          window.KTUtilElementDataStore[el.customDataTag][name] = data;\n        },\n        get: function get(name) {\n          if (!el) {\n            return;\n          }\n\n          if (el.customDataTag === undefined) {\n            return null;\n          }\n\n          return this.has(name) ? window.KTUtilElementDataStore[el.customDataTag][name] : null;\n        },\n        has: function has(name) {\n          if (!el) {\n            return false;\n          }\n\n          if (el.customDataTag === undefined) {\n            return false;\n          }\n\n          return window.KTUtilElementDataStore[el.customDataTag] && window.KTUtilElementDataStore[el.customDataTag][name] ? true : false;\n        },\n        remove: function remove(name) {\n          if (el && this.has(name)) {\n            delete window.KTUtilElementDataStore[el.customDataTag][name];\n          }\n        }\n      };\n    },\n    outerWidth: function outerWidth(el, margin) {\n      var width;\n\n      if (margin === true) {\n        width = parseFloat(el.offsetWidth);\n        width += parseFloat(KTUtil.css(el, 'margin-left')) + parseFloat(KTUtil.css(el, 'margin-right'));\n        return parseFloat(width);\n      } else {\n        width = parseFloat(el.offsetWidth);\n        return width;\n      }\n    },\n    offset: function offset(el) {\n      var rect, win;\n\n      if (!el) {\n        return;\n      } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n      // Support: IE <=11 only\n      // Running getBoundingClientRect on a\n      // disconnected node in IE throws an error\n\n\n      if (!el.getClientRects().length) {\n        return {\n          top: 0,\n          left: 0\n        };\n      } // Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\n\n      rect = el.getBoundingClientRect();\n      win = el.ownerDocument.defaultView;\n      return {\n        top: rect.top + win.pageYOffset,\n        left: rect.left + win.pageXOffset,\n        right: window.innerWidth - (el.offsetLeft + el.offsetWidth)\n      };\n    },\n    height: function height(el) {\n      return KTUtil.css(el, 'height');\n    },\n    outerHeight: function outerHeight(el, withMargin) {\n      var height = el.offsetHeight;\n      var style;\n\n      if (typeof withMargin !== 'undefined' && withMargin === true) {\n        style = getComputedStyle(el);\n        height += parseInt(style.marginTop) + parseInt(style.marginBottom);\n        return height;\n      } else {\n        return height;\n      }\n    },\n    visible: function visible(el) {\n      return !(el.offsetWidth === 0 && el.offsetHeight === 0);\n    },\n    attr: function attr(el, name, value) {\n      if (el == undefined) {\n        return;\n      }\n\n      if (value !== undefined) {\n        el.setAttribute(name, value);\n      } else {\n        return el.getAttribute(name);\n      }\n    },\n    hasAttr: function hasAttr(el, name) {\n      if (el == undefined) {\n        return;\n      }\n\n      return el.getAttribute(name) ? true : false;\n    },\n    removeAttr: function removeAttr(el, name) {\n      if (el == undefined) {\n        return;\n      }\n\n      el.removeAttribute(name);\n    },\n    animate: function animate(from, to, duration, update, easing, done) {\n      /**\n       * TinyAnimate.easings\n       *  Adapted from jQuery Easing\n       */\n      var easings = {};\n      var easing;\n\n      easings.linear = function (t, b, c, d) {\n        return c * t / d + b;\n      };\n\n      easing = easings.linear; // Early bail out if called incorrectly\n\n      if (typeof from !== 'number' || typeof to !== 'number' || typeof duration !== 'number' || typeof update !== 'function') {\n        return;\n      } // Create mock done() function if necessary\n\n\n      if (typeof done !== 'function') {\n        done = function done() {};\n      } // Pick implementation (requestAnimationFrame | setTimeout)\n\n\n      var rAF = window.requestAnimationFrame || function (callback) {\n        window.setTimeout(callback, 1000 / 50);\n      }; // Animation loop\n\n\n      var canceled = false;\n      var change = to - from;\n\n      function loop(timestamp) {\n        var time = (timestamp || +new Date()) - start;\n\n        if (time >= 0) {\n          update(easing(time, from, change, duration));\n        }\n\n        if (time >= 0 && time >= duration) {\n          update(to);\n          done();\n        } else {\n          rAF(loop);\n        }\n      }\n\n      update(from); // Start animation loop\n\n      var start = window.performance && window.performance.now ? window.performance.now() : +new Date();\n      rAF(loop);\n    },\n    actualCss: function actualCss(el, prop, cache) {\n      var css = '';\n\n      if (el instanceof HTMLElement === false) {\n        return;\n      }\n\n      if (!el.getAttribute('kt-hidden-' + prop) || cache === false) {\n        var value; // the element is hidden so:\n        // making the el block so we can meassure its height but still be hidden\n\n        css = el.style.cssText;\n        el.style.cssText = 'position: absolute; visibility: hidden; display: block;';\n\n        if (prop == 'width') {\n          value = el.offsetWidth;\n        } else if (prop == 'height') {\n          value = el.offsetHeight;\n        }\n\n        el.style.cssText = css; // store it in cache\n\n        el.setAttribute('kt-hidden-' + prop, value);\n        return parseFloat(value);\n      } else {\n        // store it in cache\n        return parseFloat(el.getAttribute('kt-hidden-' + prop));\n      }\n    },\n    actualHeight: function actualHeight(el, cache) {\n      return KTUtil.actualCss(el, 'height', cache);\n    },\n    actualWidth: function actualWidth(el, cache) {\n      return KTUtil.actualCss(el, 'width', cache);\n    },\n    getScroll: function getScroll(element, method) {\n      // The passed in `method` value should be 'Top' or 'Left'\n      method = 'scroll' + method;\n      return element == window || element == document ? self[method == 'scrollTop' ? 'pageYOffset' : 'pageXOffset'] || browserSupportsBoxModel && document.documentElement[method] || document.body[method] : element[method];\n    },\n    css: function css(el, styleProp, value, important) {\n      if (!el) {\n        return;\n      }\n\n      if (value !== undefined) {\n        if (important === true) {\n          el.style.setProperty(styleProp, value, 'important');\n        } else {\n          el.style[styleProp] = value;\n        }\n      } else {\n        var defaultView = (el.ownerDocument || document).defaultView; // W3C standard way:\n\n        if (defaultView && defaultView.getComputedStyle) {\n          // sanitize property name to css notation\n          // (hyphen separated words eg. font-Size)\n          styleProp = styleProp.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n          return defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);\n        } else if (el.currentStyle) {\n          // IE\n          // sanitize property name to camelCase\n          styleProp = styleProp.replace(/\\-(\\w)/g, function (str, letter) {\n            return letter.toUpperCase();\n          });\n          value = el.currentStyle[styleProp]; // convert other units to pixels on IE\n\n          if (/^\\d+(em|pt|%|ex)?$/i.test(value)) {\n            return function (value) {\n              var oldLeft = el.style.left,\n                  oldRsLeft = el.runtimeStyle.left;\n              el.runtimeStyle.left = el.currentStyle.left;\n              el.style.left = value || 0;\n              value = el.style.pixelLeft + \"px\";\n              el.style.left = oldLeft;\n              el.runtimeStyle.left = oldRsLeft;\n              return value;\n            }(value);\n          }\n\n          return value;\n        }\n      }\n    },\n    slide: function slide(el, dir, speed, callback, recalcMaxHeight) {\n      if (!el || dir == 'up' && KTUtil.visible(el) === false || dir == 'down' && KTUtil.visible(el) === true) {\n        return;\n      }\n\n      speed = speed ? speed : 600;\n      var calcHeight = KTUtil.actualHeight(el);\n      var calcPaddingTop = false;\n      var calcPaddingBottom = false;\n\n      if (KTUtil.css(el, 'padding-top') && KTUtil.data(el).has('slide-padding-top') !== true) {\n        KTUtil.data(el).set('slide-padding-top', KTUtil.css(el, 'padding-top'));\n      }\n\n      if (KTUtil.css(el, 'padding-bottom') && KTUtil.data(el).has('slide-padding-bottom') !== true) {\n        KTUtil.data(el).set('slide-padding-bottom', KTUtil.css(el, 'padding-bottom'));\n      }\n\n      if (KTUtil.data(el).has('slide-padding-top')) {\n        calcPaddingTop = parseInt(KTUtil.data(el).get('slide-padding-top'));\n      }\n\n      if (KTUtil.data(el).has('slide-padding-bottom')) {\n        calcPaddingBottom = parseInt(KTUtil.data(el).get('slide-padding-bottom'));\n      }\n\n      if (dir == 'up') {\n        // up\n        el.style.cssText = 'display: block; overflow: hidden;';\n\n        if (calcPaddingTop) {\n          KTUtil.animate(0, calcPaddingTop, speed, function (value) {\n            el.style.paddingTop = calcPaddingTop - value + 'px';\n          }, 'linear');\n        }\n\n        if (calcPaddingBottom) {\n          KTUtil.animate(0, calcPaddingBottom, speed, function (value) {\n            el.style.paddingBottom = calcPaddingBottom - value + 'px';\n          }, 'linear');\n        }\n\n        KTUtil.animate(0, calcHeight, speed, function (value) {\n          el.style.height = calcHeight - value + 'px';\n        }, 'linear', function () {\n          el.style.height = '';\n          el.style.display = 'none';\n\n          if (typeof callback === 'function') {\n            callback();\n          }\n        });\n      } else if (dir == 'down') {\n        // down\n        el.style.cssText = 'display: block; overflow: hidden;';\n\n        if (calcPaddingTop) {\n          KTUtil.animate(0, calcPaddingTop, speed, function (value) {\n            //\n            el.style.paddingTop = value + 'px';\n          }, 'linear', function () {\n            el.style.paddingTop = '';\n          });\n        }\n\n        if (calcPaddingBottom) {\n          KTUtil.animate(0, calcPaddingBottom, speed, function (value) {\n            el.style.paddingBottom = value + 'px';\n          }, 'linear', function () {\n            el.style.paddingBottom = '';\n          });\n        }\n\n        KTUtil.animate(0, calcHeight, speed, function (value) {\n          el.style.height = value + 'px';\n        }, 'linear', function () {\n          el.style.height = '';\n          el.style.display = '';\n          el.style.overflow = '';\n\n          if (typeof callback === 'function') {\n            callback();\n          }\n        });\n      }\n    },\n    slideUp: function slideUp(el, speed, callback) {\n      KTUtil.slide(el, 'up', speed, callback);\n    },\n    slideDown: function slideDown(el, speed, callback) {\n      KTUtil.slide(el, 'down', speed, callback);\n    },\n    show: function show(el, display) {\n      if (typeof el !== 'undefined') {\n        el.style.display = display ? display : 'block';\n      }\n    },\n    hide: function hide(el) {\n      if (typeof el !== 'undefined') {\n        el.style.display = 'none';\n      }\n    },\n    addEvent: function addEvent(el, type, handler, one) {\n      if (typeof el !== 'undefined' && el !== null) {\n        el.addEventListener(type, handler);\n      }\n    },\n    removeEvent: function removeEvent(el, type, handler) {\n      if (el !== null) {\n        el.removeEventListener(type, handler);\n      }\n    },\n    on: function on(element, selector, event, handler) {\n      if (element === null) {\n        return;\n      }\n\n      var eventId = KTUtil.getUniqueId('event');\n\n      window.KTUtilDelegatedEventHandlers[eventId] = function (e) {\n        var targets = element.querySelectorAll(selector);\n        var target = e.target;\n\n        while (target && target !== element) {\n          for (var i = 0, j = targets.length; i < j; i++) {\n            if (target === targets[i]) {\n              handler.call(target, e);\n            }\n          }\n\n          target = target.parentNode;\n        }\n      };\n\n      KTUtil.addEvent(element, event, window.KTUtilDelegatedEventHandlers[eventId]);\n      return eventId;\n    },\n    off: function off(element, event, eventId) {\n      if (!element || !window.KTUtilDelegatedEventHandlers[eventId]) {\n        return;\n      }\n\n      KTUtil.removeEvent(element, event, window.KTUtilDelegatedEventHandlers[eventId]);\n      delete window.KTUtilDelegatedEventHandlers[eventId];\n    },\n    one: function onetime(el, type, callback) {\n      el.addEventListener(type, function callee(e) {\n        // remove event\n        if (e.target && e.target.removeEventListener) {\n          e.target.removeEventListener(e.type, callee);\n        } // need to verify from https://themeforest.net/author_dashboard#comment_23615588\n\n\n        if (el && el.removeEventListener) {\n          e.currentTarget.removeEventListener(e.type, callee);\n        } // call handler\n\n\n        return callback(e);\n      });\n    },\n    hash: function hash(str) {\n      var hash = 0,\n          i,\n          chr;\n      if (str.length === 0) return hash;\n\n      for (i = 0; i < str.length; i++) {\n        chr = str.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0; // Convert to 32bit integer\n      }\n\n      return hash;\n    },\n    animateClass: function animateClass(el, animationName, callback) {\n      var animation;\n      var animations = {\n        animation: 'animationend',\n        OAnimation: 'oAnimationEnd',\n        MozAnimation: 'mozAnimationEnd',\n        WebkitAnimation: 'webkitAnimationEnd',\n        msAnimation: 'msAnimationEnd'\n      };\n\n      for (var t in animations) {\n        if (el.style[t] !== undefined) {\n          animation = animations[t];\n        }\n      }\n\n      KTUtil.addClass(el, animationName);\n      KTUtil.one(el, animation, function () {\n        KTUtil.removeClass(el, animationName);\n      });\n\n      if (callback) {\n        KTUtil.one(el, animation, callback);\n      }\n    },\n    transitionEnd: function transitionEnd(el, callback) {\n      var transition;\n      var transitions = {\n        transition: 'transitionend',\n        OTransition: 'oTransitionEnd',\n        MozTransition: 'mozTransitionEnd',\n        WebkitTransition: 'webkitTransitionEnd',\n        msTransition: 'msTransitionEnd'\n      };\n\n      for (var t in transitions) {\n        if (el.style[t] !== undefined) {\n          transition = transitions[t];\n        }\n      }\n\n      KTUtil.one(el, transition, callback);\n    },\n    animationEnd: function animationEnd(el, callback) {\n      var animation;\n      var animations = {\n        animation: 'animationend',\n        OAnimation: 'oAnimationEnd',\n        MozAnimation: 'mozAnimationEnd',\n        WebkitAnimation: 'webkitAnimationEnd',\n        msAnimation: 'msAnimationEnd'\n      };\n\n      for (var t in animations) {\n        if (el.style[t] !== undefined) {\n          animation = animations[t];\n        }\n      }\n\n      KTUtil.one(el, animation, callback);\n    },\n    animateDelay: function animateDelay(el, value) {\n      var vendors = ['webkit-', 'moz-', 'ms-', 'o-', ''];\n\n      for (var i = 0; i < vendors.length; i++) {\n        KTUtil.css(el, vendors[i] + 'animation-delay', value);\n      }\n    },\n    animateDuration: function animateDuration(el, value) {\n      var vendors = ['webkit-', 'moz-', 'ms-', 'o-', ''];\n\n      for (var i = 0; i < vendors.length; i++) {\n        KTUtil.css(el, vendors[i] + 'animation-duration', value);\n      }\n    },\n    scrollTo: function scrollTo(target, offset, duration) {\n      var duration = duration ? duration : 500;\n      var targetPos = target ? KTUtil.offset(target).top : 0;\n      var scrollPos = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\n      var from, to;\n\n      if (offset) {\n        targetPos = targetPos - offset;\n      }\n\n      from = scrollPos;\n      to = targetPos;\n      KTUtil.animate(from, to, duration, function (value) {\n        document.documentElement.scrollTop = value;\n        document.body.parentNode.scrollTop = value;\n        document.body.scrollTop = value;\n      }); //, easing, done\n    },\n    scrollTop: function scrollTop(offset, duration) {\n      KTUtil.scrollTo(null, offset, duration);\n    },\n    isArray: function isArray(obj) {\n      return obj && Array.isArray(obj);\n    },\n    isEmpty: function isEmpty(obj) {\n      for (var prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    numberString: function numberString(nStr) {\n      nStr += '';\n      var x = nStr.split('.');\n      var x1 = x[0];\n      var x2 = x.length > 1 ? '.' + x[1] : '';\n      var rgx = /(\\d+)(\\d{3})/;\n\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + ',' + '$2');\n      }\n\n      return x1 + x2;\n    },\n    isRTL: function isRTL() {\n      return document.querySelector('html').getAttribute(\"direction\") === 'rtl';\n    },\n    snakeToCamel: function snakeToCamel(s) {\n      return s.replace(/(\\-\\w)/g, function (m) {\n        return m[1].toUpperCase();\n      });\n    },\n    filterBoolean: function filterBoolean(val) {\n      // Convert string boolean\n      if (val === true || val === 'true') {\n        return true;\n      }\n\n      if (val === false || val === 'false') {\n        return false;\n      }\n\n      return val;\n    },\n    setHTML: function setHTML(el, html) {\n      el.innerHTML = html;\n    },\n    getHTML: function getHTML(el) {\n      if (el) {\n        return el.innerHTML;\n      }\n    },\n    getDocumentHeight: function getDocumentHeight() {\n      var body = document.body;\n      var html = document.documentElement;\n      return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n    },\n    getScrollTop: function getScrollTop() {\n      return (document.scrollingElement || document.documentElement).scrollTop;\n    },\n    colorLighten: function colorLighten(color, amount) {\n      var addLight = function addLight(color, amount) {\n        var cc = parseInt(color, 16) + amount;\n        var c = cc > 255 ? 255 : cc;\n        c = c.toString(16).length > 1 ? c.toString(16) : \"0\".concat(c.toString(16));\n        return c;\n      };\n\n      color = color.indexOf(\"#\") >= 0 ? color.substring(1, color.length) : color;\n      amount = parseInt(255 * amount / 100);\n      return color = \"#\".concat(addLight(color.substring(0, 2), amount)).concat(addLight(color.substring(2, 4), amount)).concat(addLight(color.substring(4, 6), amount));\n    },\n    colorDarken: function colorDarken(color, amount) {\n      var subtractLight = function subtractLight(color, amount) {\n        var cc = parseInt(color, 16) - amount;\n        var c = cc < 0 ? 0 : cc;\n        c = c.toString(16).length > 1 ? c.toString(16) : \"0\".concat(c.toString(16));\n        return c;\n      };\n\n      color = color.indexOf(\"#\") >= 0 ? color.substring(1, color.length) : color;\n      amount = parseInt(255 * amount / 100);\n      return color = \"#\".concat(subtractLight(color.substring(0, 2), amount)).concat(subtractLight(color.substring(2, 4), amount)).concat(subtractLight(color.substring(4, 6), amount));\n    },\n    // Throttle function: Input as function which needs to be throttled and delay is the time interval in milliseconds\n    throttle: function throttle(timer, func, delay) {\n      // If setTimeout is already scheduled, no need to do anything\n      if (timer) {\n        return;\n      } // Schedule a setTimeout after delay seconds\n\n\n      timer = setTimeout(function () {\n        func(); // Once setTimeout function execution is finished, timerId = undefined so that in <br>\n        // the next scroll event function execution can be scheduled by the setTimeout\n\n        timer = undefined;\n      }, delay);\n    },\n    // Debounce function: Input as function which needs to be debounced and delay is the debounced time in milliseconds\n    debounce: function debounce(timer, func, delay) {\n      // Cancels the setTimeout method execution\n      clearTimeout(timer); // Executes the func after delay time.\n\n      timer = setTimeout(func, delay);\n    },\n    parseJson: function parseJson(value) {\n      if (typeof value === 'string') {\n        value = value.replace(/'/g, \"\\\"\");\n        var jsonStr = value.replace(/(\\w+:)|(\\w+ :)/g, function (matched) {\n          return '\"' + matched.substring(0, matched.length - 1) + '\":';\n        });\n\n        try {\n          value = JSON.parse(jsonStr);\n        } catch (e) {}\n      }\n\n      return value;\n    },\n    getResponsiveValue: function getResponsiveValue(value, defaultValue) {\n      var width = this.getViewPort().width;\n      var result;\n      value = KTUtil.parseJson(value);\n\n      if (_typeof(value) === 'object') {\n        var resultKey;\n        var resultBreakpoint = -1;\n        var breakpoint;\n\n        for (var key in value) {\n          if (key === 'default') {\n            breakpoint = 0;\n          } else {\n            breakpoint = this.getBreakpoint(key) ? this.getBreakpoint(key) : parseInt(key);\n          }\n\n          if (breakpoint <= width && breakpoint > resultBreakpoint) {\n            resultKey = key;\n            resultBreakpoint = breakpoint;\n          }\n        }\n\n        if (resultKey) {\n          result = value[resultKey];\n        } else {\n          result = value;\n        }\n      } else {\n        result = value;\n      }\n\n      return result;\n    },\n    each: function each(array, callback) {\n      return [].slice.call(array).map(callback);\n    },\n    getSelectorMatchValue: function getSelectorMatchValue(value) {\n      var result = null;\n      value = KTUtil.parseJson(value);\n\n      if (_typeof(value) === 'object') {\n        // Match condition\n        if (value['match'] !== undefined) {\n          var selector = Object.keys(value['match'])[0];\n          value = Object.values(value['match'])[0];\n\n          if (document.querySelector(selector) !== null) {\n            result = value;\n          }\n        }\n      } else {\n        result = value;\n      }\n\n      return result;\n    },\n    getConditionalValue: function getConditionalValue(value) {\n      var value = KTUtil.parseJson(value);\n      var result = KTUtil.getResponsiveValue(value);\n\n      if (result !== null && result['match'] !== undefined) {\n        result = KTUtil.getSelectorMatchValue(result);\n      }\n\n      if (result === null && value !== null && value['default'] !== undefined) {\n        result = value['default'];\n      }\n\n      return result;\n    },\n    getCssVariableValue: function getCssVariableValue(variableName) {\n      var hex = getComputedStyle(document.documentElement).getPropertyValue(variableName);\n\n      if (hex && hex.length > 0) {\n        hex = hex.trim();\n      }\n\n      return hex;\n    },\n    isInViewport: function isInViewport(element) {\n      var rect = element.getBoundingClientRect();\n      return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);\n    },\n    onDOMContentLoaded: function onDOMContentLoaded(callback) {\n      if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', callback);\n      } else {\n        callback();\n      }\n    },\n    inIframe: function inIframe() {\n      try {\n        return window.self !== window.top;\n      } catch (e) {\n        return true;\n      }\n    }\n  };\n}(); // Webpack support\n\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTUtil;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvdGhlbWUvanMvY29tcG9uZW50cy91dGlsLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWI7QUFDQTtBQUNBO0FBRUE7QUFFQTs7OztBQUNBLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxTQUFSLENBQWtCQyxPQUF2QixFQUFnQztBQUM1QkYsRUFBQUEsT0FBTyxDQUFDQyxTQUFSLENBQWtCQyxPQUFsQixHQUE0QixVQUFTQyxDQUFULEVBQVk7QUFDcEMsUUFBSUQsT0FBTyxHQUFHLENBQUMsS0FBS0UsUUFBTCxJQUFpQixLQUFLQyxhQUF2QixFQUFzQ0MsZ0JBQXRDLENBQXVESCxDQUF2RCxDQUFkO0FBQUEsUUFDSUksQ0FBQyxHQUFHTCxPQUFPLENBQUNNLE1BRGhCOztBQUVBLFdBQU8sRUFBRUQsQ0FBRixJQUFPLENBQVAsSUFBWUwsT0FBTyxDQUFDTyxJQUFSLENBQWFGLENBQWIsTUFBb0IsSUFBdkMsRUFBNkMsQ0FBRTs7QUFDL0MsV0FBT0EsQ0FBQyxHQUFHLENBQUMsQ0FBWjtBQUNILEdBTEQ7QUFNSDtBQUVEO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxJQUFJLENBQUNQLE9BQU8sQ0FBQ0MsU0FBUixDQUFrQlMsT0FBdkIsRUFBZ0M7QUFDL0JWLEVBQUFBLE9BQU8sQ0FBQ0MsU0FBUixDQUFrQlMsT0FBbEIsR0FBNEIsVUFBVVAsQ0FBVixFQUFhO0FBQ3hDLFFBQUlRLEVBQUUsR0FBRyxJQUFUO0FBQ0EsUUFBSUMsUUFBUSxHQUFHLElBQWY7QUFDQSxRQUFJLENBQUNSLFFBQVEsQ0FBQ1MsZUFBVCxDQUF5QkMsUUFBekIsQ0FBa0NILEVBQWxDLENBQUwsRUFBNEMsT0FBTyxJQUFQOztBQUM1QyxPQUFHO0FBQ0YsVUFBSUMsUUFBUSxDQUFDVixPQUFULENBQWlCQyxDQUFqQixDQUFKLEVBQXlCLE9BQU9TLFFBQVA7QUFDekJBLE1BQUFBLFFBQVEsR0FBR0EsUUFBUSxDQUFDRyxhQUFwQjtBQUNBLEtBSEQsUUFHU0gsUUFBUSxLQUFLLElBSHRCOztBQUlBLFdBQU8sSUFBUDtBQUNBLEdBVEQ7QUFVQTtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsQ0FBQyxVQUFVSSxJQUFWLEVBQWdCO0FBQ2hCLE9BQUssSUFBSVQsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR1MsSUFBSSxDQUFDUixNQUF6QixFQUFpQ0QsQ0FBQyxFQUFsQyxFQUFzQztBQUNyQyxRQUFJLENBQUNVLE1BQU0sQ0FBQ0QsSUFBSSxDQUFDVCxDQUFELENBQUwsQ0FBUCxJQUFvQixZQUFZVSxNQUFNLENBQUNELElBQUksQ0FBQ1QsQ0FBRCxDQUFMLENBQU4sQ0FBZ0JOLFNBQXBELEVBQStEOztBQUMvRGdCLElBQUFBLE1BQU0sQ0FBQ0QsSUFBSSxDQUFDVCxDQUFELENBQUwsQ0FBTixDQUFnQk4sU0FBaEIsQ0FBMEJpQixNQUExQixHQUFtQyxZQUFZO0FBQzlDLFdBQUtDLFVBQUwsQ0FBZ0JDLFdBQWhCLENBQTRCLElBQTVCO0FBQ0EsS0FGRDtBQUdBO0FBQ0QsQ0FQRCxFQU9HLENBQUMsU0FBRCxFQUFZLGVBQVosRUFBNkIsY0FBN0IsQ0FQSCxFLENBVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQyxhQUFXO0FBQ1IsTUFBSUMsUUFBUSxHQUFHLENBQWY7QUFDQSxNQUFJQyxPQUFPLEdBQUcsQ0FBQyxRQUFELEVBQVcsS0FBWCxDQUFkOztBQUNBLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0QsT0FBTyxDQUFDZCxNQUFaLElBQXNCLENBQUNTLE1BQU0sQ0FBQ08scUJBQTlDLEVBQXFFLEVBQUVELENBQXZFLEVBQTBFO0FBQ3RFTixJQUFBQSxNQUFNLENBQUNPLHFCQUFQLEdBQStCUCxNQUFNLENBQUNLLE9BQU8sQ0FBQ0MsQ0FBRCxDQUFQLEdBQWEsdUJBQWQsQ0FBckM7QUFDQU4sSUFBQUEsTUFBTSxDQUFDUSxvQkFBUCxHQUNJUixNQUFNLENBQUNLLE9BQU8sQ0FBQ0MsQ0FBRCxDQUFQLEdBQWEsc0JBQWQsQ0FBTixJQUErQ04sTUFBTSxDQUFDSyxPQUFPLENBQUNDLENBQUQsQ0FBUCxHQUFhLDZCQUFkLENBRHpEO0FBRUg7O0FBRUQsTUFBSSxDQUFDTixNQUFNLENBQUNPLHFCQUFaLEVBQ0lQLE1BQU0sQ0FBQ08scUJBQVAsR0FBK0IsVUFBU0UsUUFBVCxFQUFtQjtBQUM5QyxRQUFJQyxRQUFRLEdBQUcsSUFBSUMsSUFBSixHQUFXQyxPQUFYLEVBQWY7QUFDQSxRQUFJQyxVQUFVLEdBQUdDLElBQUksQ0FBQ0MsR0FBTCxDQUFTLENBQVQsRUFBWSxNQUFNTCxRQUFRLEdBQUdOLFFBQWpCLENBQVosQ0FBakI7QUFDQSxRQUFJWSxFQUFFLEdBQUdoQixNQUFNLENBQUNpQixVQUFQLENBQWtCLFlBQVc7QUFDbENSLE1BQUFBLFFBQVEsQ0FBQ0MsUUFBUSxHQUFHRyxVQUFaLENBQVI7QUFDSCxLQUZRLEVBRU5BLFVBRk0sQ0FBVDtBQUdBVCxJQUFBQSxRQUFRLEdBQUdNLFFBQVEsR0FBR0csVUFBdEI7QUFDQSxXQUFPRyxFQUFQO0FBQ0gsR0FSRDtBQVVKLE1BQUksQ0FBQ2hCLE1BQU0sQ0FBQ1Esb0JBQVosRUFDSVIsTUFBTSxDQUFDUSxvQkFBUCxHQUE4QixVQUFTUSxFQUFULEVBQWE7QUFDdkNFLElBQUFBLFlBQVksQ0FBQ0YsRUFBRCxDQUFaO0FBQ0gsR0FGRDtBQUdQLENBeEJBLEdBQUQsQyxDQTBCQTs7O0FBQ0EsQ0FBQyxVQUFTRyxHQUFULEVBQWM7QUFDWEEsRUFBQUEsR0FBRyxDQUFDQyxPQUFKLENBQVksVUFBUzVCLElBQVQsRUFBZTtBQUN2QixRQUFJQSxJQUFJLENBQUM2QixjQUFMLENBQW9CLFNBQXBCLENBQUosRUFBb0M7QUFDaEM7QUFDSDs7QUFDREMsSUFBQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCL0IsSUFBdEIsRUFBNEIsU0FBNUIsRUFBdUM7QUFDbkNnQyxNQUFBQSxZQUFZLEVBQUUsSUFEcUI7QUFFbkNDLE1BQUFBLFVBQVUsRUFBRSxJQUZ1QjtBQUduQ0MsTUFBQUEsUUFBUSxFQUFFLElBSHlCO0FBSW5DQyxNQUFBQSxLQUFLLEVBQUUsU0FBU0MsT0FBVCxHQUFtQjtBQUN0QixZQUFJQyxNQUFNLEdBQUdDLEtBQUssQ0FBQzlDLFNBQU4sQ0FBZ0IrQyxLQUFoQixDQUFzQkMsSUFBdEIsQ0FBMkJDLFNBQTNCLENBQWI7QUFBQSxZQUNJQyxPQUFPLEdBQUcvQyxRQUFRLENBQUNnRCxzQkFBVCxFQURkO0FBR0FOLFFBQUFBLE1BQU0sQ0FBQ1QsT0FBUCxDQUFlLFVBQVNnQixPQUFULEVBQWtCO0FBQzdCLGNBQUlDLE1BQU0sR0FBR0QsT0FBTyxZQUFZRSxJQUFoQztBQUNBSixVQUFBQSxPQUFPLENBQUNLLFdBQVIsQ0FBb0JGLE1BQU0sR0FBR0QsT0FBSCxHQUFhakQsUUFBUSxDQUFDcUQsY0FBVCxDQUF3QkMsTUFBTSxDQUFDTCxPQUFELENBQTlCLENBQXZDO0FBQ0gsU0FIRDtBQUtBLGFBQUtNLFlBQUwsQ0FBa0JSLE9BQWxCLEVBQTJCLEtBQUtTLFVBQWhDO0FBQ0g7QUFka0MsS0FBdkM7QUFnQkgsR0FwQkQ7QUFxQkgsQ0F0QkQsRUFzQkcsQ0FBQzVELE9BQU8sQ0FBQ0MsU0FBVCxFQUFvQjRELFFBQVEsQ0FBQzVELFNBQTdCLEVBQXdDNkQsZ0JBQWdCLENBQUM3RCxTQUF6RCxDQXRCSCxFLENBd0JBOzs7QUFDQSxJQUFJRCxPQUFPLENBQUNDLFNBQVIsQ0FBa0I4RCxpQkFBbEIsSUFBdUNDLFNBQTNDLEVBQXNEO0FBQ3BEaEUsRUFBQUEsT0FBTyxDQUFDQyxTQUFSLENBQWtCOEQsaUJBQWxCLEdBQXNDLFlBQVk7QUFDaEQsUUFBSUUsVUFBVSxHQUFHLEtBQUtBLFVBQXRCO0FBQ0EsUUFBSXpELE1BQU0sR0FBR3lELFVBQVUsQ0FBQ3pELE1BQXhCO0FBQ0EsUUFBSTBELE1BQU0sR0FBRyxJQUFJbkIsS0FBSixDQUFVdkMsTUFBVixDQUFiOztBQUNBLFNBQUssSUFBSUQsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0MsTUFBcEIsRUFBNEJELENBQUMsRUFBN0IsRUFBaUM7QUFDL0IyRCxNQUFBQSxNQUFNLENBQUMzRCxDQUFELENBQU4sR0FBWTBELFVBQVUsQ0FBQzFELENBQUQsQ0FBVixDQUFjNEQsSUFBMUI7QUFDRDs7QUFDRCxXQUFPRCxNQUFQO0FBQ0QsR0FSRDtBQVNELEMsQ0FFRDs7O0FBQ0FqRCxNQUFNLENBQUNtRCxzQkFBUCxHQUFnQyxFQUFoQztBQUNBbkQsTUFBTSxDQUFDb0Qsd0JBQVAsR0FBa0MsQ0FBbEM7QUFDQXBELE1BQU0sQ0FBQ3FELDRCQUFQLEdBQXNDLEVBQXRDOztBQUVBLElBQUlDLE1BQU0sR0FBRyxZQUFXO0FBQ3BCLE1BQUlDLGNBQWMsR0FBRyxFQUFyQjtBQUVBO0FBQ0o7QUFDQTtBQUNBOztBQUNJLE1BQUlDLG9CQUFvQixHQUFHLFNBQXZCQSxvQkFBdUIsR0FBVztBQUNsQyxRQUFJQyxrQkFBa0IsR0FBRyxTQUFyQkEsa0JBQXFCLEdBQVc7QUFDaEM7QUFDQSxXQUFLLElBQUluRSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHaUUsY0FBYyxDQUFDaEUsTUFBbkMsRUFBMkNELENBQUMsRUFBNUMsRUFBZ0Q7QUFDNUMsWUFBSW9FLElBQUksR0FBR0gsY0FBYyxDQUFDakUsQ0FBRCxDQUF6QjtBQUNBb0UsUUFBQUEsSUFBSSxDQUFDMUIsSUFBTDtBQUNIO0FBQ0osS0FORDs7QUFRQSxRQUFJMkIsS0FBSjtBQUVBM0QsSUFBQUEsTUFBTSxDQUFDNEQsZ0JBQVAsQ0FBd0IsUUFBeEIsRUFBa0MsWUFBVztBQUN6Q04sTUFBQUEsTUFBTSxDQUFDTyxRQUFQLENBQWdCRixLQUFoQixFQUF1QixZQUFXO0FBQzlCRixRQUFBQSxrQkFBa0I7QUFDckIsT0FGRCxFQUVHLEdBRkg7QUFHSCxLQUpEO0FBS0gsR0FoQkQ7O0FBa0JBLFNBQU87QUFDSDtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ1E7QUFDQUssSUFBQUEsSUFBSSxFQUFFLGNBQVNDLFFBQVQsRUFBbUI7QUFDckJQLE1BQUFBLG9CQUFvQjtBQUN2QixLQVRFOztBQVdIO0FBQ1I7QUFDQTtBQUNBO0FBQ1FRLElBQUFBLGdCQUFnQixFQUFFLDBCQUFTdkQsUUFBVCxFQUFtQjtBQUNqQzhDLE1BQUFBLGNBQWMsQ0FBQ1UsSUFBZixDQUFvQnhELFFBQXBCO0FBQ0gsS0FqQkU7O0FBbUJIO0FBQ1I7QUFDQTtBQUNBO0FBQ1F5RCxJQUFBQSxtQkFBbUIsRUFBRSw2QkFBU3pELFFBQVQsRUFBbUI7QUFDcEMsV0FBSyxJQUFJbkIsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR2lFLGNBQWMsQ0FBQ2hFLE1BQW5DLEVBQTJDRCxDQUFDLEVBQTVDLEVBQWdEO0FBQzVDLFlBQUltQixRQUFRLEtBQUs4QyxjQUFjLENBQUNqRSxDQUFELENBQS9CLEVBQW9DO0FBQ2hDLGlCQUFPaUUsY0FBYyxDQUFDakUsQ0FBRCxDQUFyQjtBQUNIO0FBQ0o7QUFDSixLQTdCRTs7QUErQkg7QUFDUjtBQUNBO0FBQ1E2RSxJQUFBQSxpQkFBaUIsRUFBRSw2QkFBVztBQUMxQlYsTUFBQUEsa0JBQWtCO0FBQ3JCLEtBcENFO0FBc0NIVyxJQUFBQSxNQUFNLEVBQUUsa0JBQVc7QUFDZixVQUFJLE9BQU9DLEtBQVAsS0FBa0IsVUFBdEIsRUFBa0M7QUFDOUI7QUFDQXJFLFFBQUFBLE1BQU0sQ0FBQ3NFLGFBQVAsQ0FBcUIsSUFBSUQsS0FBSixDQUFVLFFBQVYsQ0FBckI7QUFDSCxPQUhELE1BR087QUFDSDtBQUNBO0FBQ0EsWUFBSUUsR0FBRyxHQUFHdkUsTUFBTSxDQUFDYixRQUFQLENBQWdCcUYsV0FBaEIsQ0FBNEIsVUFBNUIsQ0FBVjtBQUNBRCxRQUFBQSxHQUFHLENBQUNFLFdBQUosQ0FBZ0IsUUFBaEIsRUFBMEIsSUFBMUIsRUFBZ0MsS0FBaEMsRUFBdUN6RSxNQUF2QyxFQUErQyxDQUEvQztBQUNBQSxRQUFBQSxNQUFNLENBQUNzRSxhQUFQLENBQXFCQyxHQUFyQjtBQUNIO0FBQ0osS0FqREU7O0FBbURIO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDUUcsSUFBQUEsV0FBVyxFQUFFLHFCQUFTQyxTQUFULEVBQW9CO0FBQzdCLFVBQUlDLFlBQVksR0FBRzVFLE1BQU0sQ0FBQzZFLFFBQVAsQ0FBZ0JDLE1BQWhCLENBQXVCQyxTQUF2QixDQUFpQyxDQUFqQyxDQUFuQjtBQUFBLFVBQ0l6RixDQURKO0FBQUEsVUFDTzBGLEdBRFA7QUFBQSxVQUNZQyxNQUFNLEdBQUdMLFlBQVksQ0FBQ00sS0FBYixDQUFtQixHQUFuQixDQURyQjs7QUFHQSxXQUFLNUYsQ0FBQyxHQUFHLENBQVQsRUFBWUEsQ0FBQyxHQUFHMkYsTUFBTSxDQUFDMUYsTUFBdkIsRUFBK0JELENBQUMsRUFBaEMsRUFBb0M7QUFDaEMwRixRQUFBQSxHQUFHLEdBQUdDLE1BQU0sQ0FBQzNGLENBQUQsQ0FBTixDQUFVNEYsS0FBVixDQUFnQixHQUFoQixDQUFOOztBQUNBLFlBQUlGLEdBQUcsQ0FBQyxDQUFELENBQUgsSUFBVUwsU0FBZCxFQUF5QjtBQUNyQixpQkFBT1EsUUFBUSxDQUFDSCxHQUFHLENBQUMsQ0FBRCxDQUFKLENBQWY7QUFDSDtBQUNKOztBQUVELGFBQU8sSUFBUDtBQUNILEtBcEVFOztBQXNFSDtBQUNSO0FBQ0E7QUFDQTtBQUNRSSxJQUFBQSxjQUFjLEVBQUUsMEJBQVc7QUFDdkIsVUFBSUMsSUFBSSxHQUFJLEtBQUtDLFdBQUwsR0FBbUJDLEtBQW5CLEdBQTJCLEtBQUtDLGFBQUwsQ0FBbUIsSUFBbkIsQ0FBM0IsR0FBc0QsSUFBdEQsR0FBNkQsS0FBekU7O0FBRUEsVUFBSUgsSUFBSSxLQUFLLEtBQWIsRUFBb0I7QUFDaEI7QUFDQUEsUUFBQUEsSUFBSSxHQUFHSSxTQUFTLENBQUNDLFNBQVYsQ0FBb0JDLEtBQXBCLENBQTBCLE9BQTFCLEtBQXNDLElBQTdDO0FBQ0g7O0FBRUQsYUFBT04sSUFBUDtBQUNILEtBbkZFOztBQXFGSDtBQUNSO0FBQ0E7QUFDQTtBQUNRTyxJQUFBQSxlQUFlLEVBQUUsMkJBQVc7QUFDeEIsYUFBT3RDLE1BQU0sQ0FBQzhCLGNBQVAsS0FBMEIsS0FBMUIsR0FBa0MsSUFBekM7QUFDSCxLQTNGRTs7QUE2Rkg7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNRRSxJQUFBQSxXQUFXLEVBQUUsdUJBQVc7QUFDcEIsVUFBSU8sQ0FBQyxHQUFHN0YsTUFBUjtBQUFBLFVBQ0k4RixDQUFDLEdBQUcsT0FEUjs7QUFFQSxVQUFJLEVBQUUsZ0JBQWdCOUYsTUFBbEIsQ0FBSixFQUErQjtBQUMzQjhGLFFBQUFBLENBQUMsR0FBRyxRQUFKO0FBQ0FELFFBQUFBLENBQUMsR0FBRzFHLFFBQVEsQ0FBQ1MsZUFBVCxJQUE0QlQsUUFBUSxDQUFDNEcsSUFBekM7QUFDSDs7QUFFRCxhQUFPO0FBQ0hSLFFBQUFBLEtBQUssRUFBRU0sQ0FBQyxDQUFDQyxDQUFDLEdBQUcsT0FBTCxDQURMO0FBRUhFLFFBQUFBLE1BQU0sRUFBRUgsQ0FBQyxDQUFDQyxDQUFDLEdBQUcsUUFBTDtBQUZOLE9BQVA7QUFJSCxLQTlHRTs7QUFnSFQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1FHLElBQUFBLGNBQWMsRUFBRSx3QkFBU0MsSUFBVCxFQUFlO0FBQzNCLFVBQUlYLEtBQUssR0FBRyxLQUFLRCxXQUFMLEdBQW1CQyxLQUEvQjtBQUNULFVBQUlZLFVBQVUsR0FBRyxLQUFLWCxhQUFMLENBQW1CVSxJQUFuQixDQUFqQjtBQUVBLGFBQVFYLEtBQUssSUFBSVksVUFBakI7QUFDTSxLQTNIRTtBQTZIVEMsSUFBQUEsZ0JBQWdCLEVBQUUsMEJBQVNGLElBQVQsRUFBZTtBQUN2QixVQUFJWCxLQUFLLEdBQUcsS0FBS0QsV0FBTCxHQUFtQkMsS0FBL0I7QUFDVCxVQUFJWSxVQUFVLEdBQUcsS0FBS1gsYUFBTCxDQUFtQlUsSUFBbkIsQ0FBakI7QUFFQSxhQUFRWCxLQUFLLEdBQUdZLFVBQWhCO0FBQ00sS0FsSUU7QUFvSUhFLElBQUFBLGdCQUFnQixFQUFFLDRCQUFXO0FBQ3pCLGFBQU8sS0FBS2YsV0FBTCxHQUFtQkMsS0FBMUI7QUFDSCxLQXRJRTs7QUF3SUg7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNRZSxJQUFBQSxXQUFXLEVBQUUscUJBQVNDLE1BQVQsRUFBaUI7QUFDMUIsYUFBT0EsTUFBTSxHQUFHekYsSUFBSSxDQUFDMEYsS0FBTCxDQUFXMUYsSUFBSSxDQUFDMkYsTUFBTCxLQUFpQixJQUFJOUYsSUFBSixFQUFELENBQWFDLE9BQWIsRUFBM0IsQ0FBaEI7QUFDSCxLQS9JRTs7QUFpSkg7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNRNEUsSUFBQUEsYUFBYSxFQUFFLHVCQUFTVyxVQUFULEVBQXFCO0FBQ2hDLFVBQUl4RSxLQUFLLEdBQUcsS0FBSytFLG1CQUFMLENBQXlCLFVBQVVQLFVBQW5DLENBQVo7O0FBRUEsVUFBS3hFLEtBQUwsRUFBYTtBQUNUQSxRQUFBQSxLQUFLLEdBQUdnRixRQUFRLENBQUNoRixLQUFLLENBQUNpRixJQUFOLEVBQUQsQ0FBaEI7QUFDSDs7QUFFRCxhQUFPakYsS0FBUDtBQUNILEtBOUpFOztBQWdLSDtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDUWtGLElBQUFBLEtBQUssRUFBRSxlQUFTQyxHQUFULEVBQWNDLElBQWQsRUFBb0I7QUFDdkIsVUFBSUMsS0FBSjtBQUVBRCxNQUFBQSxJQUFJLEdBQUdBLElBQUksSUFBSSxFQUFmOztBQUVBLFVBQUlBLElBQUksQ0FBQ0UsT0FBTCxDQUFhLEdBQWIsTUFBc0IsQ0FBQyxDQUEzQixFQUE4QjtBQUMxQixjQUFNLElBQUlDLEtBQUosQ0FBVSxtQ0FBVixDQUFOO0FBQ0g7O0FBRURILE1BQUFBLElBQUksR0FBR0EsSUFBSSxDQUFDN0IsS0FBTCxDQUFXLEdBQVgsQ0FBUDs7QUFFQSxTQUFHO0FBQ0MsWUFBSTRCLEdBQUcsS0FBSy9ELFNBQVosRUFBdUI7QUFDbkIsaUJBQU8sS0FBUDtBQUNIOztBQUVEaUUsUUFBQUEsS0FBSyxHQUFHRCxJQUFJLENBQUNJLEtBQUwsRUFBUjs7QUFFQSxZQUFJLENBQUNMLEdBQUcsQ0FBQ3pGLGNBQUosQ0FBbUIyRixLQUFuQixDQUFMLEVBQWdDO0FBQzVCLGlCQUFPLEtBQVA7QUFDSDs7QUFFREYsUUFBQUEsR0FBRyxHQUFHQSxHQUFHLENBQUNFLEtBQUQsQ0FBVDtBQUVILE9BYkQsUUFhU0QsSUFBSSxDQUFDeEgsTUFiZDs7QUFlQSxhQUFPLElBQVA7QUFDSCxLQWpNRTs7QUFtTUg7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNRNkgsSUFBQUEsZ0JBQWdCLEVBQUUsMEJBQVMxSCxFQUFULEVBQWE7QUFDM0IsVUFBSTJILFFBQUosRUFBYzFGLEtBQWQ7O0FBRUEsYUFBT2pDLEVBQUUsSUFBSUEsRUFBRSxLQUFLUCxRQUFwQixFQUE4QjtBQUMxQjtBQUNBO0FBQ0E7QUFDQWtJLFFBQUFBLFFBQVEsR0FBRy9ELE1BQU0sQ0FBQ2dFLEdBQVAsQ0FBVzVILEVBQVgsRUFBZSxVQUFmLENBQVg7O0FBRUEsWUFBSTJILFFBQVEsS0FBSyxVQUFiLElBQTJCQSxRQUFRLEtBQUssVUFBeEMsSUFBc0RBLFFBQVEsS0FBSyxPQUF2RSxFQUFnRjtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBMUYsVUFBQUEsS0FBSyxHQUFHZ0YsUUFBUSxDQUFDckQsTUFBTSxDQUFDZ0UsR0FBUCxDQUFXNUgsRUFBWCxFQUFlLFNBQWYsQ0FBRCxDQUFoQjs7QUFFQSxjQUFJLENBQUM2SCxLQUFLLENBQUM1RixLQUFELENBQU4sSUFBaUJBLEtBQUssS0FBSyxDQUEvQixFQUFrQztBQUM5QixtQkFBT0EsS0FBUDtBQUNIO0FBQ0o7O0FBRURqQyxRQUFBQSxFQUFFLEdBQUdBLEVBQUUsQ0FBQ1EsVUFBUjtBQUNIOztBQUVELGFBQU8sQ0FBUDtBQUNILEtBak9FOztBQW1PSDtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ1FzSCxJQUFBQSx3QkFBd0IsRUFBRSxrQ0FBUzlILEVBQVQsRUFBYTtBQUNuQyxVQUFJMkgsUUFBSjs7QUFFQSxhQUFPM0gsRUFBRSxJQUFJQSxFQUFFLEtBQUtQLFFBQXBCLEVBQThCO0FBQzFCa0ksUUFBQUEsUUFBUSxHQUFHL0QsTUFBTSxDQUFDZ0UsR0FBUCxDQUFXNUgsRUFBWCxFQUFlLFVBQWYsQ0FBWDs7QUFFQSxZQUFJMkgsUUFBUSxLQUFLLE9BQWpCLEVBQTBCO0FBQ3RCLGlCQUFPLElBQVA7QUFDSDs7QUFFRDNILFFBQUFBLEVBQUUsR0FBR0EsRUFBRSxDQUFDUSxVQUFSO0FBQ0g7O0FBRUQsYUFBTyxLQUFQO0FBQ0gsS0F0UEU7O0FBd1BIO0FBQ1I7QUFDQTtBQUNRdUgsSUFBQUEsS0FBSyxFQUFFLGVBQVNDLFlBQVQsRUFBdUI7QUFDMUIsVUFBSUMsS0FBSyxHQUFHLElBQUloSCxJQUFKLEdBQVdDLE9BQVgsRUFBWjs7QUFDQSxXQUFLLElBQUl0QixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEdBQXBCLEVBQXlCQSxDQUFDLEVBQTFCLEVBQThCO0FBQzFCLFlBQUssSUFBSXFCLElBQUosR0FBV0MsT0FBWCxLQUF1QitHLEtBQXhCLEdBQWlDRCxZQUFyQyxFQUFtRDtBQUMvQztBQUNIO0FBQ0o7QUFDSixLQWxRRTs7QUFvUUg7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ1FFLElBQUFBLFlBQVksRUFBRSxzQkFBU0MsR0FBVCxFQUFjOUcsR0FBZCxFQUFtQjtBQUM3QixhQUFPRCxJQUFJLENBQUMwRixLQUFMLENBQVcxRixJQUFJLENBQUMyRixNQUFMLE1BQWlCMUYsR0FBRyxHQUFHOEcsR0FBTixHQUFZLENBQTdCLENBQVgsSUFBOENBLEdBQXJEO0FBQ0gsS0E1UUU7O0FBOFFIO0FBQ1I7QUFDQTtBQUNBO0FBQ1FDLElBQUFBLGdCQUFnQixFQUFFLDRCQUFXO0FBQ3pCLGFBQU85SCxNQUFNLENBQUMrSCxJQUFQLEtBQWdCaEYsU0FBaEIsR0FBNEIsSUFBNUIsR0FBbUMsS0FBMUM7QUFDSCxLQXBSRTtBQXNSSDtBQUNBaUYsSUFBQUEsVUFBVSxFQUFFLG9CQUFTQyxHQUFULEVBQWM7QUFDdEJBLE1BQUFBLEdBQUcsR0FBR0EsR0FBRyxJQUFJLEVBQWI7O0FBRUEsV0FBSyxJQUFJM0ksQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzJDLFNBQVMsQ0FBQzFDLE1BQTlCLEVBQXNDRCxDQUFDLEVBQXZDLEVBQTJDO0FBQ3ZDLFlBQUl3SCxHQUFHLEdBQUc3RSxTQUFTLENBQUMzQyxDQUFELENBQW5CO0FBQ0EsWUFBSSxDQUFDd0gsR0FBTCxFQUFVOztBQUVWLGFBQUssSUFBSW9CLEdBQVQsSUFBZ0JwQixHQUFoQixFQUFxQjtBQUNqQixjQUFJLENBQUNBLEdBQUcsQ0FBQ3pGLGNBQUosQ0FBbUI2RyxHQUFuQixDQUFMLEVBQThCO0FBQzFCO0FBQ0gsV0FIZ0IsQ0FLakI7OztBQUNBLGNBQUs1RyxNQUFNLENBQUN0QyxTQUFQLENBQWlCbUosUUFBakIsQ0FBMEJuRyxJQUExQixDQUErQjhFLEdBQUcsQ0FBQ29CLEdBQUQsQ0FBbEMsTUFBNkMsaUJBQWxELEVBQXNFO0FBQ2xFRCxZQUFBQSxHQUFHLENBQUNDLEdBQUQsQ0FBSCxHQUFXNUUsTUFBTSxDQUFDMEUsVUFBUCxDQUFrQkMsR0FBRyxDQUFDQyxHQUFELENBQXJCLEVBQTRCcEIsR0FBRyxDQUFDb0IsR0FBRCxDQUEvQixDQUFYO0FBQ0E7QUFDSDs7QUFFREQsVUFBQUEsR0FBRyxDQUFDQyxHQUFELENBQUgsR0FBV3BCLEdBQUcsQ0FBQ29CLEdBQUQsQ0FBZDtBQUNIO0FBQ0o7O0FBRUQsYUFBT0QsR0FBUDtBQUNILEtBOVNFO0FBZ1RIO0FBQ0FHLElBQUFBLE1BQU0sRUFBRSxnQkFBU0gsR0FBVCxFQUFjO0FBQ2xCQSxNQUFBQSxHQUFHLEdBQUdBLEdBQUcsSUFBSSxFQUFiOztBQUVBLFdBQUssSUFBSTNJLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcyQyxTQUFTLENBQUMxQyxNQUE5QixFQUFzQ0QsQ0FBQyxFQUF2QyxFQUEyQztBQUN2QyxZQUFJLENBQUMyQyxTQUFTLENBQUMzQyxDQUFELENBQWQsRUFDSTs7QUFFSixhQUFLLElBQUk0SSxHQUFULElBQWdCakcsU0FBUyxDQUFDM0MsQ0FBRCxDQUF6QixFQUE4QjtBQUMxQixjQUFJMkMsU0FBUyxDQUFDM0MsQ0FBRCxDQUFULENBQWErQixjQUFiLENBQTRCNkcsR0FBNUIsQ0FBSixFQUNJRCxHQUFHLENBQUNDLEdBQUQsQ0FBSCxHQUFXakcsU0FBUyxDQUFDM0MsQ0FBRCxDQUFULENBQWE0SSxHQUFiLENBQVg7QUFDUDtBQUNKOztBQUVELGFBQU9ELEdBQVA7QUFDSCxLQS9URTtBQWlVSEksSUFBQUEsT0FBTyxFQUFFLG1CQUFXO0FBQ2hCLGFBQU9sSixRQUFRLENBQUNtSixvQkFBVCxDQUE4QixNQUE5QixFQUFzQyxDQUF0QyxDQUFQO0FBQ0gsS0FuVUU7O0FBcVVIO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNRQyxJQUFBQSxVQUFVLEVBQUUsb0JBQVM3SSxFQUFULEVBQWE4SSxPQUFiLEVBQXNCO0FBQzlCLFVBQUksQ0FBQzlJLEVBQUwsRUFBUztBQUNMO0FBQ0g7O0FBRUQsVUFBSStJLFVBQVUsR0FBR0QsT0FBTyxDQUFDdEQsS0FBUixDQUFjLEdBQWQsQ0FBakI7O0FBRUEsV0FBSyxJQUFJNUYsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR21KLFVBQVUsQ0FBQ2xKLE1BQS9CLEVBQXVDRCxDQUFDLEVBQXhDLEVBQTRDO0FBQ3hDLFlBQUlnRSxNQUFNLENBQUNvRixRQUFQLENBQWdCaEosRUFBaEIsRUFBb0I0RCxNQUFNLENBQUNzRCxJQUFQLENBQVk2QixVQUFVLENBQUNuSixDQUFELENBQXRCLENBQXBCLEtBQW1ELEtBQXZELEVBQThEO0FBQzFELGlCQUFPLEtBQVA7QUFDSDtBQUNKOztBQUVELGFBQU8sSUFBUDtBQUNILEtBelZFO0FBMlZIb0osSUFBQUEsUUFBUSxFQUFFLGtCQUFTaEosRUFBVCxFQUFhaUosU0FBYixFQUF3QjtBQUM5QixVQUFJLENBQUNqSixFQUFMLEVBQVM7QUFDTDtBQUNIOztBQUVELGFBQU9BLEVBQUUsQ0FBQ2tKLFNBQUgsR0FBZWxKLEVBQUUsQ0FBQ2tKLFNBQUgsQ0FBYS9JLFFBQWIsQ0FBc0I4SSxTQUF0QixDQUFmLEdBQWtELElBQUlFLE1BQUosQ0FBVyxRQUFRRixTQUFSLEdBQW9CLEtBQS9CLEVBQXNDdEQsSUFBdEMsQ0FBMkMzRixFQUFFLENBQUNpSixTQUE5QyxDQUF6RDtBQUNILEtBaldFO0FBbVdIRyxJQUFBQSxRQUFRLEVBQUUsa0JBQVNwSixFQUFULEVBQWFpSixTQUFiLEVBQXdCO0FBQzlCLFVBQUksQ0FBQ2pKLEVBQUQsSUFBTyxPQUFPaUosU0FBUCxLQUFxQixXQUFoQyxFQUE2QztBQUN6QztBQUNIOztBQUVELFVBQUlJLFVBQVUsR0FBR0osU0FBUyxDQUFDekQsS0FBVixDQUFnQixHQUFoQixDQUFqQjs7QUFFQSxVQUFJeEYsRUFBRSxDQUFDa0osU0FBUCxFQUFrQjtBQUNkLGFBQUssSUFBSXRKLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUd5SixVQUFVLENBQUN4SixNQUEvQixFQUF1Q0QsQ0FBQyxFQUF4QyxFQUE0QztBQUN4QyxjQUFJeUosVUFBVSxDQUFDekosQ0FBRCxDQUFWLElBQWlCeUosVUFBVSxDQUFDekosQ0FBRCxDQUFWLENBQWNDLE1BQWQsR0FBdUIsQ0FBNUMsRUFBK0M7QUFDM0NHLFlBQUFBLEVBQUUsQ0FBQ2tKLFNBQUgsQ0FBYUksR0FBYixDQUFpQjFGLE1BQU0sQ0FBQ3NELElBQVAsQ0FBWW1DLFVBQVUsQ0FBQ3pKLENBQUQsQ0FBdEIsQ0FBakI7QUFDSDtBQUNKO0FBQ0osT0FORCxNQU1PLElBQUksQ0FBQ2dFLE1BQU0sQ0FBQ29GLFFBQVAsQ0FBZ0JoSixFQUFoQixFQUFvQmlKLFNBQXBCLENBQUwsRUFBcUM7QUFDeEMsYUFBSyxJQUFJckksQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR3lJLFVBQVUsQ0FBQ3hKLE1BQS9CLEVBQXVDZSxDQUFDLEVBQXhDLEVBQTRDO0FBQ3hDWixVQUFBQSxFQUFFLENBQUNpSixTQUFILElBQWdCLE1BQU1yRixNQUFNLENBQUNzRCxJQUFQLENBQVltQyxVQUFVLENBQUN6SSxDQUFELENBQXRCLENBQXRCO0FBQ0g7QUFDSjtBQUNKLEtBclhFO0FBdVhIMkksSUFBQUEsV0FBVyxFQUFFLHFCQUFTdkosRUFBVCxFQUFhaUosU0FBYixFQUF3QjtBQUNuQyxVQUFJLENBQUNqSixFQUFELElBQU8sT0FBT2lKLFNBQVAsS0FBcUIsV0FBaEMsRUFBNkM7QUFDdkM7QUFDSDs7QUFFRCxVQUFJSSxVQUFVLEdBQUdKLFNBQVMsQ0FBQ3pELEtBQVYsQ0FBZ0IsR0FBaEIsQ0FBakI7O0FBRUEsVUFBSXhGLEVBQUUsQ0FBQ2tKLFNBQVAsRUFBa0I7QUFDZCxhQUFLLElBQUl0SixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHeUosVUFBVSxDQUFDeEosTUFBL0IsRUFBdUNELENBQUMsRUFBeEMsRUFBNEM7QUFDeENJLFVBQUFBLEVBQUUsQ0FBQ2tKLFNBQUgsQ0FBYTNJLE1BQWIsQ0FBb0JxRCxNQUFNLENBQUNzRCxJQUFQLENBQVltQyxVQUFVLENBQUN6SixDQUFELENBQXRCLENBQXBCO0FBQ0g7QUFDSixPQUpELE1BSU8sSUFBSWdFLE1BQU0sQ0FBQ29GLFFBQVAsQ0FBZ0JoSixFQUFoQixFQUFvQmlKLFNBQXBCLENBQUosRUFBb0M7QUFDdkMsYUFBSyxJQUFJckksQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR3lJLFVBQVUsQ0FBQ3hKLE1BQS9CLEVBQXVDZSxDQUFDLEVBQXhDLEVBQTRDO0FBQ3hDWixVQUFBQSxFQUFFLENBQUNpSixTQUFILEdBQWVqSixFQUFFLENBQUNpSixTQUFILENBQWFPLE9BQWIsQ0FBcUIsSUFBSUwsTUFBSixDQUFXLFFBQVF2RixNQUFNLENBQUNzRCxJQUFQLENBQVltQyxVQUFVLENBQUN6SSxDQUFELENBQXRCLENBQVIsR0FBcUMsS0FBaEQsRUFBdUQsR0FBdkQsQ0FBckIsRUFBa0YsRUFBbEYsQ0FBZjtBQUNIO0FBQ0o7QUFDSixLQXZZRTtBQXlZSDZJLElBQUFBLGtCQUFrQixFQUFFLDRCQUFTekosRUFBVCxFQUFhMEosU0FBYixFQUF3QkMsSUFBeEIsRUFBOEI7QUFDOUMsVUFBSUMsS0FBSjs7QUFDQSxVQUFJdEosTUFBTSxDQUFDdUosV0FBWCxFQUF3QjtBQUNwQkQsUUFBQUEsS0FBSyxHQUFHLElBQUlDLFdBQUosQ0FBZ0JILFNBQWhCLEVBQTJCO0FBQy9CSSxVQUFBQSxNQUFNLEVBQUVIO0FBRHVCLFNBQTNCLENBQVI7QUFHSCxPQUpELE1BSU87QUFDSEMsUUFBQUEsS0FBSyxHQUFHbkssUUFBUSxDQUFDcUYsV0FBVCxDQUFxQixhQUFyQixDQUFSO0FBQ0E4RSxRQUFBQSxLQUFLLENBQUNHLGVBQU4sQ0FBc0JMLFNBQXRCLEVBQWlDLElBQWpDLEVBQXVDLElBQXZDLEVBQTZDQyxJQUE3QztBQUNIOztBQUVEM0osTUFBQUEsRUFBRSxDQUFDNEUsYUFBSCxDQUFpQmdGLEtBQWpCO0FBQ0gsS0FyWkU7QUF1WkhJLElBQUFBLFlBQVksRUFBRSxzQkFBU0MsSUFBVCxFQUFlUCxTQUFmLEVBQTBCO0FBQ3BDO0FBQ0EsVUFBSVEsR0FBSjs7QUFFQSxVQUFJRCxJQUFJLENBQUN2SyxhQUFULEVBQXdCO0FBQ3BCd0ssUUFBQUEsR0FBRyxHQUFHRCxJQUFJLENBQUN2SyxhQUFYO0FBQ0gsT0FGRCxNQUVPLElBQUl1SyxJQUFJLENBQUNFLFFBQUwsSUFBaUIsQ0FBckIsRUFBd0I7QUFDM0I7QUFDQUQsUUFBQUEsR0FBRyxHQUFHRCxJQUFOO0FBQ0gsT0FITSxNQUdBO0FBQ0gsY0FBTSxJQUFJekMsS0FBSixDQUFVLHVDQUF1Q3lDLElBQUksQ0FBQzNJLEVBQXRELENBQU47QUFDSDs7QUFFRCxVQUFJMkksSUFBSSxDQUFDckYsYUFBVCxFQUF3QjtBQUNwQjtBQUNBLFlBQUl3RixVQUFVLEdBQUcsRUFBakIsQ0FGb0IsQ0FJcEI7QUFDQTtBQUNBOztBQUNBLGdCQUFRVixTQUFSO0FBQ0EsZUFBSyxPQUFMLENBREEsQ0FDYzs7QUFDZCxlQUFLLFlBQUw7QUFDQSxlQUFLLFlBQUw7QUFDQSxlQUFLLFdBQUw7QUFDQSxlQUFLLFNBQUw7QUFDSVUsWUFBQUEsVUFBVSxHQUFHLGFBQWI7QUFDQTs7QUFFSixlQUFLLE9BQUw7QUFDQSxlQUFLLFFBQUw7QUFDQSxlQUFLLE1BQUw7QUFDQSxlQUFLLFFBQUw7QUFDSUEsWUFBQUEsVUFBVSxHQUFHLFlBQWI7QUFDQTs7QUFFSjtBQUNJLGtCQUFNLHdEQUF3RFYsU0FBeEQsR0FBb0UsSUFBMUU7QUFDQTtBQWxCSjs7QUFvQkEsWUFBSUUsS0FBSyxHQUFHTSxHQUFHLENBQUNwRixXQUFKLENBQWdCc0YsVUFBaEIsQ0FBWjtBQUVBLFlBQUlDLE9BQU8sR0FBR1gsU0FBUyxJQUFJLFFBQWIsR0FBd0IsS0FBeEIsR0FBZ0MsSUFBOUM7QUFDQUUsUUFBQUEsS0FBSyxDQUFDVSxTQUFOLENBQWdCWixTQUFoQixFQUEyQlcsT0FBM0IsRUFBb0MsSUFBcEMsRUE5Qm9CLENBOEJ1Qjs7QUFFM0NULFFBQUFBLEtBQUssQ0FBQ1csU0FBTixHQUFrQixJQUFsQixDQWhDb0IsQ0FnQ0k7QUFDeEI7O0FBQ0FOLFFBQUFBLElBQUksQ0FBQ3JGLGFBQUwsQ0FBbUJnRixLQUFuQixFQUEwQixJQUExQjtBQUNILE9BbkNELE1BbUNPLElBQUlLLElBQUksQ0FBQ08sU0FBVCxFQUFvQjtBQUN2QjtBQUNBLFlBQUlaLEtBQUssR0FBR00sR0FBRyxDQUFDTyxpQkFBSixFQUFaO0FBQ0FiLFFBQUFBLEtBQUssQ0FBQ1csU0FBTixHQUFrQixJQUFsQixDQUh1QixDQUdDOztBQUN4Qk4sUUFBQUEsSUFBSSxDQUFDTyxTQUFMLENBQWUsT0FBT2QsU0FBdEIsRUFBaUNFLEtBQWpDO0FBQ0g7QUFDSixLQTdjRTtBQStjSGMsSUFBQUEsS0FBSyxFQUFFLGVBQVUxSyxFQUFWLEVBQWM7QUFDakIsVUFBSTJLLENBQUMsR0FBRzNLLEVBQUUsQ0FBQ1EsVUFBSCxDQUFjb0ssUUFBdEI7QUFBQSxVQUFnQ2hMLENBQUMsR0FBRyxDQUFwQzs7QUFDQSxhQUFNQSxDQUFDLEdBQUcrSyxDQUFDLENBQUM5SyxNQUFaLEVBQW9CRCxDQUFDLEVBQXJCO0FBQ0ksWUFBSStLLENBQUMsQ0FBQy9LLENBQUQsQ0FBRCxJQUFRSSxFQUFaLEVBQWlCLE9BQU9KLENBQVA7QUFEckI7QUFFSCxLQW5kRTtBQXFkSHNILElBQUFBLElBQUksRUFBRSxjQUFTMkQsTUFBVCxFQUFpQjtBQUNuQixhQUFPQSxNQUFNLENBQUMzRCxJQUFQLEVBQVA7QUFDSCxLQXZkRTtBQXlkSDRELElBQUFBLGNBQWMsRUFBRSx3QkFBUzNFLENBQVQsRUFBWTtBQUN4QixVQUFJQSxDQUFDLENBQUM0RSxhQUFGLENBQWdCQyxPQUFoQixDQUF3QkMsU0FBNUIsRUFBdUM7QUFDbkMsZUFBTyxJQUFQO0FBQ0gsT0FGRCxNQUVPO0FBQ0g5RSxRQUFBQSxDQUFDLENBQUM0RSxhQUFGLENBQWdCQyxPQUFoQixDQUF3QkMsU0FBeEIsR0FBb0MsSUFBcEM7QUFFQSxlQUFPLEtBQVA7QUFDSDtBQUNKLEtBamVFO0FBbWVIMUssSUFBQUEsTUFBTSxFQUFFLGdCQUFTUCxFQUFULEVBQWE7QUFDakIsVUFBSUEsRUFBRSxJQUFJQSxFQUFFLENBQUNRLFVBQWIsRUFBeUI7QUFDckJSLFFBQUFBLEVBQUUsQ0FBQ1EsVUFBSCxDQUFjQyxXQUFkLENBQTBCVCxFQUExQjtBQUNIO0FBQ0osS0F2ZUU7QUF5ZUhrTCxJQUFBQSxJQUFJLEVBQUUsY0FBU0MsTUFBVCxFQUFpQkMsS0FBakIsRUFBd0I7QUFDMUIsVUFBS0QsTUFBTSxLQUFLLElBQWhCLEVBQXNCO0FBQ2xCLGVBQU9BLE1BQU0sQ0FBQ0UsYUFBUCxDQUFxQkQsS0FBckIsQ0FBUDtBQUNILE9BRkQsTUFFTztBQUNILGVBQU8sSUFBUDtBQUNIO0FBQ0osS0EvZUU7QUFpZkhFLElBQUFBLE9BQU8sRUFBRSxpQkFBU0gsTUFBVCxFQUFpQkMsS0FBakIsRUFBd0I7QUFDN0IsVUFBS0QsTUFBTSxLQUFLLElBQWhCLEVBQXVCO0FBQ25CLGVBQU9BLE1BQU0sQ0FBQ3hMLGdCQUFQLENBQXdCeUwsS0FBeEIsQ0FBUDtBQUNILE9BRkQsTUFFTztBQUNILGVBQU8sSUFBUDtBQUNIO0FBQ0osS0F2ZkU7QUF5ZkhHLElBQUFBLFdBQVcsRUFBRSxxQkFBU3ZMLEVBQVQsRUFBYXdMLGFBQWIsRUFBNEI7QUFDckMsYUFBT0EsYUFBYSxDQUFDaEwsVUFBZCxDQUF5QndDLFlBQXpCLENBQXNDaEQsRUFBdEMsRUFBMEN3TCxhQUFhLENBQUNDLFdBQXhELENBQVA7QUFDSCxLQTNmRTtBQTZmSEMsSUFBQUEsT0FBTyxFQUFFLGlCQUFTckwsSUFBVCxFQUFlc0wsUUFBZixFQUF5QjtBQUM5QjtBQUNBLFVBQUlELE9BQU8sR0FBRyxFQUFkLENBRjhCLENBSTlCOztBQUNBLGFBQVFyTCxJQUFJLElBQUlBLElBQUksS0FBS1osUUFBekIsRUFBbUNZLElBQUksR0FBR0EsSUFBSSxDQUFDRyxVQUEvQyxFQUE0RDtBQUN4RCxZQUFJbUwsUUFBSixFQUFjO0FBQ1YsY0FBSXRMLElBQUksQ0FBQ2QsT0FBTCxDQUFhb00sUUFBYixDQUFKLEVBQTRCO0FBQ3hCRCxZQUFBQSxPQUFPLENBQUNuSCxJQUFSLENBQWFsRSxJQUFiO0FBQ0g7O0FBQ0Q7QUFDSDs7QUFDRHFMLFFBQUFBLE9BQU8sQ0FBQ25ILElBQVIsQ0FBYWxFLElBQWI7QUFDSCxPQWI2QixDQWU5Qjs7O0FBQ0EsYUFBT3FMLE9BQVA7QUFDSCxLQTlnQkU7QUFnaEJIZCxJQUFBQSxRQUFRLEVBQUUsa0JBQVM1SyxFQUFULEVBQWEyTCxRQUFiLEVBQXVCQyxHQUF2QixFQUE0QjtBQUNsQyxVQUFJLENBQUM1TCxFQUFELElBQU8sQ0FBQ0EsRUFBRSxDQUFDNkwsVUFBZixFQUEyQjtBQUN2QixlQUFPLElBQVA7QUFDSDs7QUFFRCxVQUFJdEksTUFBTSxHQUFHLEVBQWI7QUFBQSxVQUNJM0QsQ0FBQyxHQUFHLENBRFI7QUFBQSxVQUVJa00sQ0FBQyxHQUFHOUwsRUFBRSxDQUFDNkwsVUFBSCxDQUFjaE0sTUFGdEI7O0FBSUEsV0FBSyxJQUFJRCxDQUFULEVBQVlBLENBQUMsR0FBR2tNLENBQWhCLEVBQW1CLEVBQUVsTSxDQUFyQixFQUF3QjtBQUNwQixZQUFJSSxFQUFFLENBQUM2TCxVQUFILENBQWNqTSxDQUFkLEVBQWlCdUssUUFBakIsSUFBNkIsQ0FBN0IsSUFBa0N2RyxNQUFNLENBQUNyRSxPQUFQLENBQWVTLEVBQUUsQ0FBQzZMLFVBQUgsQ0FBY2pNLENBQWQsQ0FBZixFQUFpQytMLFFBQWpDLEVBQTJDQyxHQUEzQyxDQUF0QyxFQUF1RjtBQUNuRnJJLFVBQUFBLE1BQU0sQ0FBQ2dCLElBQVAsQ0FBWXZFLEVBQUUsQ0FBQzZMLFVBQUgsQ0FBY2pNLENBQWQsQ0FBWjtBQUNIO0FBQ0o7O0FBRUQsYUFBTzJELE1BQVA7QUFDSCxLQWhpQkU7QUFraUJId0ksSUFBQUEsS0FBSyxFQUFFLGVBQVMvTCxFQUFULEVBQWEyTCxRQUFiLEVBQXVCQyxHQUF2QixFQUE0QjtBQUMvQixVQUFJaEIsUUFBUSxHQUFHaEgsTUFBTSxDQUFDZ0gsUUFBUCxDQUFnQjVLLEVBQWhCLEVBQW9CMkwsUUFBcEIsRUFBOEJDLEdBQTlCLENBQWY7QUFFQSxhQUFPaEIsUUFBUSxHQUFHQSxRQUFRLENBQUMsQ0FBRCxDQUFYLEdBQWlCLElBQWhDO0FBQ0gsS0F0aUJFO0FBd2lCSHJMLElBQUFBLE9BQU8sRUFBRSxpQkFBU1MsRUFBVCxFQUFhMkwsUUFBYixFQUF1QkMsR0FBdkIsRUFBNEI7QUFDakMsVUFBSUksQ0FBQyxHQUFHM00sT0FBTyxDQUFDQyxTQUFoQjs7QUFDQSxVQUFJMk0sQ0FBQyxHQUFHRCxDQUFDLENBQUN6TSxPQUFGLElBQWF5TSxDQUFDLENBQUNFLHFCQUFmLElBQXdDRixDQUFDLENBQUNHLGtCQUExQyxJQUFnRUgsQ0FBQyxDQUFDSSxpQkFBbEUsSUFBdUYsVUFBUzVNLENBQVQsRUFBWTtBQUN2RyxlQUFPLEdBQUcrSCxPQUFILENBQVdqRixJQUFYLENBQWdCN0MsUUFBUSxDQUFDRSxnQkFBVCxDQUEwQkgsQ0FBMUIsQ0FBaEIsRUFBOEMsSUFBOUMsTUFBd0QsQ0FBQyxDQUFoRTtBQUNILE9BRkQ7O0FBSUEsVUFBSVEsRUFBRSxJQUFJQSxFQUFFLENBQUNxTSxPQUFiLEVBQXNCO0FBQ2xCLGVBQU9KLENBQUMsQ0FBQzNKLElBQUYsQ0FBT3RDLEVBQVAsRUFBVzJMLFFBQVgsQ0FBUDtBQUNILE9BRkQsTUFFTztBQUNILGVBQU8sS0FBUDtBQUNIO0FBQ0osS0FuakJFO0FBcWpCSGhDLElBQUFBLElBQUksRUFBRSxjQUFTM0osRUFBVCxFQUFhO0FBQ2YsYUFBTztBQUNIc00sUUFBQUEsR0FBRyxFQUFFLGFBQVM5SSxJQUFULEVBQWVtRyxJQUFmLEVBQXFCO0FBQ3RCLGNBQUksQ0FBQzNKLEVBQUwsRUFBUztBQUNMO0FBQ0g7O0FBRUQsY0FBSUEsRUFBRSxDQUFDdU0sYUFBSCxLQUFxQmxKLFNBQXpCLEVBQW9DO0FBQ2hDL0MsWUFBQUEsTUFBTSxDQUFDb0Qsd0JBQVA7QUFDQTFELFlBQUFBLEVBQUUsQ0FBQ3VNLGFBQUgsR0FBbUJqTSxNQUFNLENBQUNvRCx3QkFBMUI7QUFDSDs7QUFFRCxjQUFJcEQsTUFBTSxDQUFDbUQsc0JBQVAsQ0FBOEJ6RCxFQUFFLENBQUN1TSxhQUFqQyxNQUFvRGxKLFNBQXhELEVBQW1FO0FBQy9EL0MsWUFBQUEsTUFBTSxDQUFDbUQsc0JBQVAsQ0FBOEJ6RCxFQUFFLENBQUN1TSxhQUFqQyxJQUFrRCxFQUFsRDtBQUNIOztBQUVEak0sVUFBQUEsTUFBTSxDQUFDbUQsc0JBQVAsQ0FBOEJ6RCxFQUFFLENBQUN1TSxhQUFqQyxFQUFnRC9JLElBQWhELElBQXdEbUcsSUFBeEQ7QUFDSCxTQWhCRTtBQWtCSDZDLFFBQUFBLEdBQUcsRUFBRSxhQUFTaEosSUFBVCxFQUFlO0FBQ2hCLGNBQUksQ0FBQ3hELEVBQUwsRUFBUztBQUNMO0FBQ0g7O0FBRUQsY0FBSUEsRUFBRSxDQUFDdU0sYUFBSCxLQUFxQmxKLFNBQXpCLEVBQW9DO0FBQ2hDLG1CQUFPLElBQVA7QUFDSDs7QUFFRCxpQkFBTyxLQUFLb0osR0FBTCxDQUFTakosSUFBVCxJQUFpQmxELE1BQU0sQ0FBQ21ELHNCQUFQLENBQThCekQsRUFBRSxDQUFDdU0sYUFBakMsRUFBZ0QvSSxJQUFoRCxDQUFqQixHQUF5RSxJQUFoRjtBQUNILFNBNUJFO0FBOEJIaUosUUFBQUEsR0FBRyxFQUFFLGFBQVNqSixJQUFULEVBQWU7QUFDaEIsY0FBSSxDQUFDeEQsRUFBTCxFQUFTO0FBQ0wsbUJBQU8sS0FBUDtBQUNIOztBQUVELGNBQUlBLEVBQUUsQ0FBQ3VNLGFBQUgsS0FBcUJsSixTQUF6QixFQUFvQztBQUNoQyxtQkFBTyxLQUFQO0FBQ0g7O0FBRUQsaUJBQVEvQyxNQUFNLENBQUNtRCxzQkFBUCxDQUE4QnpELEVBQUUsQ0FBQ3VNLGFBQWpDLEtBQW1Eak0sTUFBTSxDQUFDbUQsc0JBQVAsQ0FBOEJ6RCxFQUFFLENBQUN1TSxhQUFqQyxFQUFnRC9JLElBQWhELENBQXBELEdBQTZHLElBQTdHLEdBQW9ILEtBQTNIO0FBQ0gsU0F4Q0U7QUEwQ0hqRCxRQUFBQSxNQUFNLEVBQUUsZ0JBQVNpRCxJQUFULEVBQWU7QUFDbkIsY0FBSXhELEVBQUUsSUFBSSxLQUFLeU0sR0FBTCxDQUFTakosSUFBVCxDQUFWLEVBQTBCO0FBQ3RCLG1CQUFPbEQsTUFBTSxDQUFDbUQsc0JBQVAsQ0FBOEJ6RCxFQUFFLENBQUN1TSxhQUFqQyxFQUFnRC9JLElBQWhELENBQVA7QUFDSDtBQUNKO0FBOUNFLE9BQVA7QUFnREgsS0F0bUJFO0FBd21CSGtKLElBQUFBLFVBQVUsRUFBRSxvQkFBUzFNLEVBQVQsRUFBYTJNLE1BQWIsRUFBcUI7QUFDN0IsVUFBSTlHLEtBQUo7O0FBRUEsVUFBSThHLE1BQU0sS0FBSyxJQUFmLEVBQXFCO0FBQ2pCOUcsUUFBQUEsS0FBSyxHQUFHK0csVUFBVSxDQUFDNU0sRUFBRSxDQUFDNk0sV0FBSixDQUFsQjtBQUNBaEgsUUFBQUEsS0FBSyxJQUFJK0csVUFBVSxDQUFDaEosTUFBTSxDQUFDZ0UsR0FBUCxDQUFXNUgsRUFBWCxFQUFlLGFBQWYsQ0FBRCxDQUFWLEdBQTRDNE0sVUFBVSxDQUFDaEosTUFBTSxDQUFDZ0UsR0FBUCxDQUFXNUgsRUFBWCxFQUFlLGNBQWYsQ0FBRCxDQUEvRDtBQUVBLGVBQU80TSxVQUFVLENBQUMvRyxLQUFELENBQWpCO0FBQ0gsT0FMRCxNQUtPO0FBQ0hBLFFBQUFBLEtBQUssR0FBRytHLFVBQVUsQ0FBQzVNLEVBQUUsQ0FBQzZNLFdBQUosQ0FBbEI7QUFFQSxlQUFPaEgsS0FBUDtBQUNIO0FBQ0osS0FybkJFO0FBdW5CSGlILElBQUFBLE1BQU0sRUFBRSxnQkFBUzlNLEVBQVQsRUFBYTtBQUNqQixVQUFJK00sSUFBSixFQUFVQyxHQUFWOztBQUVBLFVBQUssQ0FBQ2hOLEVBQU4sRUFBVztBQUNQO0FBQ0gsT0FMZ0IsQ0FPakI7QUFDQTtBQUNBO0FBQ0E7OztBQUVBLFVBQUssQ0FBQ0EsRUFBRSxDQUFDaU4sY0FBSCxHQUFvQnBOLE1BQTFCLEVBQW1DO0FBQy9CLGVBQU87QUFBRXFOLFVBQUFBLEdBQUcsRUFBRSxDQUFQO0FBQVVDLFVBQUFBLElBQUksRUFBRTtBQUFoQixTQUFQO0FBQ0gsT0FkZ0IsQ0FnQmpCOzs7QUFDQUosTUFBQUEsSUFBSSxHQUFHL00sRUFBRSxDQUFDb04scUJBQUgsRUFBUDtBQUNBSixNQUFBQSxHQUFHLEdBQUdoTixFQUFFLENBQUNOLGFBQUgsQ0FBaUIyTixXQUF2QjtBQUVBLGFBQU87QUFDSEgsUUFBQUEsR0FBRyxFQUFFSCxJQUFJLENBQUNHLEdBQUwsR0FBV0YsR0FBRyxDQUFDTSxXQURqQjtBQUVISCxRQUFBQSxJQUFJLEVBQUVKLElBQUksQ0FBQ0ksSUFBTCxHQUFZSCxHQUFHLENBQUNPLFdBRm5CO0FBR0hDLFFBQUFBLEtBQUssRUFBRWxOLE1BQU0sQ0FBQ21OLFVBQVAsSUFBcUJ6TixFQUFFLENBQUMwTixVQUFILEdBQWdCMU4sRUFBRSxDQUFDNk0sV0FBeEM7QUFISixPQUFQO0FBS0gsS0FocEJFO0FBa3BCSHZHLElBQUFBLE1BQU0sRUFBRSxnQkFBU3RHLEVBQVQsRUFBYTtBQUNqQixhQUFPNEQsTUFBTSxDQUFDZ0UsR0FBUCxDQUFXNUgsRUFBWCxFQUFlLFFBQWYsQ0FBUDtBQUNILEtBcHBCRTtBQXNwQkgyTixJQUFBQSxXQUFXLEVBQUUscUJBQVMzTixFQUFULEVBQWE0TixVQUFiLEVBQXlCO0FBQ2xDLFVBQUl0SCxNQUFNLEdBQUd0RyxFQUFFLENBQUM2TixZQUFoQjtBQUNBLFVBQUlDLEtBQUo7O0FBRUEsVUFBSSxPQUFPRixVQUFQLEtBQXNCLFdBQXRCLElBQXFDQSxVQUFVLEtBQUssSUFBeEQsRUFBOEQ7QUFDMURFLFFBQUFBLEtBQUssR0FBR0MsZ0JBQWdCLENBQUMvTixFQUFELENBQXhCO0FBQ0FzRyxRQUFBQSxNQUFNLElBQUlXLFFBQVEsQ0FBQzZHLEtBQUssQ0FBQ0UsU0FBUCxDQUFSLEdBQTRCL0csUUFBUSxDQUFDNkcsS0FBSyxDQUFDRyxZQUFQLENBQTlDO0FBRUEsZUFBTzNILE1BQVA7QUFDSCxPQUxELE1BS087QUFDSCxlQUFPQSxNQUFQO0FBQ0g7QUFDSixLQWxxQkU7QUFvcUJINEgsSUFBQUEsT0FBTyxFQUFFLGlCQUFTbE8sRUFBVCxFQUFhO0FBQ2xCLGFBQU8sRUFBRUEsRUFBRSxDQUFDNk0sV0FBSCxLQUFtQixDQUFuQixJQUF3QjdNLEVBQUUsQ0FBQzZOLFlBQUgsS0FBb0IsQ0FBOUMsQ0FBUDtBQUNILEtBdHFCRTtBQXdxQkhNLElBQUFBLElBQUksRUFBRSxjQUFTbk8sRUFBVCxFQUFhd0QsSUFBYixFQUFtQnZCLEtBQW5CLEVBQTBCO0FBQzVCLFVBQUlqQyxFQUFFLElBQUlxRCxTQUFWLEVBQXFCO0FBQ2pCO0FBQ0g7O0FBRUQsVUFBSXBCLEtBQUssS0FBS29CLFNBQWQsRUFBeUI7QUFDckJyRCxRQUFBQSxFQUFFLENBQUNvTyxZQUFILENBQWdCNUssSUFBaEIsRUFBc0J2QixLQUF0QjtBQUNILE9BRkQsTUFFTztBQUNILGVBQU9qQyxFQUFFLENBQUNxTyxZQUFILENBQWdCN0ssSUFBaEIsQ0FBUDtBQUNIO0FBQ0osS0FsckJFO0FBb3JCSDhLLElBQUFBLE9BQU8sRUFBRSxpQkFBU3RPLEVBQVQsRUFBYXdELElBQWIsRUFBbUI7QUFDeEIsVUFBSXhELEVBQUUsSUFBSXFELFNBQVYsRUFBcUI7QUFDakI7QUFDSDs7QUFFRCxhQUFPckQsRUFBRSxDQUFDcU8sWUFBSCxDQUFnQjdLLElBQWhCLElBQXdCLElBQXhCLEdBQStCLEtBQXRDO0FBQ0gsS0ExckJFO0FBNHJCSCtLLElBQUFBLFVBQVUsRUFBRSxvQkFBU3ZPLEVBQVQsRUFBYXdELElBQWIsRUFBbUI7QUFDM0IsVUFBSXhELEVBQUUsSUFBSXFELFNBQVYsRUFBcUI7QUFDakI7QUFDSDs7QUFFRHJELE1BQUFBLEVBQUUsQ0FBQ3dPLGVBQUgsQ0FBbUJoTCxJQUFuQjtBQUNILEtBbHNCRTtBQW9zQkhpTCxJQUFBQSxPQUFPLEVBQUUsaUJBQVNDLElBQVQsRUFBZUMsRUFBZixFQUFtQkMsUUFBbkIsRUFBNkJDLE1BQTdCLEVBQXFDQyxNQUFyQyxFQUE2Q0MsSUFBN0MsRUFBbUQ7QUFDeEQ7QUFDWjtBQUNBO0FBQ0E7QUFDWSxVQUFJQyxPQUFPLEdBQUcsRUFBZDtBQUNBLFVBQUlGLE1BQUo7O0FBRUFFLE1BQUFBLE9BQU8sQ0FBQ0MsTUFBUixHQUFpQixVQUFTQyxDQUFULEVBQVlDLENBQVosRUFBZXhFLENBQWYsRUFBa0J5RSxDQUFsQixFQUFxQjtBQUNsQyxlQUFPekUsQ0FBQyxHQUFHdUUsQ0FBSixHQUFRRSxDQUFSLEdBQVlELENBQW5CO0FBQ0gsT0FGRDs7QUFJQUwsTUFBQUEsTUFBTSxHQUFHRSxPQUFPLENBQUNDLE1BQWpCLENBWndELENBY3hEOztBQUNBLFVBQUksT0FBT1AsSUFBUCxLQUFnQixRQUFoQixJQUNBLE9BQU9DLEVBQVAsS0FBYyxRQURkLElBRUEsT0FBT0MsUUFBUCxLQUFvQixRQUZwQixJQUdBLE9BQU9DLE1BQVAsS0FBa0IsVUFIdEIsRUFHa0M7QUFDOUI7QUFDSCxPQXBCdUQsQ0FzQnhEOzs7QUFDQSxVQUFJLE9BQU9FLElBQVAsS0FBZ0IsVUFBcEIsRUFBZ0M7QUFDNUJBLFFBQUFBLElBQUksR0FBRyxnQkFBVyxDQUFFLENBQXBCO0FBQ0gsT0F6QnVELENBMkJ4RDs7O0FBQ0EsVUFBSU0sR0FBRyxHQUFHL08sTUFBTSxDQUFDTyxxQkFBUCxJQUFnQyxVQUFTRSxRQUFULEVBQW1CO0FBQ3pEVCxRQUFBQSxNQUFNLENBQUNpQixVQUFQLENBQWtCUixRQUFsQixFQUE0QixPQUFPLEVBQW5DO0FBQ0gsT0FGRCxDQTVCd0QsQ0FnQ3hEOzs7QUFDQSxVQUFJdU8sUUFBUSxHQUFHLEtBQWY7QUFDQSxVQUFJQyxNQUFNLEdBQUdaLEVBQUUsR0FBR0QsSUFBbEI7O0FBRUEsZUFBU2MsSUFBVCxDQUFjQyxTQUFkLEVBQXlCO0FBQ3JCLFlBQUlDLElBQUksR0FBRyxDQUFDRCxTQUFTLElBQUksQ0FBQyxJQUFJeE8sSUFBSixFQUFmLElBQTZCZ0gsS0FBeEM7O0FBRUEsWUFBSXlILElBQUksSUFBSSxDQUFaLEVBQWU7QUFDWGIsVUFBQUEsTUFBTSxDQUFDQyxNQUFNLENBQUNZLElBQUQsRUFBT2hCLElBQVAsRUFBYWEsTUFBYixFQUFxQlgsUUFBckIsQ0FBUCxDQUFOO0FBQ0g7O0FBQ0QsWUFBSWMsSUFBSSxJQUFJLENBQVIsSUFBYUEsSUFBSSxJQUFJZCxRQUF6QixFQUFtQztBQUMvQkMsVUFBQUEsTUFBTSxDQUFDRixFQUFELENBQU47QUFDQUksVUFBQUEsSUFBSTtBQUNQLFNBSEQsTUFHTztBQUNITSxVQUFBQSxHQUFHLENBQUNHLElBQUQsQ0FBSDtBQUNIO0FBQ0o7O0FBRURYLE1BQUFBLE1BQU0sQ0FBQ0gsSUFBRCxDQUFOLENBbER3RCxDQW9EeEQ7O0FBQ0EsVUFBSXpHLEtBQUssR0FBRzNILE1BQU0sQ0FBQ3FQLFdBQVAsSUFBc0JyUCxNQUFNLENBQUNxUCxXQUFQLENBQW1CQyxHQUF6QyxHQUErQ3RQLE1BQU0sQ0FBQ3FQLFdBQVAsQ0FBbUJDLEdBQW5CLEVBQS9DLEdBQTBFLENBQUMsSUFBSTNPLElBQUosRUFBdkY7QUFFQW9PLE1BQUFBLEdBQUcsQ0FBQ0csSUFBRCxDQUFIO0FBQ0gsS0E1dkJFO0FBOHZCSEssSUFBQUEsU0FBUyxFQUFFLG1CQUFTN1AsRUFBVCxFQUFhOFAsSUFBYixFQUFtQkMsS0FBbkIsRUFBMEI7QUFDakMsVUFBSW5JLEdBQUcsR0FBRyxFQUFWOztBQUVBLFVBQUk1SCxFQUFFLFlBQVlnUSxXQUFkLEtBQThCLEtBQWxDLEVBQXlDO0FBQ3JDO0FBQ0g7O0FBRUQsVUFBSSxDQUFDaFEsRUFBRSxDQUFDcU8sWUFBSCxDQUFnQixlQUFleUIsSUFBL0IsQ0FBRCxJQUF5Q0MsS0FBSyxLQUFLLEtBQXZELEVBQThEO0FBQzFELFlBQUk5TixLQUFKLENBRDBELENBRzFEO0FBQ0E7O0FBQ0EyRixRQUFBQSxHQUFHLEdBQUc1SCxFQUFFLENBQUM4TixLQUFILENBQVNtQyxPQUFmO0FBQ0FqUSxRQUFBQSxFQUFFLENBQUM4TixLQUFILENBQVNtQyxPQUFULEdBQW1CLHlEQUFuQjs7QUFFQSxZQUFJSCxJQUFJLElBQUksT0FBWixFQUFxQjtBQUNqQjdOLFVBQUFBLEtBQUssR0FBR2pDLEVBQUUsQ0FBQzZNLFdBQVg7QUFDSCxTQUZELE1BRU8sSUFBSWlELElBQUksSUFBSSxRQUFaLEVBQXNCO0FBQ3pCN04sVUFBQUEsS0FBSyxHQUFHakMsRUFBRSxDQUFDNk4sWUFBWDtBQUNIOztBQUVEN04sUUFBQUEsRUFBRSxDQUFDOE4sS0FBSCxDQUFTbUMsT0FBVCxHQUFtQnJJLEdBQW5CLENBZDBELENBZ0IxRDs7QUFDQTVILFFBQUFBLEVBQUUsQ0FBQ29PLFlBQUgsQ0FBZ0IsZUFBZTBCLElBQS9CLEVBQXFDN04sS0FBckM7QUFFQSxlQUFPMkssVUFBVSxDQUFDM0ssS0FBRCxDQUFqQjtBQUNILE9BcEJELE1Bb0JPO0FBQ0g7QUFDQSxlQUFPMkssVUFBVSxDQUFDNU0sRUFBRSxDQUFDcU8sWUFBSCxDQUFnQixlQUFleUIsSUFBL0IsQ0FBRCxDQUFqQjtBQUNIO0FBQ0osS0E3eEJFO0FBK3hCSEksSUFBQUEsWUFBWSxFQUFFLHNCQUFTbFEsRUFBVCxFQUFhK1AsS0FBYixFQUFvQjtBQUM5QixhQUFPbk0sTUFBTSxDQUFDaU0sU0FBUCxDQUFpQjdQLEVBQWpCLEVBQXFCLFFBQXJCLEVBQStCK1AsS0FBL0IsQ0FBUDtBQUNILEtBanlCRTtBQW15QkhJLElBQUFBLFdBQVcsRUFBRSxxQkFBU25RLEVBQVQsRUFBYStQLEtBQWIsRUFBb0I7QUFDN0IsYUFBT25NLE1BQU0sQ0FBQ2lNLFNBQVAsQ0FBaUI3UCxFQUFqQixFQUFxQixPQUFyQixFQUE4QitQLEtBQTlCLENBQVA7QUFDSCxLQXJ5QkU7QUF1eUJISyxJQUFBQSxTQUFTLEVBQUUsbUJBQVNDLE9BQVQsRUFBa0JDLE1BQWxCLEVBQTBCO0FBQ2pDO0FBQ0FBLE1BQUFBLE1BQU0sR0FBRyxXQUFXQSxNQUFwQjtBQUNBLGFBQVFELE9BQU8sSUFBSS9QLE1BQVgsSUFBcUIrUCxPQUFPLElBQUk1USxRQUFqQyxHQUNIOFEsSUFBSSxDQUFFRCxNQUFNLElBQUksV0FBWCxHQUEwQixhQUExQixHQUEwQyxhQUEzQyxDQUFKLElBQ0NFLHVCQUF1QixJQUFJL1EsUUFBUSxDQUFDUyxlQUFULENBQXlCb1EsTUFBekIsQ0FENUIsSUFFQTdRLFFBQVEsQ0FBQzRHLElBQVQsQ0FBY2lLLE1BQWQsQ0FIRyxHQUlIRCxPQUFPLENBQUNDLE1BQUQsQ0FKWDtBQUtILEtBL3lCRTtBQWl6QkgxSSxJQUFBQSxHQUFHLEVBQUUsYUFBUzVILEVBQVQsRUFBYXlRLFNBQWIsRUFBd0J4TyxLQUF4QixFQUErQnlPLFNBQS9CLEVBQTBDO0FBQzNDLFVBQUksQ0FBQzFRLEVBQUwsRUFBUztBQUNMO0FBQ0g7O0FBRUQsVUFBSWlDLEtBQUssS0FBS29CLFNBQWQsRUFBeUI7QUFDckIsWUFBS3FOLFNBQVMsS0FBSyxJQUFuQixFQUEwQjtBQUN0QjFRLFVBQUFBLEVBQUUsQ0FBQzhOLEtBQUgsQ0FBUzZDLFdBQVQsQ0FBcUJGLFNBQXJCLEVBQWdDeE8sS0FBaEMsRUFBdUMsV0FBdkM7QUFDSCxTQUZELE1BRU87QUFDSGpDLFVBQUFBLEVBQUUsQ0FBQzhOLEtBQUgsQ0FBUzJDLFNBQVQsSUFBc0J4TyxLQUF0QjtBQUNIO0FBQ0osT0FORCxNQU1PO0FBQ0gsWUFBSW9MLFdBQVcsR0FBRyxDQUFDck4sRUFBRSxDQUFDTixhQUFILElBQW9CRCxRQUFyQixFQUErQjROLFdBQWpELENBREcsQ0FHSDs7QUFDQSxZQUFJQSxXQUFXLElBQUlBLFdBQVcsQ0FBQ1UsZ0JBQS9CLEVBQWlEO0FBQzdDO0FBQ0E7QUFDQTBDLFVBQUFBLFNBQVMsR0FBR0EsU0FBUyxDQUFDakgsT0FBVixDQUFrQixVQUFsQixFQUE4QixLQUE5QixFQUFxQ29ILFdBQXJDLEVBQVo7QUFFQSxpQkFBT3ZELFdBQVcsQ0FBQ1UsZ0JBQVosQ0FBNkIvTixFQUE3QixFQUFpQyxJQUFqQyxFQUF1QzZRLGdCQUF2QyxDQUF3REosU0FBeEQsQ0FBUDtBQUNILFNBTkQsTUFNTyxJQUFJelEsRUFBRSxDQUFDOFEsWUFBUCxFQUFxQjtBQUFFO0FBQzFCO0FBQ0FMLFVBQUFBLFNBQVMsR0FBR0EsU0FBUyxDQUFDakgsT0FBVixDQUFrQixTQUFsQixFQUE2QixVQUFTdUgsR0FBVCxFQUFjQyxNQUFkLEVBQXNCO0FBQzNELG1CQUFPQSxNQUFNLENBQUNDLFdBQVAsRUFBUDtBQUNILFdBRlcsQ0FBWjtBQUlBaFAsVUFBQUEsS0FBSyxHQUFHakMsRUFBRSxDQUFDOFEsWUFBSCxDQUFnQkwsU0FBaEIsQ0FBUixDQU53QixDQVF4Qjs7QUFDQSxjQUFJLHNCQUFzQjlLLElBQXRCLENBQTJCMUQsS0FBM0IsQ0FBSixFQUF1QztBQUNuQyxtQkFBUSxVQUFTQSxLQUFULEVBQWdCO0FBQ3BCLGtCQUFJaVAsT0FBTyxHQUFHbFIsRUFBRSxDQUFDOE4sS0FBSCxDQUFTWCxJQUF2QjtBQUFBLGtCQUE2QmdFLFNBQVMsR0FBR25SLEVBQUUsQ0FBQ29SLFlBQUgsQ0FBZ0JqRSxJQUF6RDtBQUVBbk4sY0FBQUEsRUFBRSxDQUFDb1IsWUFBSCxDQUFnQmpFLElBQWhCLEdBQXVCbk4sRUFBRSxDQUFDOFEsWUFBSCxDQUFnQjNELElBQXZDO0FBQ0FuTixjQUFBQSxFQUFFLENBQUM4TixLQUFILENBQVNYLElBQVQsR0FBZ0JsTCxLQUFLLElBQUksQ0FBekI7QUFDQUEsY0FBQUEsS0FBSyxHQUFHakMsRUFBRSxDQUFDOE4sS0FBSCxDQUFTdUQsU0FBVCxHQUFxQixJQUE3QjtBQUNBclIsY0FBQUEsRUFBRSxDQUFDOE4sS0FBSCxDQUFTWCxJQUFULEdBQWdCK0QsT0FBaEI7QUFDQWxSLGNBQUFBLEVBQUUsQ0FBQ29SLFlBQUgsQ0FBZ0JqRSxJQUFoQixHQUF1QmdFLFNBQXZCO0FBRUEscUJBQU9sUCxLQUFQO0FBQ0gsYUFWTSxDQVVKQSxLQVZJLENBQVA7QUFXSDs7QUFFRCxpQkFBT0EsS0FBUDtBQUNIO0FBQ0o7QUFDSixLQWgyQkU7QUFrMkJIcVAsSUFBQUEsS0FBSyxFQUFFLGVBQVN0UixFQUFULEVBQWF1UixHQUFiLEVBQWtCQyxLQUFsQixFQUF5QnpRLFFBQXpCLEVBQW1DMFEsZUFBbkMsRUFBb0Q7QUFDdkQsVUFBSSxDQUFDelIsRUFBRCxJQUFRdVIsR0FBRyxJQUFJLElBQVAsSUFBZTNOLE1BQU0sQ0FBQ3NLLE9BQVAsQ0FBZWxPLEVBQWYsTUFBdUIsS0FBOUMsSUFBeUR1UixHQUFHLElBQUksTUFBUCxJQUFpQjNOLE1BQU0sQ0FBQ3NLLE9BQVAsQ0FBZWxPLEVBQWYsTUFBdUIsSUFBckcsRUFBNEc7QUFDeEc7QUFDSDs7QUFFRHdSLE1BQUFBLEtBQUssR0FBSUEsS0FBSyxHQUFHQSxLQUFILEdBQVcsR0FBekI7QUFDQSxVQUFJRSxVQUFVLEdBQUc5TixNQUFNLENBQUNzTSxZQUFQLENBQW9CbFEsRUFBcEIsQ0FBakI7QUFDQSxVQUFJMlIsY0FBYyxHQUFHLEtBQXJCO0FBQ0EsVUFBSUMsaUJBQWlCLEdBQUcsS0FBeEI7O0FBRUEsVUFBSWhPLE1BQU0sQ0FBQ2dFLEdBQVAsQ0FBVzVILEVBQVgsRUFBZSxhQUFmLEtBQWlDNEQsTUFBTSxDQUFDK0YsSUFBUCxDQUFZM0osRUFBWixFQUFnQnlNLEdBQWhCLENBQW9CLG1CQUFwQixNQUE2QyxJQUFsRixFQUF3RjtBQUNwRjdJLFFBQUFBLE1BQU0sQ0FBQytGLElBQVAsQ0FBWTNKLEVBQVosRUFBZ0JzTSxHQUFoQixDQUFvQixtQkFBcEIsRUFBeUMxSSxNQUFNLENBQUNnRSxHQUFQLENBQVc1SCxFQUFYLEVBQWUsYUFBZixDQUF6QztBQUNIOztBQUVELFVBQUk0RCxNQUFNLENBQUNnRSxHQUFQLENBQVc1SCxFQUFYLEVBQWUsZ0JBQWYsS0FBb0M0RCxNQUFNLENBQUMrRixJQUFQLENBQVkzSixFQUFaLEVBQWdCeU0sR0FBaEIsQ0FBb0Isc0JBQXBCLE1BQWdELElBQXhGLEVBQThGO0FBQzFGN0ksUUFBQUEsTUFBTSxDQUFDK0YsSUFBUCxDQUFZM0osRUFBWixFQUFnQnNNLEdBQWhCLENBQW9CLHNCQUFwQixFQUE0QzFJLE1BQU0sQ0FBQ2dFLEdBQVAsQ0FBVzVILEVBQVgsRUFBZSxnQkFBZixDQUE1QztBQUNIOztBQUVELFVBQUk0RCxNQUFNLENBQUMrRixJQUFQLENBQVkzSixFQUFaLEVBQWdCeU0sR0FBaEIsQ0FBb0IsbUJBQXBCLENBQUosRUFBOEM7QUFDMUNrRixRQUFBQSxjQUFjLEdBQUcxSyxRQUFRLENBQUNyRCxNQUFNLENBQUMrRixJQUFQLENBQVkzSixFQUFaLEVBQWdCd00sR0FBaEIsQ0FBb0IsbUJBQXBCLENBQUQsQ0FBekI7QUFDSDs7QUFFRCxVQUFJNUksTUFBTSxDQUFDK0YsSUFBUCxDQUFZM0osRUFBWixFQUFnQnlNLEdBQWhCLENBQW9CLHNCQUFwQixDQUFKLEVBQWlEO0FBQzdDbUYsUUFBQUEsaUJBQWlCLEdBQUczSyxRQUFRLENBQUNyRCxNQUFNLENBQUMrRixJQUFQLENBQVkzSixFQUFaLEVBQWdCd00sR0FBaEIsQ0FBb0Isc0JBQXBCLENBQUQsQ0FBNUI7QUFDSDs7QUFFRCxVQUFJK0UsR0FBRyxJQUFJLElBQVgsRUFBaUI7QUFBRTtBQUNmdlIsUUFBQUEsRUFBRSxDQUFDOE4sS0FBSCxDQUFTbUMsT0FBVCxHQUFtQixtQ0FBbkI7O0FBRUEsWUFBSTBCLGNBQUosRUFBb0I7QUFDaEIvTixVQUFBQSxNQUFNLENBQUM2SyxPQUFQLENBQWUsQ0FBZixFQUFrQmtELGNBQWxCLEVBQWtDSCxLQUFsQyxFQUF5QyxVQUFTdlAsS0FBVCxFQUFnQjtBQUNyRGpDLFlBQUFBLEVBQUUsQ0FBQzhOLEtBQUgsQ0FBUytELFVBQVQsR0FBdUJGLGNBQWMsR0FBRzFQLEtBQWxCLEdBQTJCLElBQWpEO0FBQ0gsV0FGRCxFQUVHLFFBRkg7QUFHSDs7QUFFRCxZQUFJMlAsaUJBQUosRUFBdUI7QUFDbkJoTyxVQUFBQSxNQUFNLENBQUM2SyxPQUFQLENBQWUsQ0FBZixFQUFrQm1ELGlCQUFsQixFQUFxQ0osS0FBckMsRUFBNEMsVUFBU3ZQLEtBQVQsRUFBZ0I7QUFDeERqQyxZQUFBQSxFQUFFLENBQUM4TixLQUFILENBQVNnRSxhQUFULEdBQTBCRixpQkFBaUIsR0FBRzNQLEtBQXJCLEdBQThCLElBQXZEO0FBQ0gsV0FGRCxFQUVHLFFBRkg7QUFHSDs7QUFFRDJCLFFBQUFBLE1BQU0sQ0FBQzZLLE9BQVAsQ0FBZSxDQUFmLEVBQWtCaUQsVUFBbEIsRUFBOEJGLEtBQTlCLEVBQXFDLFVBQVN2UCxLQUFULEVBQWdCO0FBQ2pEakMsVUFBQUEsRUFBRSxDQUFDOE4sS0FBSCxDQUFTeEgsTUFBVCxHQUFtQm9MLFVBQVUsR0FBR3pQLEtBQWQsR0FBdUIsSUFBekM7QUFDSCxTQUZELEVBRUcsUUFGSCxFQUVhLFlBQVc7QUFDcEJqQyxVQUFBQSxFQUFFLENBQUM4TixLQUFILENBQVN4SCxNQUFULEdBQWtCLEVBQWxCO0FBQ0F0RyxVQUFBQSxFQUFFLENBQUM4TixLQUFILENBQVNpRSxPQUFULEdBQW1CLE1BQW5COztBQUVBLGNBQUksT0FBT2hSLFFBQVAsS0FBb0IsVUFBeEIsRUFBb0M7QUFDaENBLFlBQUFBLFFBQVE7QUFDWDtBQUNKLFNBVEQ7QUFZSCxPQTNCRCxNQTJCTyxJQUFJd1EsR0FBRyxJQUFJLE1BQVgsRUFBbUI7QUFBRTtBQUN4QnZSLFFBQUFBLEVBQUUsQ0FBQzhOLEtBQUgsQ0FBU21DLE9BQVQsR0FBbUIsbUNBQW5COztBQUVBLFlBQUkwQixjQUFKLEVBQW9CO0FBQ2hCL04sVUFBQUEsTUFBTSxDQUFDNkssT0FBUCxDQUFlLENBQWYsRUFBa0JrRCxjQUFsQixFQUFrQ0gsS0FBbEMsRUFBeUMsVUFBU3ZQLEtBQVQsRUFBZ0I7QUFBQztBQUN0RGpDLFlBQUFBLEVBQUUsQ0FBQzhOLEtBQUgsQ0FBUytELFVBQVQsR0FBc0I1UCxLQUFLLEdBQUcsSUFBOUI7QUFDSCxXQUZELEVBRUcsUUFGSCxFQUVhLFlBQVc7QUFDcEJqQyxZQUFBQSxFQUFFLENBQUM4TixLQUFILENBQVMrRCxVQUFULEdBQXNCLEVBQXRCO0FBQ0gsV0FKRDtBQUtIOztBQUVELFlBQUlELGlCQUFKLEVBQXVCO0FBQ25CaE8sVUFBQUEsTUFBTSxDQUFDNkssT0FBUCxDQUFlLENBQWYsRUFBa0JtRCxpQkFBbEIsRUFBcUNKLEtBQXJDLEVBQTRDLFVBQVN2UCxLQUFULEVBQWdCO0FBQ3hEakMsWUFBQUEsRUFBRSxDQUFDOE4sS0FBSCxDQUFTZ0UsYUFBVCxHQUF5QjdQLEtBQUssR0FBRyxJQUFqQztBQUNILFdBRkQsRUFFRyxRQUZILEVBRWEsWUFBVztBQUNwQmpDLFlBQUFBLEVBQUUsQ0FBQzhOLEtBQUgsQ0FBU2dFLGFBQVQsR0FBeUIsRUFBekI7QUFDSCxXQUpEO0FBS0g7O0FBRURsTyxRQUFBQSxNQUFNLENBQUM2SyxPQUFQLENBQWUsQ0FBZixFQUFrQmlELFVBQWxCLEVBQThCRixLQUE5QixFQUFxQyxVQUFTdlAsS0FBVCxFQUFnQjtBQUNqRGpDLFVBQUFBLEVBQUUsQ0FBQzhOLEtBQUgsQ0FBU3hILE1BQVQsR0FBa0JyRSxLQUFLLEdBQUcsSUFBMUI7QUFDSCxTQUZELEVBRUcsUUFGSCxFQUVhLFlBQVc7QUFDcEJqQyxVQUFBQSxFQUFFLENBQUM4TixLQUFILENBQVN4SCxNQUFULEdBQWtCLEVBQWxCO0FBQ0F0RyxVQUFBQSxFQUFFLENBQUM4TixLQUFILENBQVNpRSxPQUFULEdBQW1CLEVBQW5CO0FBQ0EvUixVQUFBQSxFQUFFLENBQUM4TixLQUFILENBQVNrRSxRQUFULEdBQW9CLEVBQXBCOztBQUVBLGNBQUksT0FBT2pSLFFBQVAsS0FBb0IsVUFBeEIsRUFBb0M7QUFDaENBLFlBQUFBLFFBQVE7QUFDWDtBQUNKLFNBVkQ7QUFXSDtBQUNKLEtBdDdCRTtBQXc3QkhrUixJQUFBQSxPQUFPLEVBQUUsaUJBQVNqUyxFQUFULEVBQWF3UixLQUFiLEVBQW9CelEsUUFBcEIsRUFBOEI7QUFDbkM2QyxNQUFBQSxNQUFNLENBQUMwTixLQUFQLENBQWF0UixFQUFiLEVBQWlCLElBQWpCLEVBQXVCd1IsS0FBdkIsRUFBOEJ6USxRQUE5QjtBQUNILEtBMTdCRTtBQTQ3QkhtUixJQUFBQSxTQUFTLEVBQUUsbUJBQVNsUyxFQUFULEVBQWF3UixLQUFiLEVBQW9CelEsUUFBcEIsRUFBOEI7QUFDckM2QyxNQUFBQSxNQUFNLENBQUMwTixLQUFQLENBQWF0UixFQUFiLEVBQWlCLE1BQWpCLEVBQXlCd1IsS0FBekIsRUFBZ0N6USxRQUFoQztBQUNILEtBOTdCRTtBQWc4QkhvUixJQUFBQSxJQUFJLEVBQUUsY0FBU25TLEVBQVQsRUFBYStSLE9BQWIsRUFBc0I7QUFDeEIsVUFBSSxPQUFPL1IsRUFBUCxLQUFjLFdBQWxCLEVBQStCO0FBQzNCQSxRQUFBQSxFQUFFLENBQUM4TixLQUFILENBQVNpRSxPQUFULEdBQW9CQSxPQUFPLEdBQUdBLE9BQUgsR0FBYSxPQUF4QztBQUNIO0FBQ0osS0FwOEJFO0FBczhCSEssSUFBQUEsSUFBSSxFQUFFLGNBQVNwUyxFQUFULEVBQWE7QUFDZixVQUFJLE9BQU9BLEVBQVAsS0FBYyxXQUFsQixFQUErQjtBQUMzQkEsUUFBQUEsRUFBRSxDQUFDOE4sS0FBSCxDQUFTaUUsT0FBVCxHQUFtQixNQUFuQjtBQUNIO0FBQ0osS0ExOEJFO0FBNDhCSE0sSUFBQUEsUUFBUSxFQUFFLGtCQUFTclMsRUFBVCxFQUFhc1MsSUFBYixFQUFtQkMsT0FBbkIsRUFBNEJDLEdBQTVCLEVBQWlDO0FBQ3ZDLFVBQUksT0FBT3hTLEVBQVAsS0FBYyxXQUFkLElBQTZCQSxFQUFFLEtBQUssSUFBeEMsRUFBOEM7QUFDMUNBLFFBQUFBLEVBQUUsQ0FBQ2tFLGdCQUFILENBQW9Cb08sSUFBcEIsRUFBMEJDLE9BQTFCO0FBQ0g7QUFDSixLQWg5QkU7QUFrOUJIRSxJQUFBQSxXQUFXLEVBQUUscUJBQVN6UyxFQUFULEVBQWFzUyxJQUFiLEVBQW1CQyxPQUFuQixFQUE0QjtBQUNyQyxVQUFJdlMsRUFBRSxLQUFLLElBQVgsRUFBaUI7QUFDYkEsUUFBQUEsRUFBRSxDQUFDMFMsbUJBQUgsQ0FBdUJKLElBQXZCLEVBQTZCQyxPQUE3QjtBQUNIO0FBQ0osS0F0OUJFO0FBdzlCSEksSUFBQUEsRUFBRSxFQUFFLFlBQVN0QyxPQUFULEVBQWtCMUUsUUFBbEIsRUFBNEIvQixLQUE1QixFQUFtQzJJLE9BQW5DLEVBQTRDO0FBQzVDLFVBQUtsQyxPQUFPLEtBQUssSUFBakIsRUFBd0I7QUFDcEI7QUFDSDs7QUFFRCxVQUFJdUMsT0FBTyxHQUFHaFAsTUFBTSxDQUFDZ0QsV0FBUCxDQUFtQixPQUFuQixDQUFkOztBQUVBdEcsTUFBQUEsTUFBTSxDQUFDcUQsNEJBQVAsQ0FBb0NpUCxPQUFwQyxJQUErQyxVQUFTek0sQ0FBVCxFQUFZO0FBQ3ZELFlBQUkwTSxPQUFPLEdBQUd4QyxPQUFPLENBQUMxUSxnQkFBUixDQUF5QmdNLFFBQXpCLENBQWQ7QUFDQSxZQUFJbUgsTUFBTSxHQUFHM00sQ0FBQyxDQUFDMk0sTUFBZjs7QUFFQSxlQUFRQSxNQUFNLElBQUlBLE1BQU0sS0FBS3pDLE9BQTdCLEVBQXVDO0FBQ25DLGVBQU0sSUFBSXpRLENBQUMsR0FBRyxDQUFSLEVBQVdtVCxDQUFDLEdBQUdGLE9BQU8sQ0FBQ2hULE1BQTdCLEVBQXFDRCxDQUFDLEdBQUdtVCxDQUF6QyxFQUE0Q25ULENBQUMsRUFBN0MsRUFBa0Q7QUFDOUMsZ0JBQUtrVCxNQUFNLEtBQUtELE9BQU8sQ0FBQ2pULENBQUQsQ0FBdkIsRUFBNkI7QUFDekIyUyxjQUFBQSxPQUFPLENBQUNqUSxJQUFSLENBQWF3USxNQUFiLEVBQXFCM00sQ0FBckI7QUFDSDtBQUNKOztBQUVEMk0sVUFBQUEsTUFBTSxHQUFHQSxNQUFNLENBQUN0UyxVQUFoQjtBQUNIO0FBQ0osT0FiRDs7QUFlQW9ELE1BQUFBLE1BQU0sQ0FBQ3lPLFFBQVAsQ0FBZ0JoQyxPQUFoQixFQUF5QnpHLEtBQXpCLEVBQWdDdEosTUFBTSxDQUFDcUQsNEJBQVAsQ0FBb0NpUCxPQUFwQyxDQUFoQztBQUVBLGFBQU9BLE9BQVA7QUFDSCxLQWovQkU7QUFtL0JISSxJQUFBQSxHQUFHLEVBQUUsYUFBUzNDLE9BQVQsRUFBa0J6RyxLQUFsQixFQUF5QmdKLE9BQXpCLEVBQWtDO0FBQ25DLFVBQUksQ0FBQ3ZDLE9BQUQsSUFBWSxDQUFDL1AsTUFBTSxDQUFDcUQsNEJBQVAsQ0FBb0NpUCxPQUFwQyxDQUFqQixFQUErRDtBQUMzRDtBQUNIOztBQUVEaFAsTUFBQUEsTUFBTSxDQUFDNk8sV0FBUCxDQUFtQnBDLE9BQW5CLEVBQTRCekcsS0FBNUIsRUFBbUN0SixNQUFNLENBQUNxRCw0QkFBUCxDQUFvQ2lQLE9BQXBDLENBQW5DO0FBRUEsYUFBT3RTLE1BQU0sQ0FBQ3FELDRCQUFQLENBQW9DaVAsT0FBcEMsQ0FBUDtBQUNILEtBMy9CRTtBQTYvQkhKLElBQUFBLEdBQUcsRUFBRSxTQUFTUyxPQUFULENBQWlCalQsRUFBakIsRUFBcUJzUyxJQUFyQixFQUEyQnZSLFFBQTNCLEVBQXFDO0FBQ3RDZixNQUFBQSxFQUFFLENBQUNrRSxnQkFBSCxDQUFvQm9PLElBQXBCLEVBQTBCLFNBQVNZLE1BQVQsQ0FBZ0IvTSxDQUFoQixFQUFtQjtBQUN6QztBQUNBLFlBQUlBLENBQUMsQ0FBQzJNLE1BQUYsSUFBWTNNLENBQUMsQ0FBQzJNLE1BQUYsQ0FBU0osbUJBQXpCLEVBQThDO0FBQzFDdk0sVUFBQUEsQ0FBQyxDQUFDMk0sTUFBRixDQUFTSixtQkFBVCxDQUE2QnZNLENBQUMsQ0FBQ21NLElBQS9CLEVBQXFDWSxNQUFyQztBQUNILFNBSndDLENBTXpDOzs7QUFDQSxZQUFJbFQsRUFBRSxJQUFJQSxFQUFFLENBQUMwUyxtQkFBYixFQUFrQztBQUMxQ3ZNLFVBQUFBLENBQUMsQ0FBQzRFLGFBQUYsQ0FBZ0IySCxtQkFBaEIsQ0FBb0N2TSxDQUFDLENBQUNtTSxJQUF0QyxFQUE0Q1ksTUFBNUM7QUFDQSxTQVRpRCxDQVd6Qzs7O0FBQ0EsZUFBT25TLFFBQVEsQ0FBQ29GLENBQUQsQ0FBZjtBQUNILE9BYkQ7QUFjSCxLQTVnQ0U7QUE4Z0NIZ04sSUFBQUEsSUFBSSxFQUFFLGNBQVNwQyxHQUFULEVBQWM7QUFDaEIsVUFBSW9DLElBQUksR0FBRyxDQUFYO0FBQUEsVUFDSXZULENBREo7QUFBQSxVQUNPd1QsR0FEUDtBQUdBLFVBQUlyQyxHQUFHLENBQUNsUixNQUFKLEtBQWUsQ0FBbkIsRUFBc0IsT0FBT3NULElBQVA7O0FBQ3RCLFdBQUt2VCxDQUFDLEdBQUcsQ0FBVCxFQUFZQSxDQUFDLEdBQUdtUixHQUFHLENBQUNsUixNQUFwQixFQUE0QkQsQ0FBQyxFQUE3QixFQUFpQztBQUM3QndULFFBQUFBLEdBQUcsR0FBR3JDLEdBQUcsQ0FBQ3NDLFVBQUosQ0FBZXpULENBQWYsQ0FBTjtBQUNBdVQsUUFBQUEsSUFBSSxHQUFJLENBQUNBLElBQUksSUFBSSxDQUFULElBQWNBLElBQWYsR0FBdUJDLEdBQTlCO0FBQ0FELFFBQUFBLElBQUksSUFBSSxDQUFSLENBSDZCLENBR2xCO0FBQ2Q7O0FBRUQsYUFBT0EsSUFBUDtBQUNILEtBMWhDRTtBQTRoQ0hHLElBQUFBLFlBQVksRUFBRSxzQkFBU3RULEVBQVQsRUFBYXVULGFBQWIsRUFBNEJ4UyxRQUE1QixFQUFzQztBQUNoRCxVQUFJeVMsU0FBSjtBQUNBLFVBQUlDLFVBQVUsR0FBRztBQUNiRCxRQUFBQSxTQUFTLEVBQUUsY0FERTtBQUViRSxRQUFBQSxVQUFVLEVBQUUsZUFGQztBQUdiQyxRQUFBQSxZQUFZLEVBQUUsaUJBSEQ7QUFJYkMsUUFBQUEsZUFBZSxFQUFFLG9CQUpKO0FBS2JDLFFBQUFBLFdBQVcsRUFBRTtBQUxBLE9BQWpCOztBQVFBLFdBQUssSUFBSTNFLENBQVQsSUFBY3VFLFVBQWQsRUFBMEI7QUFDdEIsWUFBSXpULEVBQUUsQ0FBQzhOLEtBQUgsQ0FBU29CLENBQVQsTUFBZ0I3TCxTQUFwQixFQUErQjtBQUMzQm1RLFVBQUFBLFNBQVMsR0FBR0MsVUFBVSxDQUFDdkUsQ0FBRCxDQUF0QjtBQUNIO0FBQ0o7O0FBRUR0TCxNQUFBQSxNQUFNLENBQUN3RixRQUFQLENBQWdCcEosRUFBaEIsRUFBb0J1VCxhQUFwQjtBQUVBM1AsTUFBQUEsTUFBTSxDQUFDNE8sR0FBUCxDQUFXeFMsRUFBWCxFQUFld1QsU0FBZixFQUEwQixZQUFXO0FBQ2pDNVAsUUFBQUEsTUFBTSxDQUFDMkYsV0FBUCxDQUFtQnZKLEVBQW5CLEVBQXVCdVQsYUFBdkI7QUFDSCxPQUZEOztBQUlBLFVBQUl4UyxRQUFKLEVBQWM7QUFDVjZDLFFBQUFBLE1BQU0sQ0FBQzRPLEdBQVAsQ0FBV3hTLEVBQVgsRUFBZXdULFNBQWYsRUFBMEJ6UyxRQUExQjtBQUNIO0FBQ0osS0FyakNFO0FBdWpDSCtTLElBQUFBLGFBQWEsRUFBRSx1QkFBUzlULEVBQVQsRUFBYWUsUUFBYixFQUF1QjtBQUNsQyxVQUFJZ1QsVUFBSjtBQUNBLFVBQUlDLFdBQVcsR0FBRztBQUNkRCxRQUFBQSxVQUFVLEVBQUUsZUFERTtBQUVkRSxRQUFBQSxXQUFXLEVBQUUsZ0JBRkM7QUFHZEMsUUFBQUEsYUFBYSxFQUFFLGtCQUhEO0FBSWRDLFFBQUFBLGdCQUFnQixFQUFFLHFCQUpKO0FBS2RDLFFBQUFBLFlBQVksRUFBRTtBQUxBLE9BQWxCOztBQVFBLFdBQUssSUFBSWxGLENBQVQsSUFBYzhFLFdBQWQsRUFBMkI7QUFDdkIsWUFBSWhVLEVBQUUsQ0FBQzhOLEtBQUgsQ0FBU29CLENBQVQsTUFBZ0I3TCxTQUFwQixFQUErQjtBQUMzQjBRLFVBQUFBLFVBQVUsR0FBR0MsV0FBVyxDQUFDOUUsQ0FBRCxDQUF4QjtBQUNIO0FBQ0o7O0FBRUR0TCxNQUFBQSxNQUFNLENBQUM0TyxHQUFQLENBQVd4UyxFQUFYLEVBQWUrVCxVQUFmLEVBQTJCaFQsUUFBM0I7QUFDSCxLQXhrQ0U7QUEwa0NIc1QsSUFBQUEsWUFBWSxFQUFFLHNCQUFTclUsRUFBVCxFQUFhZSxRQUFiLEVBQXVCO0FBQ2pDLFVBQUl5UyxTQUFKO0FBQ0EsVUFBSUMsVUFBVSxHQUFHO0FBQ2JELFFBQUFBLFNBQVMsRUFBRSxjQURFO0FBRWJFLFFBQUFBLFVBQVUsRUFBRSxlQUZDO0FBR2JDLFFBQUFBLFlBQVksRUFBRSxpQkFIRDtBQUliQyxRQUFBQSxlQUFlLEVBQUUsb0JBSko7QUFLYkMsUUFBQUEsV0FBVyxFQUFFO0FBTEEsT0FBakI7O0FBUUEsV0FBSyxJQUFJM0UsQ0FBVCxJQUFjdUUsVUFBZCxFQUEwQjtBQUN0QixZQUFJelQsRUFBRSxDQUFDOE4sS0FBSCxDQUFTb0IsQ0FBVCxNQUFnQjdMLFNBQXBCLEVBQStCO0FBQzNCbVEsVUFBQUEsU0FBUyxHQUFHQyxVQUFVLENBQUN2RSxDQUFELENBQXRCO0FBQ0g7QUFDSjs7QUFFRHRMLE1BQUFBLE1BQU0sQ0FBQzRPLEdBQVAsQ0FBV3hTLEVBQVgsRUFBZXdULFNBQWYsRUFBMEJ6UyxRQUExQjtBQUNILEtBM2xDRTtBQTZsQ0h1VCxJQUFBQSxZQUFZLEVBQUUsc0JBQVN0VSxFQUFULEVBQWFpQyxLQUFiLEVBQW9CO0FBQzlCLFVBQUl0QixPQUFPLEdBQUcsQ0FBQyxTQUFELEVBQVksTUFBWixFQUFvQixLQUFwQixFQUEyQixJQUEzQixFQUFpQyxFQUFqQyxDQUFkOztBQUNBLFdBQUssSUFBSWYsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR2UsT0FBTyxDQUFDZCxNQUE1QixFQUFvQ0QsQ0FBQyxFQUFyQyxFQUF5QztBQUNyQ2dFLFFBQUFBLE1BQU0sQ0FBQ2dFLEdBQVAsQ0FBVzVILEVBQVgsRUFBZVcsT0FBTyxDQUFDZixDQUFELENBQVAsR0FBYSxpQkFBNUIsRUFBK0NxQyxLQUEvQztBQUNIO0FBQ0osS0FsbUNFO0FBb21DSHNTLElBQUFBLGVBQWUsRUFBRSx5QkFBU3ZVLEVBQVQsRUFBYWlDLEtBQWIsRUFBb0I7QUFDakMsVUFBSXRCLE9BQU8sR0FBRyxDQUFDLFNBQUQsRUFBWSxNQUFaLEVBQW9CLEtBQXBCLEVBQTJCLElBQTNCLEVBQWlDLEVBQWpDLENBQWQ7O0FBQ0EsV0FBSyxJQUFJZixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHZSxPQUFPLENBQUNkLE1BQTVCLEVBQW9DRCxDQUFDLEVBQXJDLEVBQXlDO0FBQ3JDZ0UsUUFBQUEsTUFBTSxDQUFDZ0UsR0FBUCxDQUFXNUgsRUFBWCxFQUFlVyxPQUFPLENBQUNmLENBQUQsQ0FBUCxHQUFhLG9CQUE1QixFQUFrRHFDLEtBQWxEO0FBQ0g7QUFDSixLQXptQ0U7QUEybUNIdVMsSUFBQUEsUUFBUSxFQUFFLGtCQUFTMUIsTUFBVCxFQUFpQmhHLE1BQWpCLEVBQXlCOEIsUUFBekIsRUFBbUM7QUFDekMsVUFBSUEsUUFBUSxHQUFHQSxRQUFRLEdBQUdBLFFBQUgsR0FBYyxHQUFyQztBQUNBLFVBQUk2RixTQUFTLEdBQUczQixNQUFNLEdBQUdsUCxNQUFNLENBQUNrSixNQUFQLENBQWNnRyxNQUFkLEVBQXNCNUYsR0FBekIsR0FBK0IsQ0FBckQ7QUFDQSxVQUFJd0gsU0FBUyxHQUFHcFUsTUFBTSxDQUFDZ04sV0FBUCxJQUFzQjdOLFFBQVEsQ0FBQ1MsZUFBVCxDQUF5QnlVLFNBQS9DLElBQTREbFYsUUFBUSxDQUFDNEcsSUFBVCxDQUFjc08sU0FBMUUsSUFBdUYsQ0FBdkc7QUFDQSxVQUFJakcsSUFBSixFQUFVQyxFQUFWOztBQUVBLFVBQUk3QixNQUFKLEVBQVk7QUFDUjJILFFBQUFBLFNBQVMsR0FBR0EsU0FBUyxHQUFHM0gsTUFBeEI7QUFDSDs7QUFFRDRCLE1BQUFBLElBQUksR0FBR2dHLFNBQVA7QUFDQS9GLE1BQUFBLEVBQUUsR0FBRzhGLFNBQUw7QUFFQTdRLE1BQUFBLE1BQU0sQ0FBQzZLLE9BQVAsQ0FBZUMsSUFBZixFQUFxQkMsRUFBckIsRUFBeUJDLFFBQXpCLEVBQW1DLFVBQVMzTSxLQUFULEVBQWdCO0FBQy9DeEMsUUFBQUEsUUFBUSxDQUFDUyxlQUFULENBQXlCeVUsU0FBekIsR0FBcUMxUyxLQUFyQztBQUNBeEMsUUFBQUEsUUFBUSxDQUFDNEcsSUFBVCxDQUFjN0YsVUFBZCxDQUF5Qm1VLFNBQXpCLEdBQXFDMVMsS0FBckM7QUFDQXhDLFFBQUFBLFFBQVEsQ0FBQzRHLElBQVQsQ0FBY3NPLFNBQWQsR0FBMEIxUyxLQUExQjtBQUNILE9BSkQsRUFieUMsQ0FpQnJDO0FBQ1AsS0E3bkNFO0FBK25DSDBTLElBQUFBLFNBQVMsRUFBRSxtQkFBUzdILE1BQVQsRUFBaUI4QixRQUFqQixFQUEyQjtBQUNsQ2hMLE1BQUFBLE1BQU0sQ0FBQzRRLFFBQVAsQ0FBZ0IsSUFBaEIsRUFBc0IxSCxNQUF0QixFQUE4QjhCLFFBQTlCO0FBQ0gsS0Fqb0NFO0FBbW9DSGdHLElBQUFBLE9BQU8sRUFBRSxpQkFBU3hOLEdBQVQsRUFBYztBQUNuQixhQUFPQSxHQUFHLElBQUloRixLQUFLLENBQUN3UyxPQUFOLENBQWN4TixHQUFkLENBQWQ7QUFDSCxLQXJvQ0U7QUF1b0NIeU4sSUFBQUEsT0FBTyxFQUFFLGlCQUFTek4sR0FBVCxFQUFjO0FBQ25CLFdBQUssSUFBSTBJLElBQVQsSUFBaUIxSSxHQUFqQixFQUFzQjtBQUNsQixZQUFJQSxHQUFHLENBQUN6RixjQUFKLENBQW1CbU8sSUFBbkIsQ0FBSixFQUE4QjtBQUMxQixpQkFBTyxLQUFQO0FBQ0g7QUFDSjs7QUFFRCxhQUFPLElBQVA7QUFDSCxLQS9vQ0U7QUFpcENIZ0YsSUFBQUEsWUFBWSxFQUFFLHNCQUFTQyxJQUFULEVBQWU7QUFDekJBLE1BQUFBLElBQUksSUFBSSxFQUFSO0FBQ0EsVUFBSW5VLENBQUMsR0FBR21VLElBQUksQ0FBQ3ZQLEtBQUwsQ0FBVyxHQUFYLENBQVI7QUFDQSxVQUFJd1AsRUFBRSxHQUFHcFUsQ0FBQyxDQUFDLENBQUQsQ0FBVjtBQUNBLFVBQUlxVSxFQUFFLEdBQUdyVSxDQUFDLENBQUNmLE1BQUYsR0FBVyxDQUFYLEdBQWUsTUFBTWUsQ0FBQyxDQUFDLENBQUQsQ0FBdEIsR0FBNEIsRUFBckM7QUFDQSxVQUFJc1UsR0FBRyxHQUFHLGNBQVY7O0FBQ0EsYUFBT0EsR0FBRyxDQUFDdlAsSUFBSixDQUFTcVAsRUFBVCxDQUFQLEVBQXFCO0FBQ2pCQSxRQUFBQSxFQUFFLEdBQUdBLEVBQUUsQ0FBQ3hMLE9BQUgsQ0FBVzBMLEdBQVgsRUFBZ0IsT0FBTyxHQUFQLEdBQWEsSUFBN0IsQ0FBTDtBQUNIOztBQUNELGFBQU9GLEVBQUUsR0FBR0MsRUFBWjtBQUNILEtBM3BDRTtBQTZwQ0hFLElBQUFBLEtBQUssRUFBRSxpQkFBVztBQUNkLGFBQVExVixRQUFRLENBQUM0TCxhQUFULENBQXVCLE1BQXZCLEVBQStCZ0QsWUFBL0IsQ0FBNEMsV0FBNUMsTUFBNkQsS0FBckU7QUFDSCxLQS9wQ0U7QUFpcUNIK0csSUFBQUEsWUFBWSxFQUFFLHNCQUFTNVYsQ0FBVCxFQUFXO0FBQ3JCLGFBQU9BLENBQUMsQ0FBQ2dLLE9BQUYsQ0FBVSxTQUFWLEVBQXFCLFVBQVM2TCxDQUFULEVBQVc7QUFBQyxlQUFPQSxDQUFDLENBQUMsQ0FBRCxDQUFELENBQUtwRSxXQUFMLEVBQVA7QUFBMkIsT0FBNUQsQ0FBUDtBQUNILEtBbnFDRTtBQXFxQ0hxRSxJQUFBQSxhQUFhLEVBQUUsdUJBQVNoUSxHQUFULEVBQWM7QUFDekI7QUFDVCxVQUFJQSxHQUFHLEtBQUssSUFBUixJQUFnQkEsR0FBRyxLQUFLLE1BQTVCLEVBQW9DO0FBQ25DLGVBQU8sSUFBUDtBQUNBOztBQUVELFVBQUlBLEdBQUcsS0FBSyxLQUFSLElBQWlCQSxHQUFHLEtBQUssT0FBN0IsRUFBc0M7QUFDckMsZUFBTyxLQUFQO0FBQ0E7O0FBRVEsYUFBT0EsR0FBUDtBQUNILEtBaHJDRTtBQWtyQ0hpUSxJQUFBQSxPQUFPLEVBQUUsaUJBQVN2VixFQUFULEVBQWF3VixJQUFiLEVBQW1CO0FBQ3hCeFYsTUFBQUEsRUFBRSxDQUFDeVYsU0FBSCxHQUFlRCxJQUFmO0FBQ0gsS0FwckNFO0FBc3JDSEUsSUFBQUEsT0FBTyxFQUFFLGlCQUFTMVYsRUFBVCxFQUFhO0FBQ2xCLFVBQUlBLEVBQUosRUFBUTtBQUNKLGVBQU9BLEVBQUUsQ0FBQ3lWLFNBQVY7QUFDSDtBQUNKLEtBMXJDRTtBQTRyQ0hFLElBQUFBLGlCQUFpQixFQUFFLDZCQUFXO0FBQzFCLFVBQUl0UCxJQUFJLEdBQUc1RyxRQUFRLENBQUM0RyxJQUFwQjtBQUNBLFVBQUltUCxJQUFJLEdBQUcvVixRQUFRLENBQUNTLGVBQXBCO0FBRUEsYUFBT2tCLElBQUksQ0FBQ0MsR0FBTCxDQUFVZ0YsSUFBSSxDQUFDdVAsWUFBZixFQUE2QnZQLElBQUksQ0FBQ3dILFlBQWxDLEVBQWdEMkgsSUFBSSxDQUFDSyxZQUFyRCxFQUFtRUwsSUFBSSxDQUFDSSxZQUF4RSxFQUFzRkosSUFBSSxDQUFDM0gsWUFBM0YsQ0FBUDtBQUNILEtBanNDRTtBQW1zQ0hpSSxJQUFBQSxZQUFZLEVBQUUsd0JBQVc7QUFDckIsYUFBUSxDQUFDclcsUUFBUSxDQUFDc1csZ0JBQVQsSUFBNkJ0VyxRQUFRLENBQUNTLGVBQXZDLEVBQXdEeVUsU0FBaEU7QUFDSCxLQXJzQ0U7QUF1c0NIcUIsSUFBQUEsWUFBWSxFQUFFLHNCQUFTQyxLQUFULEVBQWdCQyxNQUFoQixFQUF3QjtBQUNsQyxVQUFNQyxRQUFRLEdBQUcsU0FBWEEsUUFBVyxDQUFTRixLQUFULEVBQWdCQyxNQUFoQixFQUF1QjtBQUNwQyxZQUFJRSxFQUFFLEdBQUduUCxRQUFRLENBQUNnUCxLQUFELEVBQU8sRUFBUCxDQUFSLEdBQXFCQyxNQUE5QjtBQUNBLFlBQUl2TCxDQUFDLEdBQUl5TCxFQUFFLEdBQUcsR0FBTixHQUFhLEdBQWIsR0FBb0JBLEVBQTVCO0FBQ0F6TCxRQUFBQSxDQUFDLEdBQUlBLENBQUMsQ0FBQ2xDLFFBQUYsQ0FBVyxFQUFYLEVBQWU1SSxNQUFmLEdBQXdCLENBQXpCLEdBQStCOEssQ0FBQyxDQUFDbEMsUUFBRixDQUFXLEVBQVgsQ0FBL0IsY0FBb0RrQyxDQUFDLENBQUNsQyxRQUFGLENBQVcsRUFBWCxDQUFwRCxDQUFKO0FBQ0EsZUFBT2tDLENBQVA7QUFDSCxPQUxEOztBQU9Bc0wsTUFBQUEsS0FBSyxHQUFJQSxLQUFLLENBQUMxTyxPQUFOLENBQWMsR0FBZCxLQUFvQixDQUFyQixHQUEwQjBPLEtBQUssQ0FBQzVRLFNBQU4sQ0FBZ0IsQ0FBaEIsRUFBa0I0USxLQUFLLENBQUNwVyxNQUF4QixDQUExQixHQUE0RG9XLEtBQXBFO0FBQ0FDLE1BQUFBLE1BQU0sR0FBR2pQLFFBQVEsQ0FBRSxNQUFJaVAsTUFBTCxHQUFhLEdBQWQsQ0FBakI7QUFFQSxhQUFPRCxLQUFLLGNBQU9FLFFBQVEsQ0FBQ0YsS0FBSyxDQUFDNVEsU0FBTixDQUFnQixDQUFoQixFQUFrQixDQUFsQixDQUFELEVBQXVCNlEsTUFBdkIsQ0FBZixTQUFnREMsUUFBUSxDQUFDRixLQUFLLENBQUM1USxTQUFOLENBQWdCLENBQWhCLEVBQWtCLENBQWxCLENBQUQsRUFBdUI2USxNQUF2QixDQUF4RCxTQUF5RkMsUUFBUSxDQUFDRixLQUFLLENBQUM1USxTQUFOLENBQWdCLENBQWhCLEVBQWtCLENBQWxCLENBQUQsRUFBdUI2USxNQUF2QixDQUFqRyxDQUFaO0FBQ0gsS0FudENFO0FBcXRDSEcsSUFBQUEsV0FBVyxFQUFFLHFCQUFTSixLQUFULEVBQWdCQyxNQUFoQixFQUF3QjtBQUNqQyxVQUFNSSxhQUFhLEdBQUcsU0FBaEJBLGFBQWdCLENBQVNMLEtBQVQsRUFBZ0JDLE1BQWhCLEVBQXVCO0FBQ3pDLFlBQUlFLEVBQUUsR0FBR25QLFFBQVEsQ0FBQ2dQLEtBQUQsRUFBTyxFQUFQLENBQVIsR0FBcUJDLE1BQTlCO0FBQ0EsWUFBSXZMLENBQUMsR0FBSXlMLEVBQUUsR0FBRyxDQUFOLEdBQVcsQ0FBWCxHQUFnQkEsRUFBeEI7QUFDQXpMLFFBQUFBLENBQUMsR0FBSUEsQ0FBQyxDQUFDbEMsUUFBRixDQUFXLEVBQVgsRUFBZTVJLE1BQWYsR0FBd0IsQ0FBekIsR0FBK0I4SyxDQUFDLENBQUNsQyxRQUFGLENBQVcsRUFBWCxDQUEvQixjQUFvRGtDLENBQUMsQ0FBQ2xDLFFBQUYsQ0FBVyxFQUFYLENBQXBELENBQUo7QUFFQSxlQUFPa0MsQ0FBUDtBQUNILE9BTkQ7O0FBUUFzTCxNQUFBQSxLQUFLLEdBQUlBLEtBQUssQ0FBQzFPLE9BQU4sQ0FBYyxHQUFkLEtBQW9CLENBQXJCLEdBQTBCME8sS0FBSyxDQUFDNVEsU0FBTixDQUFnQixDQUFoQixFQUFrQjRRLEtBQUssQ0FBQ3BXLE1BQXhCLENBQTFCLEdBQTREb1csS0FBcEU7QUFDQUMsTUFBQUEsTUFBTSxHQUFHalAsUUFBUSxDQUFFLE1BQUlpUCxNQUFMLEdBQWEsR0FBZCxDQUFqQjtBQUVBLGFBQU9ELEtBQUssY0FBT0ssYUFBYSxDQUFDTCxLQUFLLENBQUM1USxTQUFOLENBQWdCLENBQWhCLEVBQWtCLENBQWxCLENBQUQsRUFBdUI2USxNQUF2QixDQUFwQixTQUFxREksYUFBYSxDQUFDTCxLQUFLLENBQUM1USxTQUFOLENBQWdCLENBQWhCLEVBQWtCLENBQWxCLENBQUQsRUFBdUI2USxNQUF2QixDQUFsRSxTQUFtR0ksYUFBYSxDQUFDTCxLQUFLLENBQUM1USxTQUFOLENBQWdCLENBQWhCLEVBQWtCLENBQWxCLENBQUQsRUFBdUI2USxNQUF2QixDQUFoSCxDQUFaO0FBQ0gsS0FsdUNFO0FBb3VDSDtBQUNBL1IsSUFBQUEsUUFBUSxFQUFHLGtCQUFVRixLQUFWLEVBQWlCc1MsSUFBakIsRUFBdUJDLEtBQXZCLEVBQThCO0FBQ3hDO0FBQ0EsVUFBSXZTLEtBQUosRUFBVztBQUNWO0FBQ0EsT0FKdUMsQ0FNeEM7OztBQUNBQSxNQUFBQSxLQUFLLEdBQUsxQyxVQUFVLENBQUMsWUFBWTtBQUNoQ2dWLFFBQUFBLElBQUksR0FENEIsQ0FHaEM7QUFDQTs7QUFDQXRTLFFBQUFBLEtBQUssR0FBS1osU0FBVjtBQUNBLE9BTm1CLEVBTWpCbVQsS0FOaUIsQ0FBcEI7QUFPQSxLQW52Q0U7QUFxdkNIO0FBQ0FDLElBQUFBLFFBQVEsRUFBRSxrQkFBVXhTLEtBQVYsRUFBaUJzUyxJQUFqQixFQUF1QkMsS0FBdkIsRUFBOEI7QUFDdkM7QUFDQWhWLE1BQUFBLFlBQVksQ0FBQ3lDLEtBQUQsQ0FBWixDQUZ1QyxDQUl2Qzs7QUFDQUEsTUFBQUEsS0FBSyxHQUFLMUMsVUFBVSxDQUFDZ1YsSUFBRCxFQUFPQyxLQUFQLENBQXBCO0FBQ0EsS0E1dkNFO0FBOHZDSEUsSUFBQUEsU0FBUyxFQUFFLG1CQUFTelUsS0FBVCxFQUFnQjtBQUN2QixVQUFJLE9BQU9BLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDM0JBLFFBQUFBLEtBQUssR0FBR0EsS0FBSyxDQUFDdUgsT0FBTixDQUFjLElBQWQsRUFBb0IsSUFBcEIsQ0FBUjtBQUVBLFlBQUltTixPQUFPLEdBQUcxVSxLQUFLLENBQUN1SCxPQUFOLENBQWMsaUJBQWQsRUFBaUMsVUFBU29OLE9BQVQsRUFBa0I7QUFDN0QsaUJBQU8sTUFBTUEsT0FBTyxDQUFDdlIsU0FBUixDQUFrQixDQUFsQixFQUFxQnVSLE9BQU8sQ0FBQy9XLE1BQVIsR0FBaUIsQ0FBdEMsQ0FBTixHQUFpRCxJQUF4RDtBQUNILFNBRmEsQ0FBZDs7QUFJQSxZQUFJO0FBQ0FvQyxVQUFBQSxLQUFLLEdBQUc0VSxJQUFJLENBQUNDLEtBQUwsQ0FBV0gsT0FBWCxDQUFSO0FBQ0gsU0FGRCxDQUVFLE9BQU14USxDQUFOLEVBQVMsQ0FBRztBQUNqQjs7QUFFRCxhQUFPbEUsS0FBUDtBQUNILEtBNXdDRTtBQTh3Q0g4VSxJQUFBQSxrQkFBa0IsRUFBRSw0QkFBUzlVLEtBQVQsRUFBZ0IrVSxZQUFoQixFQUE4QjtBQUM5QyxVQUFJblIsS0FBSyxHQUFHLEtBQUtELFdBQUwsR0FBbUJDLEtBQS9CO0FBQ0EsVUFBSXRDLE1BQUo7QUFFQXRCLE1BQUFBLEtBQUssR0FBRzJCLE1BQU0sQ0FBQzhTLFNBQVAsQ0FBaUJ6VSxLQUFqQixDQUFSOztBQUVBLFVBQUksUUFBT0EsS0FBUCxNQUFpQixRQUFyQixFQUErQjtBQUMzQixZQUFJZ1YsU0FBSjtBQUNBLFlBQUlDLGdCQUFnQixHQUFHLENBQUMsQ0FBeEI7QUFDQSxZQUFJelEsVUFBSjs7QUFFQSxhQUFLLElBQUkrQixHQUFULElBQWdCdkcsS0FBaEIsRUFBdUI7QUFDbkIsY0FBSXVHLEdBQUcsS0FBSyxTQUFaLEVBQXVCO0FBQ25CL0IsWUFBQUEsVUFBVSxHQUFHLENBQWI7QUFDSCxXQUZELE1BRU87QUFDSEEsWUFBQUEsVUFBVSxHQUFHLEtBQUtYLGFBQUwsQ0FBbUIwQyxHQUFuQixJQUEwQixLQUFLMUMsYUFBTCxDQUFtQjBDLEdBQW5CLENBQTFCLEdBQW9EdkIsUUFBUSxDQUFDdUIsR0FBRCxDQUF6RTtBQUNIOztBQUVELGNBQUkvQixVQUFVLElBQUlaLEtBQWQsSUFBdUJZLFVBQVUsR0FBR3lRLGdCQUF4QyxFQUEwRDtBQUN0REQsWUFBQUEsU0FBUyxHQUFHek8sR0FBWjtBQUNBME8sWUFBQUEsZ0JBQWdCLEdBQUd6USxVQUFuQjtBQUNIO0FBQ0o7O0FBRUQsWUFBSXdRLFNBQUosRUFBZTtBQUNYMVQsVUFBQUEsTUFBTSxHQUFHdEIsS0FBSyxDQUFDZ1YsU0FBRCxDQUFkO0FBQ0gsU0FGRCxNQUVPO0FBQ0gxVCxVQUFBQSxNQUFNLEdBQUd0QixLQUFUO0FBQ0g7QUFDSixPQXZCRCxNQXVCTztBQUNIc0IsUUFBQUEsTUFBTSxHQUFHdEIsS0FBVDtBQUNIOztBQUVELGFBQU9zQixNQUFQO0FBQ0gsS0FoekNFO0FBa3pDSFMsSUFBQUEsSUFBSSxFQUFFLGNBQVNtVCxLQUFULEVBQWdCcFcsUUFBaEIsRUFBMEI7QUFDNUIsYUFBTyxHQUFHc0IsS0FBSCxDQUFTQyxJQUFULENBQWM2VSxLQUFkLEVBQXFCQyxHQUFyQixDQUF5QnJXLFFBQXpCLENBQVA7QUFDSCxLQXB6Q0U7QUFzekNIc1csSUFBQUEscUJBQXFCLEVBQUUsK0JBQVNwVixLQUFULEVBQWdCO0FBQ25DLFVBQUlzQixNQUFNLEdBQUcsSUFBYjtBQUNBdEIsTUFBQUEsS0FBSyxHQUFHMkIsTUFBTSxDQUFDOFMsU0FBUCxDQUFpQnpVLEtBQWpCLENBQVI7O0FBRUEsVUFBSyxRQUFPQSxLQUFQLE1BQWlCLFFBQXRCLEVBQWlDO0FBQzdCO0FBQ0EsWUFBS0EsS0FBSyxDQUFDLE9BQUQsQ0FBTCxLQUFtQm9CLFNBQXhCLEVBQW9DO0FBQ2hDLGNBQUlzSSxRQUFRLEdBQUcvSixNQUFNLENBQUN5RixJQUFQLENBQVlwRixLQUFLLENBQUMsT0FBRCxDQUFqQixFQUE0QixDQUE1QixDQUFmO0FBQ0FBLFVBQUFBLEtBQUssR0FBR0wsTUFBTSxDQUFDMFYsTUFBUCxDQUFjclYsS0FBSyxDQUFDLE9BQUQsQ0FBbkIsRUFBOEIsQ0FBOUIsQ0FBUjs7QUFFQSxjQUFLeEMsUUFBUSxDQUFDNEwsYUFBVCxDQUF1Qk0sUUFBdkIsTUFBcUMsSUFBMUMsRUFBaUQ7QUFDN0NwSSxZQUFBQSxNQUFNLEdBQUd0QixLQUFUO0FBQ0g7QUFDSjtBQUNKLE9BVkQsTUFVTztBQUNIc0IsUUFBQUEsTUFBTSxHQUFHdEIsS0FBVDtBQUNIOztBQUVELGFBQU9zQixNQUFQO0FBQ0gsS0F6MENFO0FBMjBDSGdVLElBQUFBLG1CQUFtQixFQUFFLDZCQUFTdFYsS0FBVCxFQUFnQjtBQUNqQyxVQUFJQSxLQUFLLEdBQUcyQixNQUFNLENBQUM4UyxTQUFQLENBQWlCelUsS0FBakIsQ0FBWjtBQUNBLFVBQUlzQixNQUFNLEdBQUdLLE1BQU0sQ0FBQ21ULGtCQUFQLENBQTBCOVUsS0FBMUIsQ0FBYjs7QUFFQSxVQUFLc0IsTUFBTSxLQUFLLElBQVgsSUFBbUJBLE1BQU0sQ0FBQyxPQUFELENBQU4sS0FBb0JGLFNBQTVDLEVBQXdEO0FBQ3BERSxRQUFBQSxNQUFNLEdBQUdLLE1BQU0sQ0FBQ3lULHFCQUFQLENBQTZCOVQsTUFBN0IsQ0FBVDtBQUNIOztBQUVELFVBQUtBLE1BQU0sS0FBSyxJQUFYLElBQW1CdEIsS0FBSyxLQUFLLElBQTdCLElBQXFDQSxLQUFLLENBQUMsU0FBRCxDQUFMLEtBQXFCb0IsU0FBL0QsRUFBMkU7QUFDdkVFLFFBQUFBLE1BQU0sR0FBR3RCLEtBQUssQ0FBQyxTQUFELENBQWQ7QUFDSDs7QUFFRCxhQUFPc0IsTUFBUDtBQUNILEtBeDFDRTtBQTAxQ0h5RCxJQUFBQSxtQkFBbUIsRUFBRSw2QkFBU3dRLFlBQVQsRUFBdUI7QUFDeEMsVUFBSUMsR0FBRyxHQUFHMUosZ0JBQWdCLENBQUN0TyxRQUFRLENBQUNTLGVBQVYsQ0FBaEIsQ0FBMkMyUSxnQkFBM0MsQ0FBNEQyRyxZQUE1RCxDQUFWOztBQUNBLFVBQUtDLEdBQUcsSUFBSUEsR0FBRyxDQUFDNVgsTUFBSixHQUFhLENBQXpCLEVBQTZCO0FBQ3pCNFgsUUFBQUEsR0FBRyxHQUFHQSxHQUFHLENBQUN2USxJQUFKLEVBQU47QUFDSDs7QUFFRCxhQUFPdVEsR0FBUDtBQUNILEtBajJDRTtBQW0yQ0hDLElBQUFBLFlBQVksRUFBRSxzQkFBU3JILE9BQVQsRUFBa0I7QUFDNUIsVUFBSXRELElBQUksR0FBR3NELE9BQU8sQ0FBQ2pELHFCQUFSLEVBQVg7QUFFQSxhQUNJTCxJQUFJLENBQUNHLEdBQUwsSUFBWSxDQUFaLElBQ0FILElBQUksQ0FBQ0ksSUFBTCxJQUFhLENBRGIsSUFFQUosSUFBSSxDQUFDNEssTUFBTCxLQUFnQnJYLE1BQU0sQ0FBQ3NYLFdBQVAsSUFBc0JuWSxRQUFRLENBQUNTLGVBQVQsQ0FBeUIyVixZQUEvRCxDQUZBLElBR0E5SSxJQUFJLENBQUNTLEtBQUwsS0FBZWxOLE1BQU0sQ0FBQ21OLFVBQVAsSUFBcUJoTyxRQUFRLENBQUNTLGVBQVQsQ0FBeUIyWCxXQUE3RCxDQUpKO0FBTUgsS0E1MkNFO0FBODJDSEMsSUFBQUEsa0JBQWtCLEVBQUUsNEJBQVMvVyxRQUFULEVBQW1CO0FBQ25DLFVBQUl0QixRQUFRLENBQUNzWSxVQUFULEtBQXdCLFNBQTVCLEVBQXVDO0FBQ25DdFksUUFBQUEsUUFBUSxDQUFDeUUsZ0JBQVQsQ0FBMEIsa0JBQTFCLEVBQThDbkQsUUFBOUM7QUFDSCxPQUZELE1BRU87QUFDSEEsUUFBQUEsUUFBUTtBQUNYO0FBQ0osS0FwM0NFO0FBczNDSGlYLElBQUFBLFFBQVEsRUFBRSxvQkFBVztBQUNqQixVQUFJO0FBQ0EsZUFBTzFYLE1BQU0sQ0FBQ2lRLElBQVAsS0FBZ0JqUSxNQUFNLENBQUM0TSxHQUE5QjtBQUNILE9BRkQsQ0FFRSxPQUFPL0csQ0FBUCxFQUFVO0FBQ1IsZUFBTyxJQUFQO0FBQ0g7QUFDSjtBQTUzQ0UsR0FBUDtBQTgzQ0gsQ0F2NUNZLEVBQWIsQyxDQXk1Q0E7OztBQUNBLElBQUksU0FBaUMsT0FBTzhSLE1BQU0sQ0FBQ0MsT0FBZCxLQUEwQixXQUEvRCxFQUE0RTtBQUN4RUQsRUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCdFUsTUFBakI7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy90aGVtZS9qcy9jb21wb25lbnRzL3V0aWwuanM/ZDY4MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAY2xhc3MgS1RVdGlsICBiYXNlIHV0aWxpemUgY2xhc3MgdGhhdCBwcml2aWRlcyBoZWxwZXIgZnVuY3Rpb25zXG4gKi9cblxuLy8gUG9seWZpbGxzXG5cbi8vIEVsZW1lbnQubWF0Y2hlcygpIHBvbHlmaWxsXG5pZiAoIUVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMpIHtcbiAgICBFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzID0gZnVuY3Rpb24ocykge1xuICAgICAgICB2YXIgbWF0Y2hlcyA9ICh0aGlzLmRvY3VtZW50IHx8IHRoaXMub3duZXJEb2N1bWVudCkucXVlcnlTZWxlY3RvckFsbChzKSxcbiAgICAgICAgICAgIGkgPSBtYXRjaGVzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKC0taSA+PSAwICYmIG1hdGNoZXMuaXRlbShpKSAhPT0gdGhpcykge31cbiAgICAgICAgcmV0dXJuIGkgPiAtMTtcbiAgICB9O1xufVxuXG4vKipcbiAqIEVsZW1lbnQuY2xvc2VzdCgpIHBvbHlmaWxsXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRWxlbWVudC9jbG9zZXN0I1BvbHlmaWxsXG4gKi9cbmlmICghRWxlbWVudC5wcm90b3R5cGUuY2xvc2VzdCkge1xuXHRFbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0ID0gZnVuY3Rpb24gKHMpIHtcblx0XHR2YXIgZWwgPSB0aGlzO1xuXHRcdHZhciBhbmNlc3RvciA9IHRoaXM7XG5cdFx0aWYgKCFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29udGFpbnMoZWwpKSByZXR1cm4gbnVsbDtcblx0XHRkbyB7XG5cdFx0XHRpZiAoYW5jZXN0b3IubWF0Y2hlcyhzKSkgcmV0dXJuIGFuY2VzdG9yO1xuXHRcdFx0YW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnRFbGVtZW50O1xuXHRcdH0gd2hpbGUgKGFuY2VzdG9yICE9PSBudWxsKTtcblx0XHRyZXR1cm4gbnVsbDtcblx0fTtcbn1cblxuLyoqXG4gKiBDaGlsZE5vZGUucmVtb3ZlKCkgcG9seWZpbGxcbiAqIGh0dHBzOi8vZ29tYWtldGhpbmdzLmNvbS9yZW1vdmluZy1hbi1lbGVtZW50LWZyb20tdGhlLWRvbS10aGUtZXM2LXdheS9cbiAqIEBhdXRob3IgQ2hyaXMgRmVyZGluYW5kaVxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbihmdW5jdGlvbiAoZWxlbSkge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGVsZW0ubGVuZ3RoOyBpKyspIHtcblx0XHRpZiAoIXdpbmRvd1tlbGVtW2ldXSB8fCAncmVtb3ZlJyBpbiB3aW5kb3dbZWxlbVtpXV0ucHJvdG90eXBlKSBjb250aW51ZTtcblx0XHR3aW5kb3dbZWxlbVtpXV0ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHRoaXMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzKTtcblx0XHR9O1xuXHR9XG59KShbJ0VsZW1lbnQnLCAnQ2hhcmFjdGVyRGF0YScsICdEb2N1bWVudFR5cGUnXSk7XG5cblxuLy9cbi8vIHJlcXVlc3RBbmltYXRpb25GcmFtZSBwb2x5ZmlsbCBieSBFcmlrIE3DtmxsZXIuXG4vLyAgV2l0aCBmaXhlcyBmcm9tIFBhdWwgSXJpc2ggYW5kIFRpbm8gWmlqZGVsXG4vL1xuLy8gIGh0dHA6Ly9wYXVsaXJpc2guY29tLzIwMTEvcmVxdWVzdGFuaW1hdGlvbmZyYW1lLWZvci1zbWFydC1hbmltYXRpbmcvXG4vLyAgaHR0cDovL215Lm9wZXJhLmNvbS9lbW9sbGVyL2Jsb2cvMjAxMS8xMi8yMC9yZXF1ZXN0YW5pbWF0aW9uZnJhbWUtZm9yLXNtYXJ0LWVyLWFuaW1hdGluZ1xuLy9cbi8vICBNSVQgbGljZW5zZVxuLy9cbihmdW5jdGlvbigpIHtcbiAgICB2YXIgbGFzdFRpbWUgPSAwO1xuICAgIHZhciB2ZW5kb3JzID0gWyd3ZWJraXQnLCAnbW96J107XG4gICAgZm9yICh2YXIgeCA9IDA7IHggPCB2ZW5kb3JzLmxlbmd0aCAmJiAhd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTsgKyt4KSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbdmVuZG9yc1t4XSArICdSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcbiAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID1cbiAgICAgICAgICAgIHdpbmRvd1t2ZW5kb3JzW3hdICsgJ0NhbmNlbEFuaW1hdGlvbkZyYW1lJ10gfHwgd2luZG93W3ZlbmRvcnNbeF0gKyAnQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ107XG4gICAgfVxuXG4gICAgaWYgKCF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKVxuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBjdXJyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICAgICAgdmFyIHRpbWVUb0NhbGwgPSBNYXRoLm1heCgwLCAxNiAtIChjdXJyVGltZSAtIGxhc3RUaW1lKSk7XG4gICAgICAgICAgICB2YXIgaWQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhjdXJyVGltZSArIHRpbWVUb0NhbGwpO1xuICAgICAgICAgICAgfSwgdGltZVRvQ2FsbCk7XG4gICAgICAgICAgICBsYXN0VGltZSA9IGN1cnJUaW1lICsgdGltZVRvQ2FsbDtcbiAgICAgICAgICAgIHJldHVybiBpZDtcbiAgICAgICAgfTtcblxuICAgIGlmICghd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKVxuICAgICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbihpZCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGlkKTtcbiAgICAgICAgfTtcbn0oKSk7XG5cbi8vIFNvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL2pzZXJ6L2pzX3BpZWNlL2Jsb2IvbWFzdGVyL0RPTS9QYXJlbnROb2RlL3ByZXBlbmQoKS9wcmVwZW5kKCkubWRcbihmdW5jdGlvbihhcnIpIHtcbiAgICBhcnIuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCdwcmVwZW5kJykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoaXRlbSwgJ3ByZXBlbmQnLCB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHJlcGVuZCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJnQXJyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSxcbiAgICAgICAgICAgICAgICAgICAgZG9jRnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblxuICAgICAgICAgICAgICAgIGFyZ0Fyci5mb3JFYWNoKGZ1bmN0aW9uKGFyZ0l0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzTm9kZSA9IGFyZ0l0ZW0gaW5zdGFuY2VvZiBOb2RlO1xuICAgICAgICAgICAgICAgICAgICBkb2NGcmFnLmFwcGVuZENoaWxkKGlzTm9kZSA/IGFyZ0l0ZW0gOiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShTdHJpbmcoYXJnSXRlbSkpKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0QmVmb3JlKGRvY0ZyYWcsIHRoaXMuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSkoW0VsZW1lbnQucHJvdG90eXBlLCBEb2N1bWVudC5wcm90b3R5cGUsIERvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlXSk7XG5cbi8vIGdldEF0dHJpYnV0ZU5hbWVzXG5pZiAoRWxlbWVudC5wcm90b3R5cGUuZ2V0QXR0cmlidXRlTmFtZXMgPT0gdW5kZWZpbmVkKSB7XG4gIEVsZW1lbnQucHJvdG90eXBlLmdldEF0dHJpYnV0ZU5hbWVzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzO1xuICAgIHZhciBsZW5ndGggPSBhdHRyaWJ1dGVzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gYXR0cmlidXRlc1tpXS5uYW1lO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG4vLyBHbG9iYWwgdmFyaWFibGVzXG53aW5kb3cuS1RVdGlsRWxlbWVudERhdGFTdG9yZSA9IHt9O1xud2luZG93LktUVXRpbEVsZW1lbnREYXRhU3RvcmVJRCA9IDA7XG53aW5kb3cuS1RVdGlsRGVsZWdhdGVkRXZlbnRIYW5kbGVycyA9IHt9O1xuXG52YXIgS1RVdGlsID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc2l6ZUhhbmRsZXJzID0gW107XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgd2luZG93IHJlc2l6ZSBldmVudCB3aXRoIHNvbWVcbiAgICAgKiBkZWxheSB0byBhdHRhY2ggZXZlbnQgaGFuZGxlcnMgdXBvbiByZXNpemUgY29tcGxldGVcbiAgICAgKi9cbiAgICB2YXIgX3dpbmRvd1Jlc2l6ZUhhbmRsZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF9ydW5SZXNpemVIYW5kbGVycyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gcmVpbml0aWFsaXplIG90aGVyIHN1YnNjcmliZWQgZWxlbWVudHNcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzaXplSGFuZGxlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZWFjaCA9IHJlc2l6ZUhhbmRsZXJzW2ldO1xuICAgICAgICAgICAgICAgIGVhY2guY2FsbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciB0aW1lcjtcblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBLVFV0aWwudGhyb3R0bGUodGltZXIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9ydW5SZXNpemVIYW5kbGVycygpO1xuICAgICAgICAgICAgfSwgMjAwKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDbGFzcyBtYWluIGluaXRpYWxpemVyLlxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gc2V0dGluZ3MuXG4gICAgICAgICAqIEByZXR1cm5zIG51bGxcbiAgICAgICAgICovXG4gICAgICAgIC8vbWFpbiBmdW5jdGlvbiB0byBpbml0aWF0ZSB0aGUgdGhlbWVcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oc2V0dGluZ3MpIHtcbiAgICAgICAgICAgIF93aW5kb3dSZXNpemVIYW5kbGVyKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkZHMgd2luZG93IHJlc2l6ZSBldmVudCBoYW5kbGVyLlxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBmdW5jdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGFkZFJlc2l6ZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXNpemVIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVtb3ZlcyB3aW5kb3cgcmVzaXplIGV2ZW50IGhhbmRsZXIuXG4gICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVtb3ZlUmVzaXplSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzaXplSGFuZGxlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2sgPT09IHJlc2l6ZUhhbmRsZXJzW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXNpemVIYW5kbGVyc1tpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRyaWdnZXIgd2luZG93IHJlc2l6ZSBoYW5kbGVycy5cbiAgICAgICAgICovXG4gICAgICAgIHJ1blJlc2l6ZUhhbmRsZXJzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIF9ydW5SZXNpemVIYW5kbGVycygpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlc2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mKEV2ZW50KSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIC8vIG1vZGVybiBicm93c2Vyc1xuICAgICAgICAgICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgncmVzaXplJykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBmb3IgSUUgYW5kIG90aGVyIG9sZCBicm93c2Vyc1xuICAgICAgICAgICAgICAgIC8vIGNhdXNlcyBkZXByZWNhdGlvbiB3YXJuaW5nIG9uIG1vZGVybiBicm93c2Vyc1xuICAgICAgICAgICAgICAgIHZhciBldnQgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ1VJRXZlbnRzJyk7XG4gICAgICAgICAgICAgICAgZXZ0LmluaXRVSUV2ZW50KCdyZXNpemUnLCB0cnVlLCBmYWxzZSwgd2luZG93LCAwKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgR0VUIHBhcmFtZXRlciB2YWx1ZSBmcm9tIFVSTC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtTmFtZSBQYXJhbWV0ZXIgbmFtZS5cbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIGdldFVSTFBhcmFtOiBmdW5jdGlvbihwYXJhbU5hbWUpIHtcbiAgICAgICAgICAgIHZhciBzZWFyY2hTdHJpbmcgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKSxcbiAgICAgICAgICAgICAgICBpLCB2YWwsIHBhcmFtcyA9IHNlYXJjaFN0cmluZy5zcGxpdChcIiZcIik7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YWwgPSBwYXJhbXNbaV0uc3BsaXQoXCI9XCIpO1xuICAgICAgICAgICAgICAgIGlmICh2YWxbMF0gPT0gcGFyYW1OYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmVzY2FwZSh2YWxbMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENoZWNrcyB3aGV0aGVyIGN1cnJlbnQgZGV2aWNlIGlzIG1vYmlsZSB0b3VjaC5cbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICBpc01vYmlsZURldmljZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGVzdCA9ICh0aGlzLmdldFZpZXdQb3J0KCkud2lkdGggPCB0aGlzLmdldEJyZWFrcG9pbnQoJ2xnJykgPyB0cnVlIDogZmFsc2UpO1xuXG4gICAgICAgICAgICBpZiAodGVzdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAvLyBGb3IgdXNlIHdpdGhpbiBub3JtYWwgd2ViIGNsaWVudHNcbiAgICAgICAgICAgICAgICB0ZXN0ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvaVBhZC9pKSAhPSBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGVzdDtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2hlY2tzIHdoZXRoZXIgY3VycmVudCBkZXZpY2UgaXMgZGVza3RvcC5cbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICBpc0Rlc2t0b3BEZXZpY2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIEtUVXRpbC5pc01vYmlsZURldmljZSgpID8gZmFsc2UgOiB0cnVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIGJyb3dzZXIgd2luZG93IHZpZXdwb3J0IHNpemUuIFJlZjpcbiAgICAgICAgICogaHR0cDovL2FuZHlsYW5ndG9uLmNvLnVrL2FydGljbGVzL2phdmFzY3JpcHQvZ2V0LXZpZXdwb3J0LXNpemUtamF2YXNjcmlwdC9cbiAgICAgICAgICogQHJldHVybnMge29iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIGdldFZpZXdQb3J0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBlID0gd2luZG93LFxuICAgICAgICAgICAgICAgIGEgPSAnaW5uZXInO1xuICAgICAgICAgICAgaWYgKCEoJ2lubmVyV2lkdGgnIGluIHdpbmRvdykpIHtcbiAgICAgICAgICAgICAgICBhID0gJ2NsaWVudCc7XG4gICAgICAgICAgICAgICAgZSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCB8fCBkb2N1bWVudC5ib2R5O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBlW2EgKyAnV2lkdGgnXSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGVbYSArICdIZWlnaHQnXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcblxuXHRcdC8qKlxuICAgICAgICAgKiBDaGVja3Mgd2hldGhlciBnaXZlbiBkZXZpY2UgbW9kZSBpcyBjdXJyZW50bHkgYWN0aXZhdGVkLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZSBSZXNwb25zaXZlIG1vZGUgbmFtZShlLmc6IGRlc2t0b3AsXG4gICAgICAgICAqICAgICBkZXNrdG9wLWFuZC10YWJsZXQsIHRhYmxldCwgdGFibGV0LWFuZC1tb2JpbGUsIG1vYmlsZSlcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICBpc0JyZWFrcG9pbnRVcDogZnVuY3Rpb24obW9kZSkge1xuICAgICAgICAgICAgdmFyIHdpZHRoID0gdGhpcy5nZXRWaWV3UG9ydCgpLndpZHRoO1xuXHRcdFx0dmFyIGJyZWFrcG9pbnQgPSB0aGlzLmdldEJyZWFrcG9pbnQobW9kZSk7XG5cblx0XHRcdHJldHVybiAod2lkdGggPj0gYnJlYWtwb2ludCk7XG4gICAgICAgIH0sXG5cblx0XHRpc0JyZWFrcG9pbnREb3duOiBmdW5jdGlvbihtb2RlKSB7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSB0aGlzLmdldFZpZXdQb3J0KCkud2lkdGg7XG5cdFx0XHR2YXIgYnJlYWtwb2ludCA9IHRoaXMuZ2V0QnJlYWtwb2ludChtb2RlKTtcblxuXHRcdFx0cmV0dXJuICh3aWR0aCA8IGJyZWFrcG9pbnQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldFZpZXdwb3J0V2lkdGg6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Vmlld1BvcnQoKS53aWR0aDtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2VuZXJhdGVzIHVuaXF1ZSBJRCBmb3IgZ2l2ZSBwcmVmaXguXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcmVmaXggUHJlZml4IGZvciBnZW5lcmF0ZWQgSURcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICBnZXRVbmlxdWVJZDogZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgICAgICAgICByZXR1cm4gcHJlZml4ICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG5ldyBEYXRlKCkpLmdldFRpbWUoKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgd2luZG93IHdpZHRoIGZvciBnaXZlIGJyZWFrcG9pbnQgbW9kZS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGUgUmVzcG9uc2l2ZSBtb2RlIG5hbWUoZS5nOiB4bCwgbGcsIG1kLCBzbSlcbiAgICAgICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIGdldEJyZWFrcG9pbnQ6IGZ1bmN0aW9uKGJyZWFrcG9pbnQpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0Q3NzVmFyaWFibGVWYWx1ZSgnLS1icy0nICsgYnJlYWtwb2ludCk7XG5cbiAgICAgICAgICAgIGlmICggdmFsdWUgKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUludCh2YWx1ZS50cmltKCkpO1xuICAgICAgICAgICAgfSBcblxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGVja3Mgd2hldGhlciBvYmplY3QgaGFzIHByb3BlcnR5IG1hdGNocyBnaXZlbiBrZXkgcGF0aC5cbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IG9iaiBPYmplY3QgY29udGFpbnMgdmFsdWVzIHBhaXJlZCB3aXRoIGdpdmVuIGtleSBwYXRoXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlzIEtleXMgcGF0aCBzZXBlcmF0ZWQgd2l0aCBkb3RzXG4gICAgICAgICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICBpc3NldDogZnVuY3Rpb24ob2JqLCBrZXlzKSB7XG4gICAgICAgICAgICB2YXIgc3RvbmU7XG5cbiAgICAgICAgICAgIGtleXMgPSBrZXlzIHx8ICcnO1xuXG4gICAgICAgICAgICBpZiAoa2V5cy5pbmRleE9mKCdbJykgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBvYmplY3QgcGF0aCBub3RhdGlvbi4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAga2V5cyA9IGtleXMuc3BsaXQoJy4nKTtcblxuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGlmIChvYmogPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3RvbmUgPSBrZXlzLnNoaWZ0KCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIW9iai5oYXNPd25Qcm9wZXJ0eShzdG9uZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG9iaiA9IG9ialtzdG9uZV07XG5cbiAgICAgICAgICAgIH0gd2hpbGUgKGtleXMubGVuZ3RoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgaGlnaGVzdCB6LWluZGV4IG9mIHRoZSBnaXZlbiBlbGVtZW50IHBhcmVudHNcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGVsIGpRdWVyeSBlbGVtZW50IG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0SGlnaGVzdFppbmRleDogZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbiwgdmFsdWU7XG5cbiAgICAgICAgICAgIHdoaWxlIChlbCAmJiBlbCAhPT0gZG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBJZ25vcmUgei1pbmRleCBpZiBwb3NpdGlvbiBpcyBzZXQgdG8gYSB2YWx1ZSB3aGVyZSB6LWluZGV4IGlzIGlnbm9yZWQgYnkgdGhlIGJyb3dzZXJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIG1ha2VzIGJlaGF2aW9yIG9mIHRoaXMgZnVuY3Rpb24gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnNcbiAgICAgICAgICAgICAgICAvLyBXZWJLaXQgYWx3YXlzIHJldHVybnMgYXV0byBpZiB0aGUgZWxlbWVudCBpcyBwb3NpdGlvbmVkXG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSBLVFV0aWwuY3NzKGVsLCAncG9zaXRpb24nKTtcblxuICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcInJlbGF0aXZlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBJRSByZXR1cm5zIDAgd2hlbiB6SW5kZXggaXMgbm90IHNwZWNpZmllZFxuICAgICAgICAgICAgICAgICAgICAvLyBvdGhlciBicm93c2VycyByZXR1cm4gYSBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgaWdub3JlIHRoZSBjYXNlIG9mIG5lc3RlZCBlbGVtZW50cyB3aXRoIGFuIGV4cGxpY2l0IHZhbHVlIG9mIDBcbiAgICAgICAgICAgICAgICAgICAgLy8gPGRpdiBzdHlsZT1cInotaW5kZXg6IC0xMDtcIj48ZGl2IHN0eWxlPVwiei1pbmRleDogMDtcIj48L2Rpdj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUludChLVFV0aWwuY3NzKGVsLCAnei1pbmRleCcpKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHZhbHVlKSAmJiB2YWx1ZSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZWwgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGVsZW1lbnQgaGFzIGFueSBwYXJlbnQgd2l0aCBmaXhlZCBwb3NpdGlvbmZyZWdcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGVsIGpRdWVyeSBlbGVtZW50IG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIGhhc0ZpeGVkUG9zaXRpb25lZFBhcmVudDogZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbjtcblxuICAgICAgICAgICAgd2hpbGUgKGVsICYmIGVsICE9PSBkb2N1bWVudCkge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gS1RVdGlsLmNzcyhlbCwgJ3Bvc2l0aW9uJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPT09IFwiZml4ZWRcIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlbCA9IGVsLnBhcmVudE5vZGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2ltdWxhdGVzIGRlbGF5XG4gICAgICAgICAqL1xuICAgICAgICBzbGVlcDogZnVuY3Rpb24obWlsbGlzZWNvbmRzKSB7XG4gICAgICAgICAgICB2YXIgc3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMWU3OyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnQpID4gbWlsbGlzZWNvbmRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyByYW5kb21seSBnZW5lcmF0ZWQgaW50ZWdlciB2YWx1ZSB3aXRoaW4gZ2l2ZW4gbWluIGFuZCBtYXggcmFuZ2VcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG1pbiBSYW5nZSBzdGFydCB2YWx1ZVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbWF4IFJhbmdlIGVuZCB2YWx1ZVxuICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0UmFuZG9tSW50OiBmdW5jdGlvbihtaW4sIG1heCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENoZWNrcyB3aGV0aGVyIEFuZ3VsYXIgbGlicmFyeSBpcyBpbmNsdWRlZFxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIGlzQW5ndWxhclZlcnNpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5ab25lICE9PSB1bmRlZmluZWQgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gRGVlcCBleHRlbmQ6ICAkLmV4dGVuZCh0cnVlLCB7fSwgb2JqQSwgb2JqQik7XG4gICAgICAgIGRlZXBFeHRlbmQ6IGZ1bmN0aW9uKG91dCkge1xuICAgICAgICAgICAgb3V0ID0gb3V0IHx8IHt9O1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBvYmogPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICAgICAgaWYgKCFvYmopIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIGJhc2VkIG9uIGh0dHBzOi8vamF2YXNjcmlwdHdlYmxvZy53b3JkcHJlc3MuY29tLzIwMTEvMDgvMDgvZml4aW5nLXRoZS1qYXZhc2NyaXB0LXR5cGVvZi1vcGVyYXRvci9cbiAgICAgICAgICAgICAgICAgICAgaWYgKCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqW2tleV0pID09PSAnW29iamVjdCBPYmplY3RdJyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dFtrZXldID0gS1RVdGlsLmRlZXBFeHRlbmQob3V0W2tleV0sIG9ialtrZXldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgb3V0W2tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gZXh0ZW5kOiAgJC5leHRlbmQoe30sIG9iakEsIG9iakIpO1xuICAgICAgICBleHRlbmQ6IGZ1bmN0aW9uKG91dCkge1xuICAgICAgICAgICAgb3V0ID0gb3V0IHx8IHt9O1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICghYXJndW1lbnRzW2ldKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBhcmd1bWVudHNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXS5oYXNPd25Qcm9wZXJ0eShrZXkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0W2tleV0gPSBhcmd1bWVudHNbaV1ba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0Qm9keTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGVsZW1lbnQgaGFzIGdpdmVuIGNsYXNzZXNcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGVsIGpRdWVyeSBlbGVtZW50IG9iamVjdFxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gQ2xhc3NlcyBzdHJpbmdcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICBoYXNDbGFzc2VzOiBmdW5jdGlvbihlbCwgY2xhc3Nlcykge1xuICAgICAgICAgICAgaWYgKCFlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGNsYXNzZXNBcnIgPSBjbGFzc2VzLnNwbGl0KFwiIFwiKTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbGFzc2VzQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKEtUVXRpbC5oYXNDbGFzcyhlbCwgS1RVdGlsLnRyaW0oY2xhc3Nlc0FycltpXSkpID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGhhc0NsYXNzOiBmdW5jdGlvbihlbCwgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICBpZiAoIWVsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZWwuY2xhc3NMaXN0ID8gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkgOiBuZXcgUmVnRXhwKCdcXFxcYicgKyBjbGFzc05hbWUgKyAnXFxcXGInKS50ZXN0KGVsLmNsYXNzTmFtZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uKGVsLCBjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIGlmICghZWwgfHwgdHlwZW9mIGNsYXNzTmFtZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjbGFzc05hbWVzID0gY2xhc3NOYW1lLnNwbGl0KCcgJyk7XG5cbiAgICAgICAgICAgIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsYXNzTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsYXNzTmFtZXNbaV0gJiYgY2xhc3NOYW1lc1tpXS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKEtUVXRpbC50cmltKGNsYXNzTmFtZXNbaV0pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIUtUVXRpbC5oYXNDbGFzcyhlbCwgY2xhc3NOYW1lKSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgY2xhc3NOYW1lcy5sZW5ndGg7IHgrKykge1xuICAgICAgICAgICAgICAgICAgICBlbC5jbGFzc05hbWUgKz0gJyAnICsgS1RVdGlsLnRyaW0oY2xhc3NOYW1lc1t4XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbihlbCwgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgaWYgKCFlbCB8fCB0eXBlb2YgY2xhc3NOYW1lID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGNsYXNzTmFtZXMgPSBjbGFzc05hbWUuc3BsaXQoJyAnKTtcblxuICAgICAgICAgICAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xhc3NOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKEtUVXRpbC50cmltKGNsYXNzTmFtZXNbaV0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEtUVXRpbC5oYXNDbGFzcyhlbCwgY2xhc3NOYW1lKSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgY2xhc3NOYW1lcy5sZW5ndGg7IHgrKykge1xuICAgICAgICAgICAgICAgICAgICBlbC5jbGFzc05hbWUgPSBlbC5jbGFzc05hbWUucmVwbGFjZShuZXcgUmVnRXhwKCdcXFxcYicgKyBLVFV0aWwudHJpbShjbGFzc05hbWVzW3hdKSArICdcXFxcYicsICdnJyksICcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdHJpZ2dlckN1c3RvbUV2ZW50OiBmdW5jdGlvbihlbCwgZXZlbnROYW1lLCBkYXRhKSB7XG4gICAgICAgICAgICB2YXIgZXZlbnQ7XG4gICAgICAgICAgICBpZiAod2luZG93LkN1c3RvbUV2ZW50KSB7XG4gICAgICAgICAgICAgICAgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoZXZlbnROYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgIGRldGFpbDogZGF0YVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgICAgICAgICAgICAgIGV2ZW50LmluaXRDdXN0b21FdmVudChldmVudE5hbWUsIHRydWUsIHRydWUsIGRhdGEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgfSxcblxuICAgICAgICB0cmlnZ2VyRXZlbnQ6IGZ1bmN0aW9uKG5vZGUsIGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIHVzZSB0aGUgb3duZXJEb2N1bWVudCBmcm9tIHRoZSBwcm92aWRlZCBub2RlIHRvIGF2b2lkIGNyb3NzLXdpbmRvdyBwcm9ibGVtc1xuICAgICAgICAgICAgdmFyIGRvYztcblxuICAgICAgICAgICAgaWYgKG5vZGUub3duZXJEb2N1bWVudCkge1xuICAgICAgICAgICAgICAgIGRvYyA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PSA5KSB7XG4gICAgICAgICAgICAgICAgLy8gdGhlIG5vZGUgbWF5IGJlIHRoZSBkb2N1bWVudCBpdHNlbGYsIG5vZGVUeXBlIDkgPSBET0NVTUVOVF9OT0RFXG4gICAgICAgICAgICAgICAgZG9jID0gbm9kZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBub2RlIHBhc3NlZCB0byBmaXJlRXZlbnQ6IFwiICsgbm9kZS5pZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChub2RlLmRpc3BhdGNoRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBHZWNrby1zdHlsZSBhcHByb2FjaCAobm93IHRoZSBzdGFuZGFyZCkgdGFrZXMgbW9yZSB3b3JrXG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50Q2xhc3MgPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgLy8gRGlmZmVyZW50IGV2ZW50cyBoYXZlIGRpZmZlcmVudCBldmVudCBjbGFzc2VzLlxuICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgc3dpdGNoIHN0YXRlbWVudCBjYW4ndCBtYXAgYW4gZXZlbnROYW1lIHRvIGFuIGV2ZW50Q2xhc3MsXG4gICAgICAgICAgICAgICAgLy8gdGhlIGV2ZW50IGZpcmluZyBpcyBnb2luZyB0byBmYWlsLlxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZXZlbnROYW1lKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImNsaWNrXCI6IC8vIERpc3BhdGNoaW5nIG9mICdjbGljaycgYXBwZWFycyB0byBub3Qgd29yayBjb3JyZWN0bHkgaW4gU2FmYXJpLiBVc2UgJ21vdXNlZG93bicgb3IgJ21vdXNldXAnIGluc3RlYWQuXG4gICAgICAgICAgICAgICAgY2FzZSBcIm1vdXNlZW50ZXJcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwibW91c2VsZWF2ZVwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJtb3VzZWRvd25cIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwibW91c2V1cFwiOlxuICAgICAgICAgICAgICAgICAgICBldmVudENsYXNzID0gXCJNb3VzZUV2ZW50c1wiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgXCJmb2N1c1wiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJjaGFuZ2VcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiYmx1clwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRDbGFzcyA9IFwiSFRNTEV2ZW50c1wiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IFwiZmlyZUV2ZW50OiBDb3VsZG4ndCBmaW5kIGFuIGV2ZW50IGNsYXNzIGZvciBldmVudCAnXCIgKyBldmVudE5hbWUgKyBcIicuXCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSBkb2MuY3JlYXRlRXZlbnQoZXZlbnRDbGFzcyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgYnViYmxlcyA9IGV2ZW50TmFtZSA9PSBcImNoYW5nZVwiID8gZmFsc2UgOiB0cnVlO1xuICAgICAgICAgICAgICAgIGV2ZW50LmluaXRFdmVudChldmVudE5hbWUsIGJ1YmJsZXMsIHRydWUpOyAvLyBBbGwgZXZlbnRzIGNyZWF0ZWQgYXMgYnViYmxpbmcgYW5kIGNhbmNlbGFibGUuXG5cbiAgICAgICAgICAgICAgICBldmVudC5zeW50aGV0aWMgPSB0cnVlOyAvLyBhbGxvdyBkZXRlY3Rpb24gb2Ygc3ludGhldGljIGV2ZW50c1xuICAgICAgICAgICAgICAgIC8vIFRoZSBzZWNvbmQgcGFyYW1ldGVyIHNheXMgZ28gYWhlYWQgd2l0aCB0aGUgZGVmYXVsdCBhY3Rpb25cbiAgICAgICAgICAgICAgICBub2RlLmRpc3BhdGNoRXZlbnQoZXZlbnQsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChub2RlLmZpcmVFdmVudCkge1xuICAgICAgICAgICAgICAgIC8vIElFLW9sZCBzY2hvb2wgc3R5bGVcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSBkb2MuY3JlYXRlRXZlbnRPYmplY3QoKTtcbiAgICAgICAgICAgICAgICBldmVudC5zeW50aGV0aWMgPSB0cnVlOyAvLyBhbGxvdyBkZXRlY3Rpb24gb2Ygc3ludGhldGljIGV2ZW50c1xuICAgICAgICAgICAgICAgIG5vZGUuZmlyZUV2ZW50KFwib25cIiArIGV2ZW50TmFtZSwgZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGluZGV4OiBmdW5jdGlvbiggZWwgKXtcbiAgICAgICAgICAgIHZhciBjID0gZWwucGFyZW50Tm9kZS5jaGlsZHJlbiwgaSA9IDA7XG4gICAgICAgICAgICBmb3IoOyBpIDwgYy5sZW5ndGg7IGkrKyApXG4gICAgICAgICAgICAgICAgaWYoIGNbaV0gPT0gZWwgKSByZXR1cm4gaTtcbiAgICAgICAgfSxcblxuICAgICAgICB0cmltOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcudHJpbSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50VHJpZ2dlcmVkOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBpZiAoZS5jdXJyZW50VGFyZ2V0LmRhdGFzZXQudHJpZ2dlcmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGUuY3VycmVudFRhcmdldC5kYXRhc2V0LnRyaWdnZXJlZCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgaWYgKGVsICYmIGVsLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBmaW5kOiBmdW5jdGlvbihwYXJlbnQsIHF1ZXJ5KSB7XG4gICAgICAgICAgICBpZiAoIHBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnQucXVlcnlTZWxlY3RvcihxdWVyeSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGZpbmRBbGw6IGZ1bmN0aW9uKHBhcmVudCwgcXVlcnkpIHtcbiAgICAgICAgICAgIGlmICggcGFyZW50ICE9PSBudWxsICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnQucXVlcnlTZWxlY3RvckFsbChxdWVyeSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGluc2VydEFmdGVyOiBmdW5jdGlvbihlbCwgcmVmZXJlbmNlTm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlZmVyZW5jZU5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZWwsIHJlZmVyZW5jZU5vZGUubmV4dFNpYmxpbmcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHBhcmVudHM6IGZ1bmN0aW9uKGVsZW0sIHNlbGVjdG9yKSB7XG4gICAgICAgICAgICAvLyBTZXQgdXAgYSBwYXJlbnQgYXJyYXlcbiAgICAgICAgICAgIHZhciBwYXJlbnRzID0gW107XG5cbiAgICAgICAgICAgIC8vIFB1c2ggZWFjaCBwYXJlbnQgZWxlbWVudCB0byB0aGUgYXJyYXlcbiAgICAgICAgICAgIGZvciAoIDsgZWxlbSAmJiBlbGVtICE9PSBkb2N1bWVudDsgZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSApIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0ubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudHMucHVzaChlbGVtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGFyZW50cy5wdXNoKGVsZW0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZXR1cm4gb3VyIHBhcmVudCBhcnJheVxuICAgICAgICAgICAgcmV0dXJuIHBhcmVudHM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2hpbGRyZW46IGZ1bmN0aW9uKGVsLCBzZWxlY3RvciwgbG9nKSB7XG4gICAgICAgICAgICBpZiAoIWVsIHx8ICFlbC5jaGlsZE5vZGVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXSxcbiAgICAgICAgICAgICAgICBpID0gMCxcbiAgICAgICAgICAgICAgICBsID0gZWwuY2hpbGROb2Rlcy5sZW5ndGg7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGk7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWwuY2hpbGROb2Rlc1tpXS5ub2RlVHlwZSA9PSAxICYmIEtUVXRpbC5tYXRjaGVzKGVsLmNoaWxkTm9kZXNbaV0sIHNlbGVjdG9yLCBsb2cpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGVsLmNoaWxkTm9kZXNbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcblxuICAgICAgICBjaGlsZDogZnVuY3Rpb24oZWwsIHNlbGVjdG9yLCBsb2cpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IEtUVXRpbC5jaGlsZHJlbihlbCwgc2VsZWN0b3IsIGxvZyk7XG5cbiAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbiA/IGNoaWxkcmVuWzBdIDogbnVsbDtcbiAgICAgICAgfSxcblxuICAgICAgICBtYXRjaGVzOiBmdW5jdGlvbihlbCwgc2VsZWN0b3IsIGxvZykge1xuICAgICAgICAgICAgdmFyIHAgPSBFbGVtZW50LnByb3RvdHlwZTtcbiAgICAgICAgICAgIHZhciBmID0gcC5tYXRjaGVzIHx8IHAud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IHAubW96TWF0Y2hlc1NlbGVjdG9yIHx8IHAubXNNYXRjaGVzU2VsZWN0b3IgfHwgZnVuY3Rpb24ocykge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXS5pbmRleE9mLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzKSwgdGhpcykgIT09IC0xO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKGVsICYmIGVsLnRhZ05hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZi5jYWxsKGVsLCBzZWxlY3Rvcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBkYXRhOiBmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKG5hbWUsIGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsLmN1c3RvbURhdGFUYWcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LktUVXRpbEVsZW1lbnREYXRhU3RvcmVJRCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuY3VzdG9tRGF0YVRhZyA9IHdpbmRvdy5LVFV0aWxFbGVtZW50RGF0YVN0b3JlSUQ7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LktUVXRpbEVsZW1lbnREYXRhU3RvcmVbZWwuY3VzdG9tRGF0YVRhZ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LktUVXRpbEVsZW1lbnREYXRhU3RvcmVbZWwuY3VzdG9tRGF0YVRhZ10gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5LVFV0aWxFbGVtZW50RGF0YVN0b3JlW2VsLmN1c3RvbURhdGFUYWddW25hbWVdID0gZGF0YTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbC5jdXN0b21EYXRhVGFnID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFzKG5hbWUpID8gd2luZG93LktUVXRpbEVsZW1lbnREYXRhU3RvcmVbZWwuY3VzdG9tRGF0YVRhZ11bbmFtZV0gOiBudWxsO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYXM6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsLmN1c3RvbURhdGFUYWcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh3aW5kb3cuS1RVdGlsRWxlbWVudERhdGFTdG9yZVtlbC5jdXN0b21EYXRhVGFnXSAmJiB3aW5kb3cuS1RVdGlsRWxlbWVudERhdGFTdG9yZVtlbC5jdXN0b21EYXRhVGFnXVtuYW1lXSkgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWwgJiYgdGhpcy5oYXMobmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB3aW5kb3cuS1RVdGlsRWxlbWVudERhdGFTdG9yZVtlbC5jdXN0b21EYXRhVGFnXVtuYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgb3V0ZXJXaWR0aDogZnVuY3Rpb24oZWwsIG1hcmdpbikge1xuICAgICAgICAgICAgdmFyIHdpZHRoO1xuXG4gICAgICAgICAgICBpZiAobWFyZ2luID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgd2lkdGggPSBwYXJzZUZsb2F0KGVsLm9mZnNldFdpZHRoKTtcbiAgICAgICAgICAgICAgICB3aWR0aCArPSBwYXJzZUZsb2F0KEtUVXRpbC5jc3MoZWwsICdtYXJnaW4tbGVmdCcpKSArIHBhcnNlRmxvYXQoS1RVdGlsLmNzcyhlbCwgJ21hcmdpbi1yaWdodCcpKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHdpZHRoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgd2lkdGggPSBwYXJzZUZsb2F0KGVsLm9mZnNldFdpZHRoKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB3aWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBvZmZzZXQ6IGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICB2YXIgcmVjdCwgd2luO1xuXG4gICAgICAgICAgICBpZiAoICFlbCApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuICAgICAgICAgICAgLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4gICAgICAgICAgICAvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG4gICAgICAgICAgICAvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3JcblxuICAgICAgICAgICAgaWYgKCAhZWwuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1JcbiAgICAgICAgICAgIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIHdpbiA9IGVsLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcbiAgICAgICAgICAgICAgICBsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXQsXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHdpbmRvdy5pbm5lcldpZHRoIC0gKGVsLm9mZnNldExlZnQgKyBlbC5vZmZzZXRXaWR0aClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG5cbiAgICAgICAgaGVpZ2h0OiBmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgcmV0dXJuIEtUVXRpbC5jc3MoZWwsICdoZWlnaHQnKTtcbiAgICAgICAgfSxcblxuICAgICAgICBvdXRlckhlaWdodDogZnVuY3Rpb24oZWwsIHdpdGhNYXJnaW4pIHtcbiAgICAgICAgICAgIHZhciBoZWlnaHQgPSBlbC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICB2YXIgc3R5bGU7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2l0aE1hcmdpbiAhPT0gJ3VuZGVmaW5lZCcgJiYgd2l0aE1hcmdpbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gICAgICAgICAgICAgICAgaGVpZ2h0ICs9IHBhcnNlSW50KHN0eWxlLm1hcmdpblRvcCkgKyBwYXJzZUludChzdHlsZS5tYXJnaW5Cb3R0b20pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhlaWdodDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB2aXNpYmxlOiBmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgcmV0dXJuICEoZWwub2Zmc2V0V2lkdGggPT09IDAgJiYgZWwub2Zmc2V0SGVpZ2h0ID09PSAwKTtcbiAgICAgICAgfSxcblxuICAgICAgICBhdHRyOiBmdW5jdGlvbihlbCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChlbCA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBoYXNBdHRyOiBmdW5jdGlvbihlbCwgbmFtZSkge1xuICAgICAgICAgICAgaWYgKGVsID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZShuYW1lKSA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmVBdHRyOiBmdW5jdGlvbihlbCwgbmFtZSkge1xuICAgICAgICAgICAgaWYgKGVsID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFuaW1hdGU6IGZ1bmN0aW9uKGZyb20sIHRvLCBkdXJhdGlvbiwgdXBkYXRlLCBlYXNpbmcsIGRvbmUpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGlueUFuaW1hdGUuZWFzaW5nc1xuICAgICAgICAgICAgICogIEFkYXB0ZWQgZnJvbSBqUXVlcnkgRWFzaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBlYXNpbmdzID0ge307XG4gICAgICAgICAgICB2YXIgZWFzaW5nO1xuXG4gICAgICAgICAgICBlYXNpbmdzLmxpbmVhciA9IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYyAqIHQgLyBkICsgYjtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGVhc2luZyA9IGVhc2luZ3MubGluZWFyO1xuXG4gICAgICAgICAgICAvLyBFYXJseSBiYWlsIG91dCBpZiBjYWxsZWQgaW5jb3JyZWN0bHlcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZnJvbSAhPT0gJ251bWJlcicgfHxcbiAgICAgICAgICAgICAgICB0eXBlb2YgdG8gIT09ICdudW1iZXInIHx8XG4gICAgICAgICAgICAgICAgdHlwZW9mIGR1cmF0aW9uICE9PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICAgICAgIHR5cGVvZiB1cGRhdGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENyZWF0ZSBtb2NrIGRvbmUoKSBmdW5jdGlvbiBpZiBuZWNlc3NhcnlcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZG9uZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGRvbmUgPSBmdW5jdGlvbigpIHt9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBQaWNrIGltcGxlbWVudGF0aW9uIChyZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfCBzZXRUaW1lb3V0KVxuICAgICAgICAgICAgdmFyIHJBRiA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChjYWxsYmFjaywgMTAwMCAvIDUwKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIEFuaW1hdGlvbiBsb29wXG4gICAgICAgICAgICB2YXIgY2FuY2VsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBjaGFuZ2UgPSB0byAtIGZyb207XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGxvb3AodGltZXN0YW1wKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRpbWUgPSAodGltZXN0YW1wIHx8ICtuZXcgRGF0ZSgpKSAtIHN0YXJ0O1xuXG4gICAgICAgICAgICAgICAgaWYgKHRpbWUgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGUoZWFzaW5nKHRpbWUsIGZyb20sIGNoYW5nZSwgZHVyYXRpb24pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRpbWUgPj0gMCAmJiB0aW1lID49IGR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZSh0byk7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByQUYobG9vcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB1cGRhdGUoZnJvbSk7XG5cbiAgICAgICAgICAgIC8vIFN0YXJ0IGFuaW1hdGlvbiBsb29wXG4gICAgICAgICAgICB2YXIgc3RhcnQgPSB3aW5kb3cucGVyZm9ybWFuY2UgJiYgd2luZG93LnBlcmZvcm1hbmNlLm5vdyA/IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKSA6ICtuZXcgRGF0ZSgpO1xuXG4gICAgICAgICAgICByQUYobG9vcCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWN0dWFsQ3NzOiBmdW5jdGlvbihlbCwgcHJvcCwgY2FjaGUpIHtcbiAgICAgICAgICAgIHZhciBjc3MgPSAnJztcblxuICAgICAgICAgICAgaWYgKGVsIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWVsLmdldEF0dHJpYnV0ZSgna3QtaGlkZGVuLScgKyBwcm9wKSB8fCBjYWNoZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWU7XG5cbiAgICAgICAgICAgICAgICAvLyB0aGUgZWxlbWVudCBpcyBoaWRkZW4gc286XG4gICAgICAgICAgICAgICAgLy8gbWFraW5nIHRoZSBlbCBibG9jayBzbyB3ZSBjYW4gbWVhc3N1cmUgaXRzIGhlaWdodCBidXQgc3RpbGwgYmUgaGlkZGVuXG4gICAgICAgICAgICAgICAgY3NzID0gZWwuc3R5bGUuY3NzVGV4dDtcbiAgICAgICAgICAgICAgICBlbC5zdHlsZS5jc3NUZXh0ID0gJ3Bvc2l0aW9uOiBhYnNvbHV0ZTsgdmlzaWJpbGl0eTogaGlkZGVuOyBkaXNwbGF5OiBibG9jazsnO1xuXG4gICAgICAgICAgICAgICAgaWYgKHByb3AgPT0gJ3dpZHRoJykge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGVsLm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvcCA9PSAnaGVpZ2h0Jykge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGVsLm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlbC5zdHlsZS5jc3NUZXh0ID0gY3NzO1xuXG4gICAgICAgICAgICAgICAgLy8gc3RvcmUgaXQgaW4gY2FjaGVcbiAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2t0LWhpZGRlbi0nICsgcHJvcCwgdmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBzdG9yZSBpdCBpbiBjYWNoZVxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGVsLmdldEF0dHJpYnV0ZSgna3QtaGlkZGVuLScgKyBwcm9wKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWN0dWFsSGVpZ2h0OiBmdW5jdGlvbihlbCwgY2FjaGUpIHtcbiAgICAgICAgICAgIHJldHVybiBLVFV0aWwuYWN0dWFsQ3NzKGVsLCAnaGVpZ2h0JywgY2FjaGUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFjdHVhbFdpZHRoOiBmdW5jdGlvbihlbCwgY2FjaGUpIHtcbiAgICAgICAgICAgIHJldHVybiBLVFV0aWwuYWN0dWFsQ3NzKGVsLCAnd2lkdGgnLCBjYWNoZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0U2Nyb2xsOiBmdW5jdGlvbihlbGVtZW50LCBtZXRob2QpIHtcbiAgICAgICAgICAgIC8vIFRoZSBwYXNzZWQgaW4gYG1ldGhvZGAgdmFsdWUgc2hvdWxkIGJlICdUb3AnIG9yICdMZWZ0J1xuICAgICAgICAgICAgbWV0aG9kID0gJ3Njcm9sbCcgKyBtZXRob2Q7XG4gICAgICAgICAgICByZXR1cm4gKGVsZW1lbnQgPT0gd2luZG93IHx8IGVsZW1lbnQgPT0gZG9jdW1lbnQpID8gKFxuICAgICAgICAgICAgICAgIHNlbGZbKG1ldGhvZCA9PSAnc2Nyb2xsVG9wJykgPyAncGFnZVlPZmZzZXQnIDogJ3BhZ2VYT2Zmc2V0J10gfHxcbiAgICAgICAgICAgICAgICAoYnJvd3NlclN1cHBvcnRzQm94TW9kZWwgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50W21ldGhvZF0pIHx8XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keVttZXRob2RdXG4gICAgICAgICAgICApIDogZWxlbWVudFttZXRob2RdO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNzczogZnVuY3Rpb24oZWwsIHN0eWxlUHJvcCwgdmFsdWUsIGltcG9ydGFudCkge1xuICAgICAgICAgICAgaWYgKCFlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIGltcG9ydGFudCA9PT0gdHJ1ZSApIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUuc2V0UHJvcGVydHkoc3R5bGVQcm9wLCB2YWx1ZSwgJ2ltcG9ydGFudCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlW3N0eWxlUHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0VmlldyA9IChlbC5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50KS5kZWZhdWx0VmlldztcblxuICAgICAgICAgICAgICAgIC8vIFczQyBzdGFuZGFyZCB3YXk6XG4gICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRWaWV3ICYmIGRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2FuaXRpemUgcHJvcGVydHkgbmFtZSB0byBjc3Mgbm90YXRpb25cbiAgICAgICAgICAgICAgICAgICAgLy8gKGh5cGhlbiBzZXBhcmF0ZWQgd29yZHMgZWcuIGZvbnQtU2l6ZSlcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVQcm9wID0gc3R5bGVQcm9wLnJlcGxhY2UoLyhbQS1aXSkvZywgXCItJDFcIikudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShzdHlsZVByb3ApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZWwuY3VycmVudFN0eWxlKSB7IC8vIElFXG4gICAgICAgICAgICAgICAgICAgIC8vIHNhbml0aXplIHByb3BlcnR5IG5hbWUgdG8gY2FtZWxDYXNlXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlUHJvcCA9IHN0eWxlUHJvcC5yZXBsYWNlKC9cXC0oXFx3KS9nLCBmdW5jdGlvbihzdHIsIGxldHRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGVsLmN1cnJlbnRTdHlsZVtzdHlsZVByb3BdO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnZlcnQgb3RoZXIgdW5pdHMgdG8gcGl4ZWxzIG9uIElFXG4gICAgICAgICAgICAgICAgICAgIGlmICgvXlxcZCsoZW18cHR8JXxleCk/JC9pLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9sZExlZnQgPSBlbC5zdHlsZS5sZWZ0LCBvbGRSc0xlZnQgPSBlbC5ydW50aW1lU3R5bGUubGVmdDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLnJ1bnRpbWVTdHlsZS5sZWZ0ID0gZWwuY3VycmVudFN0eWxlLmxlZnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUubGVmdCA9IHZhbHVlIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBlbC5zdHlsZS5waXhlbExlZnQgKyBcInB4XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUubGVmdCA9IG9sZExlZnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwucnVudGltZVN0eWxlLmxlZnQgPSBvbGRSc0xlZnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHNsaWRlOiBmdW5jdGlvbihlbCwgZGlyLCBzcGVlZCwgY2FsbGJhY2ssIHJlY2FsY01heEhlaWdodCkge1xuICAgICAgICAgICAgaWYgKCFlbCB8fCAoZGlyID09ICd1cCcgJiYgS1RVdGlsLnZpc2libGUoZWwpID09PSBmYWxzZSkgfHwgKGRpciA9PSAnZG93bicgJiYgS1RVdGlsLnZpc2libGUoZWwpID09PSB0cnVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3BlZWQgPSAoc3BlZWQgPyBzcGVlZCA6IDYwMCk7XG4gICAgICAgICAgICB2YXIgY2FsY0hlaWdodCA9IEtUVXRpbC5hY3R1YWxIZWlnaHQoZWwpO1xuICAgICAgICAgICAgdmFyIGNhbGNQYWRkaW5nVG9wID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgY2FsY1BhZGRpbmdCb3R0b20gPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKEtUVXRpbC5jc3MoZWwsICdwYWRkaW5nLXRvcCcpICYmIEtUVXRpbC5kYXRhKGVsKS5oYXMoJ3NsaWRlLXBhZGRpbmctdG9wJykgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBLVFV0aWwuZGF0YShlbCkuc2V0KCdzbGlkZS1wYWRkaW5nLXRvcCcsIEtUVXRpbC5jc3MoZWwsICdwYWRkaW5nLXRvcCcpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKEtUVXRpbC5jc3MoZWwsICdwYWRkaW5nLWJvdHRvbScpICYmIEtUVXRpbC5kYXRhKGVsKS5oYXMoJ3NsaWRlLXBhZGRpbmctYm90dG9tJykgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBLVFV0aWwuZGF0YShlbCkuc2V0KCdzbGlkZS1wYWRkaW5nLWJvdHRvbScsIEtUVXRpbC5jc3MoZWwsICdwYWRkaW5nLWJvdHRvbScpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKEtUVXRpbC5kYXRhKGVsKS5oYXMoJ3NsaWRlLXBhZGRpbmctdG9wJykpIHtcbiAgICAgICAgICAgICAgICBjYWxjUGFkZGluZ1RvcCA9IHBhcnNlSW50KEtUVXRpbC5kYXRhKGVsKS5nZXQoJ3NsaWRlLXBhZGRpbmctdG9wJykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoS1RVdGlsLmRhdGEoZWwpLmhhcygnc2xpZGUtcGFkZGluZy1ib3R0b20nKSkge1xuICAgICAgICAgICAgICAgIGNhbGNQYWRkaW5nQm90dG9tID0gcGFyc2VJbnQoS1RVdGlsLmRhdGEoZWwpLmdldCgnc2xpZGUtcGFkZGluZy1ib3R0b20nKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkaXIgPT0gJ3VwJykgeyAvLyB1cFxuICAgICAgICAgICAgICAgIGVsLnN0eWxlLmNzc1RleHQgPSAnZGlzcGxheTogYmxvY2s7IG92ZXJmbG93OiBoaWRkZW47JztcblxuICAgICAgICAgICAgICAgIGlmIChjYWxjUGFkZGluZ1RvcCkge1xuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuYW5pbWF0ZSgwLCBjYWxjUGFkZGluZ1RvcCwgc3BlZWQsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5wYWRkaW5nVG9wID0gKGNhbGNQYWRkaW5nVG9wIC0gdmFsdWUpICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgfSwgJ2xpbmVhcicpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChjYWxjUGFkZGluZ0JvdHRvbSkge1xuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuYW5pbWF0ZSgwLCBjYWxjUGFkZGluZ0JvdHRvbSwgc3BlZWQsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5wYWRkaW5nQm90dG9tID0gKGNhbGNQYWRkaW5nQm90dG9tIC0gdmFsdWUpICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgfSwgJ2xpbmVhcicpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIEtUVXRpbC5hbmltYXRlKDAsIGNhbGNIZWlnaHQsIHNwZWVkLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5oZWlnaHQgPSAoY2FsY0hlaWdodCAtIHZhbHVlKSArICdweCc7XG4gICAgICAgICAgICAgICAgfSwgJ2xpbmVhcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgfSBlbHNlIGlmIChkaXIgPT0gJ2Rvd24nKSB7IC8vIGRvd25cbiAgICAgICAgICAgICAgICBlbC5zdHlsZS5jc3NUZXh0ID0gJ2Rpc3BsYXk6IGJsb2NrOyBvdmVyZmxvdzogaGlkZGVuOyc7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FsY1BhZGRpbmdUb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmFuaW1hdGUoMCwgY2FsY1BhZGRpbmdUb3AsIHNwZWVkLCBmdW5jdGlvbih2YWx1ZSkgey8vXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5wYWRkaW5nVG9wID0gdmFsdWUgKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICB9LCAnbGluZWFyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5wYWRkaW5nVG9wID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChjYWxjUGFkZGluZ0JvdHRvbSkge1xuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuYW5pbWF0ZSgwLCBjYWxjUGFkZGluZ0JvdHRvbSwgc3BlZWQsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5wYWRkaW5nQm90dG9tID0gdmFsdWUgKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICB9LCAnbGluZWFyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5wYWRkaW5nQm90dG9tID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIEtUVXRpbC5hbmltYXRlKDAsIGNhbGNIZWlnaHQsIHNwZWVkLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5oZWlnaHQgPSB2YWx1ZSArICdweCc7XG4gICAgICAgICAgICAgICAgfSwgJ2xpbmVhcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5vdmVyZmxvdyA9ICcnO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBzbGlkZVVwOiBmdW5jdGlvbihlbCwgc3BlZWQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBLVFV0aWwuc2xpZGUoZWwsICd1cCcsIHNwZWVkLCBjYWxsYmFjayk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2xpZGVEb3duOiBmdW5jdGlvbihlbCwgc3BlZWQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBLVFV0aWwuc2xpZGUoZWwsICdkb3duJywgc3BlZWQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzaG93OiBmdW5jdGlvbihlbCwgZGlzcGxheSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gKGRpc3BsYXkgPyBkaXNwbGF5IDogJ2Jsb2NrJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgaGlkZTogZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBhZGRFdmVudDogZnVuY3Rpb24oZWwsIHR5cGUsIGhhbmRsZXIsIG9uZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZWwgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZUV2ZW50OiBmdW5jdGlvbihlbCwgdHlwZSwgaGFuZGxlcikge1xuICAgICAgICAgICAgaWYgKGVsICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBvbjogZnVuY3Rpb24oZWxlbWVudCwgc2VsZWN0b3IsIGV2ZW50LCBoYW5kbGVyKSB7XG4gICAgICAgICAgICBpZiAoIGVsZW1lbnQgPT09IG51bGwgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZXZlbnRJZCA9IEtUVXRpbC5nZXRVbmlxdWVJZCgnZXZlbnQnKTtcblxuICAgICAgICAgICAgd2luZG93LktUVXRpbERlbGVnYXRlZEV2ZW50SGFuZGxlcnNbZXZlbnRJZF0gPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldHMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBlLnRhcmdldDtcblxuICAgICAgICAgICAgICAgIHdoaWxlICggdGFyZ2V0ICYmIHRhcmdldCAhPT0gZWxlbWVudCApIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBqID0gdGFyZ2V0cy5sZW5ndGg7IGkgPCBqOyBpKysgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHRhcmdldCA9PT0gdGFyZ2V0c1tpXSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLmNhbGwodGFyZ2V0LCBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgS1RVdGlsLmFkZEV2ZW50KGVsZW1lbnQsIGV2ZW50LCB3aW5kb3cuS1RVdGlsRGVsZWdhdGVkRXZlbnRIYW5kbGVyc1tldmVudElkXSk7XG5cbiAgICAgICAgICAgIHJldHVybiBldmVudElkO1xuICAgICAgICB9LFxuXG4gICAgICAgIG9mZjogZnVuY3Rpb24oZWxlbWVudCwgZXZlbnQsIGV2ZW50SWQpIHtcbiAgICAgICAgICAgIGlmICghZWxlbWVudCB8fCAhd2luZG93LktUVXRpbERlbGVnYXRlZEV2ZW50SGFuZGxlcnNbZXZlbnRJZF0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVFdmVudChlbGVtZW50LCBldmVudCwgd2luZG93LktUVXRpbERlbGVnYXRlZEV2ZW50SGFuZGxlcnNbZXZlbnRJZF0pO1xuXG4gICAgICAgICAgICBkZWxldGUgd2luZG93LktUVXRpbERlbGVnYXRlZEV2ZW50SGFuZGxlcnNbZXZlbnRJZF07XG4gICAgICAgIH0sXG5cbiAgICAgICAgb25lOiBmdW5jdGlvbiBvbmV0aW1lKGVsLCB0eXBlLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmdW5jdGlvbiBjYWxsZWUoZSkge1xuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBldmVudFxuICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldCAmJiBlLnRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZS50eXBlLCBjYWxsZWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIG5lZWQgdG8gdmVyaWZ5IGZyb20gaHR0cHM6Ly90aGVtZWZvcmVzdC5uZXQvYXV0aG9yX2Rhc2hib2FyZCNjb21tZW50XzIzNjE1NTg4XG4gICAgICAgICAgICAgICAgaWYgKGVsICYmIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcblx0XHRcdFx0ICAgIGUuY3VycmVudFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGUudHlwZSwgY2FsbGVlKTtcblx0XHRcdCAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBjYWxsIGhhbmRsZXJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBoYXNoOiBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgICAgIHZhciBoYXNoID0gMCxcbiAgICAgICAgICAgICAgICBpLCBjaHI7XG5cbiAgICAgICAgICAgIGlmIChzdHIubGVuZ3RoID09PSAwKSByZXR1cm4gaGFzaDtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjaHIgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgICAgICBoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBjaHI7XG4gICAgICAgICAgICAgICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYW5pbWF0ZUNsYXNzOiBmdW5jdGlvbihlbCwgYW5pbWF0aW9uTmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBhbmltYXRpb247XG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb246ICdhbmltYXRpb25lbmQnLFxuICAgICAgICAgICAgICAgIE9BbmltYXRpb246ICdvQW5pbWF0aW9uRW5kJyxcbiAgICAgICAgICAgICAgICBNb3pBbmltYXRpb246ICdtb3pBbmltYXRpb25FbmQnLFxuICAgICAgICAgICAgICAgIFdlYmtpdEFuaW1hdGlvbjogJ3dlYmtpdEFuaW1hdGlvbkVuZCcsXG4gICAgICAgICAgICAgICAgbXNBbmltYXRpb246ICdtc0FuaW1hdGlvbkVuZCcsXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBmb3IgKHZhciB0IGluIGFuaW1hdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWwuc3R5bGVbdF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24gPSBhbmltYXRpb25zW3RdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKGVsLCBhbmltYXRpb25OYW1lKTtcblxuICAgICAgICAgICAgS1RVdGlsLm9uZShlbCwgYW5pbWF0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBLVFV0aWwucmVtb3ZlQ2xhc3MoZWwsIGFuaW1hdGlvbk5hbWUpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIEtUVXRpbC5vbmUoZWwsIGFuaW1hdGlvbiwgY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uKGVsLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIHRyYW5zaXRpb247XG4gICAgICAgICAgICB2YXIgdHJhbnNpdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogJ3RyYW5zaXRpb25lbmQnLFxuICAgICAgICAgICAgICAgIE9UcmFuc2l0aW9uOiAnb1RyYW5zaXRpb25FbmQnLFxuICAgICAgICAgICAgICAgIE1velRyYW5zaXRpb246ICdtb3pUcmFuc2l0aW9uRW5kJyxcbiAgICAgICAgICAgICAgICBXZWJraXRUcmFuc2l0aW9uOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgICAgICAgICAgICAgbXNUcmFuc2l0aW9uOiAnbXNUcmFuc2l0aW9uRW5kJ1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZm9yICh2YXIgdCBpbiB0cmFuc2l0aW9ucykge1xuICAgICAgICAgICAgICAgIGlmIChlbC5zdHlsZVt0XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb24gPSB0cmFuc2l0aW9uc1t0XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEtUVXRpbC5vbmUoZWwsIHRyYW5zaXRpb24sIGNhbGxiYWNrKTtcbiAgICAgICAgfSxcblxuICAgICAgICBhbmltYXRpb25FbmQ6IGZ1bmN0aW9uKGVsLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIGFuaW1hdGlvbjtcbiAgICAgICAgICAgIHZhciBhbmltYXRpb25zID0ge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogJ2FuaW1hdGlvbmVuZCcsXG4gICAgICAgICAgICAgICAgT0FuaW1hdGlvbjogJ29BbmltYXRpb25FbmQnLFxuICAgICAgICAgICAgICAgIE1vekFuaW1hdGlvbjogJ21vekFuaW1hdGlvbkVuZCcsXG4gICAgICAgICAgICAgICAgV2Via2l0QW5pbWF0aW9uOiAnd2Via2l0QW5pbWF0aW9uRW5kJyxcbiAgICAgICAgICAgICAgICBtc0FuaW1hdGlvbjogJ21zQW5pbWF0aW9uRW5kJ1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZm9yICh2YXIgdCBpbiBhbmltYXRpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVsLnN0eWxlW3RdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uID0gYW5pbWF0aW9uc1t0XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEtUVXRpbC5vbmUoZWwsIGFuaW1hdGlvbiwgY2FsbGJhY2spO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFuaW1hdGVEZWxheTogZnVuY3Rpb24oZWwsIHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgdmVuZG9ycyA9IFsnd2Via2l0LScsICdtb3otJywgJ21zLScsICdvLScsICcnXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmVuZG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIEtUVXRpbC5jc3MoZWwsIHZlbmRvcnNbaV0gKyAnYW5pbWF0aW9uLWRlbGF5JywgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGFuaW1hdGVEdXJhdGlvbjogZnVuY3Rpb24oZWwsIHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgdmVuZG9ycyA9IFsnd2Via2l0LScsICdtb3otJywgJ21zLScsICdvLScsICcnXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmVuZG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIEtUVXRpbC5jc3MoZWwsIHZlbmRvcnNbaV0gKyAnYW5pbWF0aW9uLWR1cmF0aW9uJywgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHNjcm9sbFRvOiBmdW5jdGlvbih0YXJnZXQsIG9mZnNldCwgZHVyYXRpb24pIHtcbiAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IGR1cmF0aW9uID8gZHVyYXRpb24gOiA1MDA7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0UG9zID0gdGFyZ2V0ID8gS1RVdGlsLm9mZnNldCh0YXJnZXQpLnRvcCA6IDA7XG4gICAgICAgICAgICB2YXIgc2Nyb2xsUG9zID0gd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgfHwgMDtcbiAgICAgICAgICAgIHZhciBmcm9tLCB0bztcblxuICAgICAgICAgICAgaWYgKG9mZnNldCkge1xuICAgICAgICAgICAgICAgIHRhcmdldFBvcyA9IHRhcmdldFBvcyAtIG9mZnNldDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnJvbSA9IHNjcm9sbFBvcztcbiAgICAgICAgICAgIHRvID0gdGFyZ2V0UG9zO1xuXG4gICAgICAgICAgICBLVFV0aWwuYW5pbWF0ZShmcm9tLCB0bywgZHVyYXRpb24sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5zY3JvbGxUb3AgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA9IHZhbHVlO1xuICAgICAgICAgICAgfSk7IC8vLCBlYXNpbmcsIGRvbmVcbiAgICAgICAgfSxcblxuICAgICAgICBzY3JvbGxUb3A6IGZ1bmN0aW9uKG9mZnNldCwgZHVyYXRpb24pIHtcbiAgICAgICAgICAgIEtUVXRpbC5zY3JvbGxUbyhudWxsLCBvZmZzZXQsIGR1cmF0aW9uKTtcbiAgICAgICAgfSxcblxuICAgICAgICBpc0FycmF5OiBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBvYmogJiYgQXJyYXkuaXNBcnJheShvYmopO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzRW1wdHk6IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIG51bWJlclN0cmluZzogZnVuY3Rpb24oblN0cikge1xuICAgICAgICAgICAgblN0ciArPSAnJztcbiAgICAgICAgICAgIHZhciB4ID0gblN0ci5zcGxpdCgnLicpO1xuICAgICAgICAgICAgdmFyIHgxID0geFswXTtcbiAgICAgICAgICAgIHZhciB4MiA9IHgubGVuZ3RoID4gMSA/ICcuJyArIHhbMV0gOiAnJztcbiAgICAgICAgICAgIHZhciByZ3ggPSAvKFxcZCspKFxcZHszfSkvO1xuICAgICAgICAgICAgd2hpbGUgKHJneC50ZXN0KHgxKSkge1xuICAgICAgICAgICAgICAgIHgxID0geDEucmVwbGFjZShyZ3gsICckMScgKyAnLCcgKyAnJDInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB4MSArIHgyO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzUlRMOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaHRtbCcpLmdldEF0dHJpYnV0ZShcImRpcmVjdGlvblwiKSA9PT0gJ3J0bCcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNuYWtlVG9DYW1lbDogZnVuY3Rpb24ocyl7XG4gICAgICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC8oXFwtXFx3KS9nLCBmdW5jdGlvbihtKXtyZXR1cm4gbVsxXS50b1VwcGVyQ2FzZSgpO30pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZpbHRlckJvb2xlYW46IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgLy8gQ29udmVydCBzdHJpbmcgYm9vbGVhblxuXHRcdFx0aWYgKHZhbCA9PT0gdHJ1ZSB8fCB2YWwgPT09ICd0cnVlJykge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHZhbCA9PT0gZmFsc2UgfHwgdmFsID09PSAnZmFsc2UnKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRIVE1MOiBmdW5jdGlvbihlbCwgaHRtbCkge1xuICAgICAgICAgICAgZWwuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRIVE1MOiBmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgaWYgKGVsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsLmlubmVySFRNTDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBnZXREb2N1bWVudEhlaWdodDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gICAgICAgICAgICB2YXIgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KCBib2R5LnNjcm9sbEhlaWdodCwgYm9keS5vZmZzZXRIZWlnaHQsIGh0bWwuY2xpZW50SGVpZ2h0LCBodG1sLnNjcm9sbEhlaWdodCwgaHRtbC5vZmZzZXRIZWlnaHQgKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRTY3JvbGxUb3A6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICAoZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLnNjcm9sbFRvcDtcbiAgICAgICAgfSxcblxuICAgICAgICBjb2xvckxpZ2h0ZW46IGZ1bmN0aW9uKGNvbG9yLCBhbW91bnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGFkZExpZ2h0ID0gZnVuY3Rpb24oY29sb3IsIGFtb3VudCl7XG4gICAgICAgICAgICAgICAgbGV0IGNjID0gcGFyc2VJbnQoY29sb3IsMTYpICsgYW1vdW50O1xuICAgICAgICAgICAgICAgIGxldCBjID0gKGNjID4gMjU1KSA/IDI1NSA6IChjYyk7XG4gICAgICAgICAgICAgICAgYyA9IChjLnRvU3RyaW5nKDE2KS5sZW5ndGggPiAxICkgPyBjLnRvU3RyaW5nKDE2KSA6IGAwJHtjLnRvU3RyaW5nKDE2KX1gO1xuICAgICAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb2xvciA9IChjb2xvci5pbmRleE9mKFwiI1wiKT49MCkgPyBjb2xvci5zdWJzdHJpbmcoMSxjb2xvci5sZW5ndGgpIDogY29sb3I7XG4gICAgICAgICAgICBhbW91bnQgPSBwYXJzZUludCgoMjU1KmFtb3VudCkvMTAwKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGNvbG9yID0gYCMke2FkZExpZ2h0KGNvbG9yLnN1YnN0cmluZygwLDIpLCBhbW91bnQpfSR7YWRkTGlnaHQoY29sb3Iuc3Vic3RyaW5nKDIsNCksIGFtb3VudCl9JHthZGRMaWdodChjb2xvci5zdWJzdHJpbmcoNCw2KSwgYW1vdW50KX1gO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNvbG9yRGFya2VuOiBmdW5jdGlvbihjb2xvciwgYW1vdW50KSB7XG4gICAgICAgICAgICBjb25zdCBzdWJ0cmFjdExpZ2h0ID0gZnVuY3Rpb24oY29sb3IsIGFtb3VudCl7XG4gICAgICAgICAgICAgICAgbGV0IGNjID0gcGFyc2VJbnQoY29sb3IsMTYpIC0gYW1vdW50O1xuICAgICAgICAgICAgICAgIGxldCBjID0gKGNjIDwgMCkgPyAwIDogKGNjKTtcbiAgICAgICAgICAgICAgICBjID0gKGMudG9TdHJpbmcoMTYpLmxlbmd0aCA+IDEgKSA/IGMudG9TdHJpbmcoMTYpIDogYDAke2MudG9TdHJpbmcoMTYpfWA7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICBjb2xvciA9IChjb2xvci5pbmRleE9mKFwiI1wiKT49MCkgPyBjb2xvci5zdWJzdHJpbmcoMSxjb2xvci5sZW5ndGgpIDogY29sb3I7XG4gICAgICAgICAgICBhbW91bnQgPSBwYXJzZUludCgoMjU1KmFtb3VudCkvMTAwKTtcblxuICAgICAgICAgICAgcmV0dXJuIGNvbG9yID0gYCMke3N1YnRyYWN0TGlnaHQoY29sb3Iuc3Vic3RyaW5nKDAsMiksIGFtb3VudCl9JHtzdWJ0cmFjdExpZ2h0KGNvbG9yLnN1YnN0cmluZygyLDQpLCBhbW91bnQpfSR7c3VidHJhY3RMaWdodChjb2xvci5zdWJzdHJpbmcoNCw2KSwgYW1vdW50KX1gO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIFRocm90dGxlIGZ1bmN0aW9uOiBJbnB1dCBhcyBmdW5jdGlvbiB3aGljaCBuZWVkcyB0byBiZSB0aHJvdHRsZWQgYW5kIGRlbGF5IGlzIHRoZSB0aW1lIGludGVydmFsIGluIG1pbGxpc2Vjb25kc1xuICAgICAgICB0aHJvdHRsZTogIGZ1bmN0aW9uICh0aW1lciwgZnVuYywgZGVsYXkpIHtcbiAgICAgICAgXHQvLyBJZiBzZXRUaW1lb3V0IGlzIGFscmVhZHkgc2NoZWR1bGVkLCBubyBuZWVkIHRvIGRvIGFueXRoaW5nXG4gICAgICAgIFx0aWYgKHRpbWVyKSB7XG4gICAgICAgIFx0XHRyZXR1cm47XG4gICAgICAgIFx0fVxuXG4gICAgICAgIFx0Ly8gU2NoZWR1bGUgYSBzZXRUaW1lb3V0IGFmdGVyIGRlbGF5IHNlY29uZHNcbiAgICAgICAgXHR0aW1lciAgPSAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIFx0XHRmdW5jKCk7XG5cbiAgICAgICAgXHRcdC8vIE9uY2Ugc2V0VGltZW91dCBmdW5jdGlvbiBleGVjdXRpb24gaXMgZmluaXNoZWQsIHRpbWVySWQgPSB1bmRlZmluZWQgc28gdGhhdCBpbiA8YnI+XG4gICAgICAgIFx0XHQvLyB0aGUgbmV4dCBzY3JvbGwgZXZlbnQgZnVuY3Rpb24gZXhlY3V0aW9uIGNhbiBiZSBzY2hlZHVsZWQgYnkgdGhlIHNldFRpbWVvdXRcbiAgICAgICAgXHRcdHRpbWVyICA9ICB1bmRlZmluZWQ7XG4gICAgICAgIFx0fSwgZGVsYXkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIERlYm91bmNlIGZ1bmN0aW9uOiBJbnB1dCBhcyBmdW5jdGlvbiB3aGljaCBuZWVkcyB0byBiZSBkZWJvdW5jZWQgYW5kIGRlbGF5IGlzIHRoZSBkZWJvdW5jZWQgdGltZSBpbiBtaWxsaXNlY29uZHNcbiAgICAgICAgZGVib3VuY2U6IGZ1bmN0aW9uICh0aW1lciwgZnVuYywgZGVsYXkpIHtcbiAgICAgICAgXHQvLyBDYW5jZWxzIHRoZSBzZXRUaW1lb3V0IG1ldGhvZCBleGVjdXRpb25cbiAgICAgICAgXHRjbGVhclRpbWVvdXQodGltZXIpXG5cbiAgICAgICAgXHQvLyBFeGVjdXRlcyB0aGUgZnVuYyBhZnRlciBkZWxheSB0aW1lLlxuICAgICAgICBcdHRpbWVyICA9ICBzZXRUaW1lb3V0KGZ1bmMsIGRlbGF5KTtcbiAgICAgICAgfSxcblxuICAgICAgICBwYXJzZUpzb246IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvJy9nLCBcIlxcXCJcIik7XG5cbiAgICAgICAgICAgICAgICB2YXIganNvblN0ciA9IHZhbHVlLnJlcGxhY2UoLyhcXHcrOil8KFxcdysgOikvZywgZnVuY3Rpb24obWF0Y2hlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1wiJyArIG1hdGNoZWQuc3Vic3RyaW5nKDAsIG1hdGNoZWQubGVuZ3RoIC0gMSkgKyAnXCI6JztcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gSlNPTi5wYXJzZShqc29uU3RyKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoKGUpIHsgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0UmVzcG9uc2l2ZVZhbHVlOiBmdW5jdGlvbih2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSB0aGlzLmdldFZpZXdQb3J0KCkud2lkdGg7XG4gICAgICAgICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICAgICAgICB2YWx1ZSA9IEtUVXRpbC5wYXJzZUpzb24odmFsdWUpO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHRLZXk7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdEJyZWFrcG9pbnQgPSAtMTtcbiAgICAgICAgICAgICAgICB2YXIgYnJlYWtwb2ludDtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAnZGVmYXVsdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludCA9IHRoaXMuZ2V0QnJlYWtwb2ludChrZXkpID8gdGhpcy5nZXRCcmVha3BvaW50KGtleSkgOiBwYXJzZUludChrZXkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGJyZWFrcG9pbnQgPD0gd2lkdGggJiYgYnJlYWtwb2ludCA+IHJlc3VsdEJyZWFrcG9pbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdEtleSA9IGtleTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdEJyZWFrcG9pbnQgPSBicmVha3BvaW50O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdEtleSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB2YWx1ZVtyZXN1bHRLZXldO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZWFjaDogZnVuY3Rpb24oYXJyYXksIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gW10uc2xpY2UuY2FsbChhcnJheSkubWFwKGNhbGxiYWNrKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRTZWxlY3Rvck1hdGNoVmFsdWU6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgICAgIHZhbHVlID0gS1RVdGlsLnBhcnNlSnNvbih2YWx1ZSk7XG5cbiAgICAgICAgICAgIGlmICggdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyApIHtcbiAgICAgICAgICAgICAgICAvLyBNYXRjaCBjb25kaXRpb25cbiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlWydtYXRjaCddICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IE9iamVjdC5rZXlzKHZhbHVlWydtYXRjaCddKVswXTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBPYmplY3QudmFsdWVzKHZhbHVlWydtYXRjaCddKVswXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpICE9PSBudWxsICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldENvbmRpdGlvbmFsVmFsdWU6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBLVFV0aWwucGFyc2VKc29uKHZhbHVlKTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBLVFV0aWwuZ2V0UmVzcG9uc2l2ZVZhbHVlKHZhbHVlKTtcblxuICAgICAgICAgICAgaWYgKCByZXN1bHQgIT09IG51bGwgJiYgcmVzdWx0WydtYXRjaCddICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gS1RVdGlsLmdldFNlbGVjdG9yTWF0Y2hWYWx1ZShyZXN1bHQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIHJlc3VsdCA9PT0gbnVsbCAmJiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZVsnZGVmYXVsdCddICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWVbJ2RlZmF1bHQnXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRDc3NWYXJpYWJsZVZhbHVlOiBmdW5jdGlvbih2YXJpYWJsZU5hbWUpIHtcbiAgICAgICAgICAgIHZhciBoZXggPSBnZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZSh2YXJpYWJsZU5hbWUpO1xuICAgICAgICAgICAgaWYgKCBoZXggJiYgaGV4Lmxlbmd0aCA+IDAgKSB7XG4gICAgICAgICAgICAgICAgaGV4ID0gaGV4LnRyaW0oKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGhleDtcbiAgICAgICAgfSxcblxuICAgICAgICBpc0luVmlld3BvcnQ6IGZ1bmN0aW9uKGVsZW1lbnQpIHsgICAgICAgIFxuICAgICAgICAgICAgdmFyIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIHJlY3QudG9wID49IDAgJiZcbiAgICAgICAgICAgICAgICByZWN0LmxlZnQgPj0gMCAmJlxuICAgICAgICAgICAgICAgIHJlY3QuYm90dG9tIDw9ICh3aW5kb3cuaW5uZXJIZWlnaHQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCkgJiZcbiAgICAgICAgICAgICAgICByZWN0LnJpZ2h0IDw9ICh3aW5kb3cuaW5uZXJXaWR0aCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgpXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuXG4gICAgICAgIG9uRE9NQ29udGVudExvYWRlZDogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnbG9hZGluZycpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgY2FsbGJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGluSWZyYW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5zZWxmICE9PSB3aW5kb3cudG9wO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSgpO1xuXG4vLyBXZWJwYWNrIHN1cHBvcnRcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBLVFV0aWw7XG59Il0sIm5hbWVzIjpbIkVsZW1lbnQiLCJwcm90b3R5cGUiLCJtYXRjaGVzIiwicyIsImRvY3VtZW50Iiwib3duZXJEb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpIiwibGVuZ3RoIiwiaXRlbSIsImNsb3Nlc3QiLCJlbCIsImFuY2VzdG9yIiwiZG9jdW1lbnRFbGVtZW50IiwiY29udGFpbnMiLCJwYXJlbnRFbGVtZW50IiwiZWxlbSIsIndpbmRvdyIsInJlbW92ZSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImxhc3RUaW1lIiwidmVuZG9ycyIsIngiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImNhbGxiYWNrIiwiY3VyclRpbWUiLCJEYXRlIiwiZ2V0VGltZSIsInRpbWVUb0NhbGwiLCJNYXRoIiwibWF4IiwiaWQiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiYXJyIiwiZm9yRWFjaCIsImhhc093blByb3BlcnR5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsInByZXBlbmQiLCJhcmdBcnIiLCJBcnJheSIsInNsaWNlIiwiY2FsbCIsImFyZ3VtZW50cyIsImRvY0ZyYWciLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiYXJnSXRlbSIsImlzTm9kZSIsIk5vZGUiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiU3RyaW5nIiwiaW5zZXJ0QmVmb3JlIiwiZmlyc3RDaGlsZCIsIkRvY3VtZW50IiwiRG9jdW1lbnRGcmFnbWVudCIsImdldEF0dHJpYnV0ZU5hbWVzIiwidW5kZWZpbmVkIiwiYXR0cmlidXRlcyIsInJlc3VsdCIsIm5hbWUiLCJLVFV0aWxFbGVtZW50RGF0YVN0b3JlIiwiS1RVdGlsRWxlbWVudERhdGFTdG9yZUlEIiwiS1RVdGlsRGVsZWdhdGVkRXZlbnRIYW5kbGVycyIsIktUVXRpbCIsInJlc2l6ZUhhbmRsZXJzIiwiX3dpbmRvd1Jlc2l6ZUhhbmRsZXIiLCJfcnVuUmVzaXplSGFuZGxlcnMiLCJlYWNoIiwidGltZXIiLCJhZGRFdmVudExpc3RlbmVyIiwidGhyb3R0bGUiLCJpbml0Iiwic2V0dGluZ3MiLCJhZGRSZXNpemVIYW5kbGVyIiwicHVzaCIsInJlbW92ZVJlc2l6ZUhhbmRsZXIiLCJydW5SZXNpemVIYW5kbGVycyIsInJlc2l6ZSIsIkV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImV2dCIsImNyZWF0ZUV2ZW50IiwiaW5pdFVJRXZlbnQiLCJnZXRVUkxQYXJhbSIsInBhcmFtTmFtZSIsInNlYXJjaFN0cmluZyIsImxvY2F0aW9uIiwic2VhcmNoIiwic3Vic3RyaW5nIiwidmFsIiwicGFyYW1zIiwic3BsaXQiLCJ1bmVzY2FwZSIsImlzTW9iaWxlRGV2aWNlIiwidGVzdCIsImdldFZpZXdQb3J0Iiwid2lkdGgiLCJnZXRCcmVha3BvaW50IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwibWF0Y2giLCJpc0Rlc2t0b3BEZXZpY2UiLCJlIiwiYSIsImJvZHkiLCJoZWlnaHQiLCJpc0JyZWFrcG9pbnRVcCIsIm1vZGUiLCJicmVha3BvaW50IiwiaXNCcmVha3BvaW50RG93biIsImdldFZpZXdwb3J0V2lkdGgiLCJnZXRVbmlxdWVJZCIsInByZWZpeCIsImZsb29yIiwicmFuZG9tIiwiZ2V0Q3NzVmFyaWFibGVWYWx1ZSIsInBhcnNlSW50IiwidHJpbSIsImlzc2V0Iiwib2JqIiwia2V5cyIsInN0b25lIiwiaW5kZXhPZiIsIkVycm9yIiwic2hpZnQiLCJnZXRIaWdoZXN0WmluZGV4IiwicG9zaXRpb24iLCJjc3MiLCJpc05hTiIsImhhc0ZpeGVkUG9zaXRpb25lZFBhcmVudCIsInNsZWVwIiwibWlsbGlzZWNvbmRzIiwic3RhcnQiLCJnZXRSYW5kb21JbnQiLCJtaW4iLCJpc0FuZ3VsYXJWZXJzaW9uIiwiWm9uZSIsImRlZXBFeHRlbmQiLCJvdXQiLCJrZXkiLCJ0b1N0cmluZyIsImV4dGVuZCIsImdldEJvZHkiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImhhc0NsYXNzZXMiLCJjbGFzc2VzIiwiY2xhc3Nlc0FyciIsImhhc0NsYXNzIiwiY2xhc3NOYW1lIiwiY2xhc3NMaXN0IiwiUmVnRXhwIiwiYWRkQ2xhc3MiLCJjbGFzc05hbWVzIiwiYWRkIiwicmVtb3ZlQ2xhc3MiLCJyZXBsYWNlIiwidHJpZ2dlckN1c3RvbUV2ZW50IiwiZXZlbnROYW1lIiwiZGF0YSIsImV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJpbml0Q3VzdG9tRXZlbnQiLCJ0cmlnZ2VyRXZlbnQiLCJub2RlIiwiZG9jIiwibm9kZVR5cGUiLCJldmVudENsYXNzIiwiYnViYmxlcyIsImluaXRFdmVudCIsInN5bnRoZXRpYyIsImZpcmVFdmVudCIsImNyZWF0ZUV2ZW50T2JqZWN0IiwiaW5kZXgiLCJjIiwiY2hpbGRyZW4iLCJzdHJpbmciLCJldmVudFRyaWdnZXJlZCIsImN1cnJlbnRUYXJnZXQiLCJkYXRhc2V0IiwidHJpZ2dlcmVkIiwiZmluZCIsInBhcmVudCIsInF1ZXJ5IiwicXVlcnlTZWxlY3RvciIsImZpbmRBbGwiLCJpbnNlcnRBZnRlciIsInJlZmVyZW5jZU5vZGUiLCJuZXh0U2libGluZyIsInBhcmVudHMiLCJzZWxlY3RvciIsImxvZyIsImNoaWxkTm9kZXMiLCJsIiwiY2hpbGQiLCJwIiwiZiIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwidGFnTmFtZSIsInNldCIsImN1c3RvbURhdGFUYWciLCJnZXQiLCJoYXMiLCJvdXRlcldpZHRoIiwibWFyZ2luIiwicGFyc2VGbG9hdCIsIm9mZnNldFdpZHRoIiwib2Zmc2V0IiwicmVjdCIsIndpbiIsImdldENsaWVudFJlY3RzIiwidG9wIiwibGVmdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImRlZmF1bHRWaWV3IiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsInJpZ2h0IiwiaW5uZXJXaWR0aCIsIm9mZnNldExlZnQiLCJvdXRlckhlaWdodCIsIndpdGhNYXJnaW4iLCJvZmZzZXRIZWlnaHQiLCJzdHlsZSIsImdldENvbXB1dGVkU3R5bGUiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJ2aXNpYmxlIiwiYXR0ciIsInNldEF0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsImhhc0F0dHIiLCJyZW1vdmVBdHRyIiwicmVtb3ZlQXR0cmlidXRlIiwiYW5pbWF0ZSIsImZyb20iLCJ0byIsImR1cmF0aW9uIiwidXBkYXRlIiwiZWFzaW5nIiwiZG9uZSIsImVhc2luZ3MiLCJsaW5lYXIiLCJ0IiwiYiIsImQiLCJyQUYiLCJjYW5jZWxlZCIsImNoYW5nZSIsImxvb3AiLCJ0aW1lc3RhbXAiLCJ0aW1lIiwicGVyZm9ybWFuY2UiLCJub3ciLCJhY3R1YWxDc3MiLCJwcm9wIiwiY2FjaGUiLCJIVE1MRWxlbWVudCIsImNzc1RleHQiLCJhY3R1YWxIZWlnaHQiLCJhY3R1YWxXaWR0aCIsImdldFNjcm9sbCIsImVsZW1lbnQiLCJtZXRob2QiLCJzZWxmIiwiYnJvd3NlclN1cHBvcnRzQm94TW9kZWwiLCJzdHlsZVByb3AiLCJpbXBvcnRhbnQiLCJzZXRQcm9wZXJ0eSIsInRvTG93ZXJDYXNlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImN1cnJlbnRTdHlsZSIsInN0ciIsImxldHRlciIsInRvVXBwZXJDYXNlIiwib2xkTGVmdCIsIm9sZFJzTGVmdCIsInJ1bnRpbWVTdHlsZSIsInBpeGVsTGVmdCIsInNsaWRlIiwiZGlyIiwic3BlZWQiLCJyZWNhbGNNYXhIZWlnaHQiLCJjYWxjSGVpZ2h0IiwiY2FsY1BhZGRpbmdUb3AiLCJjYWxjUGFkZGluZ0JvdHRvbSIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwiZGlzcGxheSIsIm92ZXJmbG93Iiwic2xpZGVVcCIsInNsaWRlRG93biIsInNob3ciLCJoaWRlIiwiYWRkRXZlbnQiLCJ0eXBlIiwiaGFuZGxlciIsIm9uZSIsInJlbW92ZUV2ZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uIiwiZXZlbnRJZCIsInRhcmdldHMiLCJ0YXJnZXQiLCJqIiwib2ZmIiwib25ldGltZSIsImNhbGxlZSIsImhhc2giLCJjaHIiLCJjaGFyQ29kZUF0IiwiYW5pbWF0ZUNsYXNzIiwiYW5pbWF0aW9uTmFtZSIsImFuaW1hdGlvbiIsImFuaW1hdGlvbnMiLCJPQW5pbWF0aW9uIiwiTW96QW5pbWF0aW9uIiwiV2Via2l0QW5pbWF0aW9uIiwibXNBbmltYXRpb24iLCJ0cmFuc2l0aW9uRW5kIiwidHJhbnNpdGlvbiIsInRyYW5zaXRpb25zIiwiT1RyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwiV2Via2l0VHJhbnNpdGlvbiIsIm1zVHJhbnNpdGlvbiIsImFuaW1hdGlvbkVuZCIsImFuaW1hdGVEZWxheSIsImFuaW1hdGVEdXJhdGlvbiIsInNjcm9sbFRvIiwidGFyZ2V0UG9zIiwic2Nyb2xsUG9zIiwic2Nyb2xsVG9wIiwiaXNBcnJheSIsImlzRW1wdHkiLCJudW1iZXJTdHJpbmciLCJuU3RyIiwieDEiLCJ4MiIsInJneCIsImlzUlRMIiwic25ha2VUb0NhbWVsIiwibSIsImZpbHRlckJvb2xlYW4iLCJzZXRIVE1MIiwiaHRtbCIsImlubmVySFRNTCIsImdldEhUTUwiLCJnZXREb2N1bWVudEhlaWdodCIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsImdldFNjcm9sbFRvcCIsInNjcm9sbGluZ0VsZW1lbnQiLCJjb2xvckxpZ2h0ZW4iLCJjb2xvciIsImFtb3VudCIsImFkZExpZ2h0IiwiY2MiLCJjb2xvckRhcmtlbiIsInN1YnRyYWN0TGlnaHQiLCJmdW5jIiwiZGVsYXkiLCJkZWJvdW5jZSIsInBhcnNlSnNvbiIsImpzb25TdHIiLCJtYXRjaGVkIiwiSlNPTiIsInBhcnNlIiwiZ2V0UmVzcG9uc2l2ZVZhbHVlIiwiZGVmYXVsdFZhbHVlIiwicmVzdWx0S2V5IiwicmVzdWx0QnJlYWtwb2ludCIsImFycmF5IiwibWFwIiwiZ2V0U2VsZWN0b3JNYXRjaFZhbHVlIiwidmFsdWVzIiwiZ2V0Q29uZGl0aW9uYWxWYWx1ZSIsInZhcmlhYmxlTmFtZSIsImhleCIsImlzSW5WaWV3cG9ydCIsImJvdHRvbSIsImlubmVySGVpZ2h0IiwiY2xpZW50V2lkdGgiLCJvbkRPTUNvbnRlbnRMb2FkZWQiLCJyZWFkeVN0YXRlIiwiaW5JZnJhbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/theme/js/components/util.js\n");

/***/ }),

/***/ "./resources/theme/js/layout/app.js":
/*!******************************************!*\
  !*** ./resources/theme/js/layout/app.js ***!
  \******************************************/
/***/ ((module) => {

"use strict";
eval(" // Class definition\n\nvar KTApp = function () {\n  var _initPageLoader = function initPageLoader() {\n    // CSS3 Transitions only after page load(.page-loading class added to body tag and remove with JS on page load)\n    KTUtil.removeClass(document.body, 'page-loading');\n  };\n\n  var _initBootstrapTooltip = function initBootstrapTooltip(el, options) {\n    var delay = {}; // Handle delay options\n\n    if (el.hasAttribute('data-bs-delay-hide')) {\n      delay['hide'] = el.getAttribute('data-bs-delay-hide');\n    }\n\n    if (el.hasAttribute('data-bs-delay-show')) {\n      delay['show'] = el.getAttribute('data-bs-delay-show');\n    }\n\n    if (delay) {\n      options['delay'] = delay;\n    } // Check dismiss options\n\n\n    if (el.hasAttribute('data-bs-dismiss') && el.getAttribute('data-bs-dismiss') == 'click') {\n      options['dismiss'] = 'click';\n    } // Initialize popover\n\n\n    var tp = new bootstrap.Tooltip(el, options); // Handle dismiss\n\n    if (options['dismiss'] && options['dismiss'] === 'click') {\n      // Hide popover on element click\n      el.addEventListener(\"click\", function (e) {\n        tp.hide();\n      });\n    }\n\n    return tp;\n  };\n\n  var _initBootstrapTooltips = function initBootstrapTooltips(el, options) {\n    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\n      _initBootstrapTooltip(tooltipTriggerEl, {});\n    });\n  };\n\n  var _initBootstrapPopover = function initBootstrapPopover(el, options) {\n    var delay = {}; // Handle delay options\n\n    if (el.hasAttribute('data-bs-delay-hide')) {\n      delay['hide'] = el.getAttribute('data-bs-delay-hide');\n    }\n\n    if (el.hasAttribute('data-bs-delay-show')) {\n      delay['show'] = el.getAttribute('data-bs-delay-show');\n    }\n\n    if (delay) {\n      options['delay'] = delay;\n    } // Handle dismiss option\n\n\n    if (el.getAttribute('data-bs-dismiss') == 'true') {\n      options['dismiss'] = true;\n    }\n\n    if (options['dismiss'] === true) {\n      options['template'] = '<div class=\"popover\" role=\"tooltip\"><div class=\"popover-arrow\"></div><span class=\"popover-dismiss btn btn-icon\"><i class=\"bi bi-x fs-2\"></i></span><h3 class=\"popover-header\"></h3><div class=\"popover-body\"></div></div>';\n    } // Initialize popover\n\n\n    var popover = new bootstrap.Popover(el, options); // Handle dismiss click\n\n    if (options['dismiss'] === true) {\n      var dismissHandler = function dismissHandler(e) {\n        popover.hide();\n      };\n\n      el.addEventListener('shown.bs.popover', function () {\n        var dismissEl = document.getElementById(el.getAttribute('aria-describedby'));\n        dismissEl.addEventListener('click', dismissHandler);\n      });\n      el.addEventListener('hide.bs.popover', function () {\n        var dismissEl = document.getElementById(el.getAttribute('aria-describedby'));\n        dismissEl.removeEventListener('click', dismissHandler);\n      });\n    }\n\n    return popover;\n  };\n\n  var _initBootstrapPopovers = function initBootstrapPopovers() {\n    var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"popover\"]'));\n    var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {\n      _initBootstrapPopover(popoverTriggerEl, {});\n    });\n  };\n\n  var _initScrollSpy = function initScrollSpy() {\n    var elements = [].slice.call(document.querySelectorAll('[data-bs-spy=\"scroll\"]'));\n    elements.map(function (element) {\n      var sel = element.getAttribute('data-bs-target');\n      var scrollContent = document.querySelector(element.getAttribute('data-bs-target'));\n      var scrollSpy = bootstrap.ScrollSpy.getInstance(scrollContent);\n\n      if (scrollSpy) {\n        scrollSpy.refresh();\n      }\n    });\n  };\n\n  var _initButtons = function initButtons() {\n    var buttonsGroup = [].slice.call(document.querySelectorAll('[data-kt-buttons=\"true\"]'));\n    buttonsGroup.map(function (group) {\n      var selector = group.hasAttribute('data-kt-buttons-target') ? group.getAttribute('data-kt-buttons-target') : '.btn'; // Toggle Handler\n\n      KTUtil.on(group, selector, 'click', function (e) {\n        var buttons = [].slice.call(group.querySelectorAll(selector + '.active'));\n        buttons.map(function (button) {\n          button.classList.remove('active');\n        });\n        this.classList.add('active');\n      });\n    });\n  };\n\n  var _initCheck = function initCheck() {\n    // Toggle Handler\n    KTUtil.on(document.body, '[data-kt-check=\"true\"]', 'change', function (e) {\n      var check = this;\n      var targets = document.querySelectorAll(check.getAttribute('data-kt-check-target'));\n      KTUtil.each(targets, function (target) {\n        if (target.type == 'checkbox') {\n          target.checked = check.checked;\n        } else {\n          target.classList.toggle('active');\n        }\n      });\n    });\n  };\n\n  var _initSelect = function initSelect2() {\n    var elements = [].slice.call(document.querySelectorAll('[data-control=\"select2\"], [data-kt-select2=\"true\"]'));\n    elements.map(function (element) {\n      var options = {\n        dir: document.body.getAttribute('direction')\n      };\n\n      if (element.getAttribute('data-hide-search') == 'true') {\n        options.minimumResultsForSearch = Infinity;\n      }\n\n      $(element).select2(options);\n    });\n  };\n\n  var _initAutosize = function initAutosize() {\n    var inputs = [].slice.call(document.querySelectorAll('[data-kt-autosize=\"true\"]'));\n    inputs.map(function (input) {\n      autosize(input);\n    });\n  };\n\n  var _initCountUp = function initCountUp() {\n    var elements = [].slice.call(document.querySelectorAll('[data-kt-countup=\"true\"]:not(.counted)'));\n    elements.map(function (element) {\n      if (KTUtil.isInViewport(element) && KTUtil.visible(element)) {\n        var options = {};\n        var value = element.getAttribute('data-kt-countup-value');\n        value = parseFloat(value.replace(/,/g, \"\"));\n\n        if (element.hasAttribute('data-kt-countup-start-val')) {\n          options.startVal = parseFloat(element.getAttribute('data-kt-countup-start-val'));\n        }\n\n        if (element.hasAttribute('data-kt-countup-duration')) {\n          options.duration = parseInt(element.getAttribute('data-kt-countup-duration'));\n        }\n\n        if (element.hasAttribute('data-kt-countup-decimal-places')) {\n          options.decimalPlaces = parseInt(element.getAttribute('data-kt-countup-decimal-places'));\n        }\n\n        if (element.hasAttribute('data-kt-countup-prefix')) {\n          options.prefix = element.getAttribute('data-kt-countup-prefix');\n        }\n\n        if (element.hasAttribute('data-kt-countup-suffix')) {\n          options.suffix = element.getAttribute('data-kt-countup-suffix');\n        }\n\n        var count = new countUp.CountUp(element, value, options);\n        count.start();\n        element.classList.add('counted');\n      }\n    });\n  };\n\n  var _initCountUpTabs = function initCountUpTabs() {\n    // Initial call\n    _initCountUp(); // Window scroll event handler\n\n\n    window.addEventListener('scroll', _initCountUp); // Tabs shown event handler\n\n    var tabs = [].slice.call(document.querySelectorAll('[data-kt-countup-tabs=\"true\"][data-bs-toggle=\"tab\"]'));\n    tabs.map(function (tab) {\n      tab.addEventListener('shown.bs.tab', _initCountUp);\n    });\n  };\n\n  var _initTinySliders = function initTinySliders() {\n    // Init Slider\n    var initSlider = function initSlider(el) {\n      if (!el) {\n        return;\n      }\n\n      var tnsOptions = {}; // Convert string boolean\n\n      var checkBool = function checkBool(val) {\n        if (val === 'true') {\n          return true;\n        }\n\n        if (val === 'false') {\n          return false;\n        }\n\n        return val;\n      }; // get extra options via data attributes\n\n\n      el.getAttributeNames().forEach(function (attrName) {\n        // more options; https://github.com/ganlanyuan/tiny-slider#options\n        if (/^data-tns-.*/g.test(attrName)) {\n          var optionName = attrName.replace('data-tns-', '').toLowerCase().replace(/(?:[\\s-])\\w/g, function (match) {\n            return match.replace('-', '').toUpperCase();\n          });\n\n          if (attrName === 'data-tns-responsive') {\n            // fix string with a valid json\n            var jsonStr = el.getAttribute(attrName).replace(/(\\w+:)|(\\w+ :)/g, function (matched) {\n              return '\"' + matched.substring(0, matched.length - 1) + '\":';\n            });\n\n            try {\n              // convert json string to object\n              tnsOptions[optionName] = JSON.parse(jsonStr);\n            } catch (e) {}\n          } else {\n            tnsOptions[optionName] = checkBool(el.getAttribute(attrName));\n          }\n        }\n      });\n      var opt = Object.assign({}, {\n        container: el,\n        slideBy: 'page',\n        autoplay: true,\n        autoplayButtonOutput: false\n      }, tnsOptions);\n\n      if (el.closest('.tns')) {\n        KTUtil.addClass(el.closest('.tns'), 'tns-initiazlied');\n      }\n\n      return tns(opt);\n    }; // Sliders\n\n\n    var elements = Array.prototype.slice.call(document.querySelectorAll('[data-tns=\"true\"]'), 0);\n\n    if (!elements && elements.length === 0) {\n      return;\n    }\n\n    elements.forEach(function (el) {\n      initSlider(el);\n    });\n  };\n\n  var _initSmoothScroll = function initSmoothScroll() {\n    if (SmoothScroll) {\n      new SmoothScroll('a[data-kt-scroll-toggle][href*=\"#\"]', {\n        speed: 900,\n        offset: function offset(anchor, toggle) {\n          // Integer or Function returning an integer. How far to offset the scrolling anchor location in pixels\n          // This example is a function, but you could do something as simple as `offset: 25`\n          // An example returning different values based on whether the clicked link was in the header nav or not\n          if (anchor.hasAttribute('data-kt-scroll-offset')) {\n            var val = KTUtil.getResponsiveValue(anchor.getAttribute('data-kt-scroll-offset'));\n            return val;\n          } else {\n            return 0;\n          }\n        }\n      });\n    }\n  };\n\n  var _initBootstrapToast = function initBootstrapToast() {\n    var toastElList = [].slice.call(document.querySelectorAll('.toast'));\n    var toastList = toastElList.map(function (toastEl) {\n      return new bootstrap.Toast(toastEl, {});\n    });\n  };\n\n  return {\n    init: function init() {\n      this.initPageLoader();\n      this.initBootstrapTooltips();\n      this.initBootstrapPopovers();\n      this.initScrollSpy();\n      this.initButtons();\n      this.initCheck();\n      this.initSelect2();\n      this.initCountUp();\n      this.initCountUpTabs();\n      this.initAutosize();\n      this.initTinySliders();\n      this.initSmoothScroll();\n      this.initBootstrapToast();\n    },\n    initPageLoader: function initPageLoader() {\n      _initPageLoader();\n    },\n    initBootstrapTooltip: function initBootstrapTooltip(el, options) {\n      return _initBootstrapTooltip(el, options);\n    },\n    initBootstrapTooltips: function initBootstrapTooltips() {\n      _initBootstrapTooltips();\n    },\n    initBootstrapPopovers: function initBootstrapPopovers() {\n      _initBootstrapPopovers();\n    },\n    initBootstrapPopover: function initBootstrapPopover(el, options) {\n      return _initBootstrapPopover(el, options);\n    },\n    initScrollSpy: function initScrollSpy() {\n      _initScrollSpy();\n    },\n    initButtons: function initButtons() {\n      _initButtons();\n    },\n    initCheck: function initCheck() {\n      _initCheck();\n    },\n    initSelect2: function initSelect2() {\n      _initSelect();\n    },\n    initCountUp: function initCountUp() {\n      _initCountUp();\n    },\n    initCountUpTabs: function initCountUpTabs() {\n      _initCountUpTabs();\n    },\n    initAutosize: function initAutosize() {\n      _initAutosize();\n    },\n    initTinySliders: function initTinySliders() {\n      _initTinySliders();\n    },\n    initSmoothScroll: function initSmoothScroll() {\n      _initSmoothScroll();\n    },\n    initBootstrapToast: function initBootstrapToast() {\n      _initBootstrapToast();\n    },\n    isDarkMode: function isDarkMode() {\n      return document.body.classList.contains('dark-mode');\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTApp.init();\n}); // On window load\n\nwindow.addEventListener(\"load\", function () {\n  KTApp.initPageLoader();\n}); // Webpack support\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTApp;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/theme/js/layout/app.js\n");

/***/ }),

/***/ "./resources/theme/js/layout/header.js":
/*!*********************************************!*\
  !*** ./resources/theme/js/layout/header.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
eval(" // Class definition\n\nvar KTLayoutHeader = function () {\n  // Private variables\n  var header; // Private functions\n\n  var handleSticky = function handleSticky() {\n    if (!header) {\n      return;\n    }\n\n    var sticky = KTSticky.getInstance(header);\n    var timer;\n\n    if (!sticky) {\n      return;\n    }\n\n    sticky.on('kt.sticky.change', function () {\n      timer = setTimeout(function () {\n        KTMenu.updateDropdowns();\n      }, 300);\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init() {\n      // Elements\n      header = document.querySelector('#kt_header'); // Handle sticky mode\n\n      handleSticky();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTLayoutHeader.init();\n}); // Webpack support\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTLayoutHeader;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvdGhlbWUvanMvbGF5b3V0L2hlYWRlci5qcy5qcyIsIm1hcHBpbmdzIjoiQ0FFQTs7QUFDQSxJQUFJQSxjQUFjLEdBQUcsWUFBVztBQUM1QjtBQUNBLE1BQUlDLE1BQUosQ0FGNEIsQ0FJNUI7O0FBQ0EsTUFBSUMsWUFBWSxHQUFHLFNBQWZBLFlBQWUsR0FBVztBQUMxQixRQUFJLENBQUNELE1BQUwsRUFBYTtBQUNUO0FBQ0g7O0FBRUQsUUFBSUUsTUFBTSxHQUFHQyxRQUFRLENBQUNDLFdBQVQsQ0FBcUJKLE1BQXJCLENBQWI7QUFDQSxRQUFJSyxLQUFKOztBQUVBLFFBQUksQ0FBQ0gsTUFBTCxFQUFhO0FBQ1Q7QUFDSDs7QUFFREEsSUFBQUEsTUFBTSxDQUFDSSxFQUFQLENBQVUsa0JBQVYsRUFBOEIsWUFBVztBQUNyQ0QsTUFBQUEsS0FBSyxHQUFHRSxVQUFVLENBQUMsWUFBVztBQUMxQkMsUUFBQUEsTUFBTSxDQUFDQyxlQUFQO0FBQ0gsT0FGaUIsRUFFZixHQUZlLENBQWxCO0FBR0gsS0FKRDtBQUtILEdBakJELENBTDRCLENBd0I1Qjs7O0FBQ0gsU0FBTztBQUNOQyxJQUFBQSxJQUFJLEVBQUUsZ0JBQVc7QUFDUDtBQUNBVixNQUFBQSxNQUFNLEdBQUdXLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixZQUF2QixDQUFULENBRk8sQ0FJUDs7QUFDQVgsTUFBQUEsWUFBWTtBQUNyQjtBQVBLLEdBQVA7QUFTQSxDQWxDb0IsRUFBckIsQyxDQW9DQTs7O0FBQ0FZLE1BQU0sQ0FBQ0Msa0JBQVAsQ0FBMEIsWUFBVztBQUNqQ2YsRUFBQUEsY0FBYyxDQUFDVyxJQUFmO0FBQ0gsQ0FGRCxFLENBSUE7O0FBQ0EsSUFBSSxTQUFpQyxPQUFPSyxNQUFNLENBQUNDLE9BQWQsS0FBMEIsV0FBL0QsRUFBNEU7QUFDeEVELEVBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmpCLGNBQWpCO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvdGhlbWUvanMvbGF5b3V0L2hlYWRlci5qcz9jNzJiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vLyBDbGFzcyBkZWZpbml0aW9uXG52YXIgS1RMYXlvdXRIZWFkZXIgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBQcml2YXRlIHZhcmlhYmxlc1xuICAgIHZhciBoZWFkZXI7XG5cbiAgICAvLyBQcml2YXRlIGZ1bmN0aW9uc1xuICAgIHZhciBoYW5kbGVTdGlja3kgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCFoZWFkZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIHN0aWNreSA9IEtUU3RpY2t5LmdldEluc3RhbmNlKGhlYWRlcik7XG4gICAgICAgIHZhciB0aW1lcjtcblxuICAgICAgICBpZiAoIXN0aWNreSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RpY2t5Lm9uKCdrdC5zdGlja3kuY2hhbmdlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgS1RNZW51LnVwZGF0ZURyb3Bkb3ducygpOyBcbiAgICAgICAgICAgIH0sIDMwMCk7ICAgICAgICAgICAgICBcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUHVibGljIG1ldGhvZHNcblx0cmV0dXJuIHtcblx0XHRpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIEVsZW1lbnRzXG4gICAgICAgICAgICBoZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcja3RfaGVhZGVyJyk7XG5cbiAgICAgICAgICAgIC8vIEhhbmRsZSBzdGlja3kgbW9kZVxuICAgICAgICAgICAgaGFuZGxlU3RpY2t5KCk7XG5cdFx0fVxuXHR9O1xufSgpO1xuXG4vLyBPbiBkb2N1bWVudCByZWFkeVxuS1RVdGlsLm9uRE9NQ29udGVudExvYWRlZChmdW5jdGlvbigpIHtcbiAgICBLVExheW91dEhlYWRlci5pbml0KCk7XG59KTtcblxuLy8gV2VicGFjayBzdXBwb3J0XG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXRIZWFkZXI7XG59Il0sIm5hbWVzIjpbIktUTGF5b3V0SGVhZGVyIiwiaGVhZGVyIiwiaGFuZGxlU3RpY2t5Iiwic3RpY2t5IiwiS1RTdGlja3kiLCJnZXRJbnN0YW5jZSIsInRpbWVyIiwib24iLCJzZXRUaW1lb3V0IiwiS1RNZW51IiwidXBkYXRlRHJvcGRvd25zIiwiaW5pdCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIktUVXRpbCIsIm9uRE9NQ29udGVudExvYWRlZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/theme/js/layout/header.js\n");

/***/ }),

/***/ "./resources/theme/js/layout/search.js":
/*!*********************************************!*\
  !*** ./resources/theme/js/layout/search.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
eval(" // Class definition\n\nvar KTLayoutSearch = function () {\n  // Private variables\n  var element;\n  var recentlyViewedElement;\n  var resultsElement;\n  var wrapperElement;\n  var emptyElement;\n  var preferencesElement;\n  var preferencesShowElement;\n  var preferencesDismissElement;\n  var searchObject; // Private functions\n\n  var processs = function processs(search) {\n    var timeout = setTimeout(function () {\n      var number = KTUtil.getRandomInt(1, 3); // Hide recently viewed\n\n      recentlyViewedElement.classList.add('d-none');\n\n      if (number === 3) {\n        // Hide results\n        resultsElement.classList.add('d-none'); // Show empty message \n\n        emptyElement.classList.remove('d-none');\n      } else {\n        // Show results\n        resultsElement.classList.remove('d-none'); // Hide empty message \n\n        emptyElement.classList.add('d-none');\n      } // Complete search\n\n\n      search.complete();\n    }, 1500);\n  };\n\n  var clear = function clear(search) {\n    // Show recently viewed\n    recentlyViewedElement.classList.remove('d-none'); // Hide results\n\n    resultsElement.classList.add('d-none'); // Hide empty message \n\n    emptyElement.classList.add('d-none');\n  }; // Public methods\n\n\n  return {\n    init: function init() {\n      // Elements\n      element = document.querySelector('#kt_header_search');\n\n      if (!element) {\n        return;\n      }\n\n      wrapperElement = element.querySelector('[data-kt-search-element=\"wrapper\"]');\n      recentlyViewedElement = element.querySelector('[data-kt-search-element=\"recently-viewed\"]');\n      resultsElement = element.querySelector('[data-kt-search-element=\"results\"]');\n      emptyElement = element.querySelector('[data-kt-search-element=\"empty\"]');\n      preferencesElement = element.querySelector('[data-kt-search-element=\"preferences\"]');\n      preferencesShowElement = element.querySelector('[data-kt-search-element=\"preferences-show\"]');\n      preferencesDismissElement = element.querySelector('[data-kt-search-element=\"preferences-dismiss\"]'); // Initialize search handler\n\n      searchObject = new KTSearch(element); // Search handler\n\n      searchObject.on('kt.search.process', processs); // Clear handler\n\n      searchObject.on('kt.search.clear', clear); // Preference show handler\n\n      preferencesShowElement.addEventListener('click', function () {\n        wrapperElement.classList.add('d-none');\n        preferencesElement.classList.remove('d-none');\n      }); // Preference dismiss handler\n\n      preferencesDismissElement.addEventListener('click', function () {\n        wrapperElement.classList.remove('d-none');\n        preferencesElement.classList.add('d-none');\n      });\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTLayoutSearch.init();\n}); // Webpack support\n\nif ( true && typeof module.exports !== 'undefined') {\n  module.exports = KTLayoutSearch;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/theme/js/layout/search.js\n");

/***/ }),

/***/ "./resources/theme/webpack/scripts.js":
/*!********************************************!*\
  !*** ./resources/theme/webpack/scripts.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// Keenthemes' plugins\nwindow.KTUtil = __webpack_require__(/*! ../js/components/util.js */ \"./resources/theme/js/components/util.js\");\nwindow.KTCookie = __webpack_require__(/*! ../js/components/cookie.js */ \"./resources/theme/js/components/cookie.js\");\nwindow.KTDialer = __webpack_require__(/*! ../js/components/dialer.js */ \"./resources/theme/js/components/dialer.js\");\nwindow.KTDrawer = __webpack_require__(/*! ../js/components/drawer.js */ \"./resources/theme/js/components/drawer.js\");\nwindow.KTEventHandler = __webpack_require__(/*! ../js/components/event-handler.js */ \"./resources/theme/js/components/event-handler.js\");\nwindow.KTFeedback = __webpack_require__(/*! ../js/components/feedback.js */ \"./resources/theme/js/components/feedback.js\");\nwindow.KTImageInput = __webpack_require__(/*! ../js/components/image-input.js */ \"./resources/theme/js/components/image-input.js\");\nwindow.KTMenu = __webpack_require__(/*! ../js/components/menu.js */ \"./resources/theme/js/components/menu.js\");\nwindow.KTPasswordMeter = __webpack_require__(/*! ../js/components/password-meter.js */ \"./resources/theme/js/components/password-meter.js\");\nwindow.KTScroll = __webpack_require__(/*! ../js/components/scroll.js */ \"./resources/theme/js/components/scroll.js\");\nwindow.KTScrolltop = __webpack_require__(/*! ../js/components/scrolltop.js */ \"./resources/theme/js/components/scrolltop.js\");\nwindow.KTSearch = __webpack_require__(/*! ../js/components/search.js */ \"./resources/theme/js/components/search.js\");\nwindow.KTStepper = __webpack_require__(/*! ../js/components/stepper.js */ \"./resources/theme/js/components/stepper.js\");\nwindow.KTSticky = __webpack_require__(/*! ../js/components/sticky.js */ \"./resources/theme/js/components/sticky.js\");\nwindow.KTSwapper = __webpack_require__(/*! ../js/components/swapper.js */ \"./resources/theme/js/components/swapper.js\");\nwindow.KTToggle = __webpack_require__(/*! ../js/components/toggle.js */ \"./resources/theme/js/components/toggle.js\"); // Layout base js\n\nwindow.KTApp = __webpack_require__(/*! ../js/layout/app.js */ \"./resources/theme/js/layout/app.js\");\nwindow.KTLayoutHeader = __webpack_require__(/*! ../js/layout/header.js */ \"./resources/theme/js/layout/header.js\");\nwindow.KTLayoutSearch = __webpack_require__(/*! ../js/layout/search.js */ \"./resources/theme/js/layout/search.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvdGhlbWUvd2VicGFjay9zY3JpcHRzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0FBLE1BQU0sQ0FBQ0MsTUFBUCxHQUFnQkMsbUJBQU8sQ0FBQyx5RUFBRCxDQUF2QjtBQUNBRixNQUFNLENBQUNHLFFBQVAsR0FBa0JELG1CQUFPLENBQUMsNkVBQUQsQ0FBekI7QUFDQUYsTUFBTSxDQUFDSSxRQUFQLEdBQWtCRixtQkFBTyxDQUFDLDZFQUFELENBQXpCO0FBQ0FGLE1BQU0sQ0FBQ0ssUUFBUCxHQUFrQkgsbUJBQU8sQ0FBQyw2RUFBRCxDQUF6QjtBQUNBRixNQUFNLENBQUNNLGNBQVAsR0FBd0JKLG1CQUFPLENBQUMsMkZBQUQsQ0FBL0I7QUFDQUYsTUFBTSxDQUFDTyxVQUFQLEdBQW9CTCxtQkFBTyxDQUFDLGlGQUFELENBQTNCO0FBQ0FGLE1BQU0sQ0FBQ1EsWUFBUCxHQUFzQk4sbUJBQU8sQ0FBQyx1RkFBRCxDQUE3QjtBQUNBRixNQUFNLENBQUNTLE1BQVAsR0FBZ0JQLG1CQUFPLENBQUMseUVBQUQsQ0FBdkI7QUFDQUYsTUFBTSxDQUFDVSxlQUFQLEdBQXlCUixtQkFBTyxDQUFDLDZGQUFELENBQWhDO0FBQ0FGLE1BQU0sQ0FBQ1csUUFBUCxHQUFrQlQsbUJBQU8sQ0FBQyw2RUFBRCxDQUF6QjtBQUNBRixNQUFNLENBQUNZLFdBQVAsR0FBcUJWLG1CQUFPLENBQUMsbUZBQUQsQ0FBNUI7QUFDQUYsTUFBTSxDQUFDYSxRQUFQLEdBQWtCWCxtQkFBTyxDQUFDLDZFQUFELENBQXpCO0FBQ0FGLE1BQU0sQ0FBQ2MsU0FBUCxHQUFtQlosbUJBQU8sQ0FBQywrRUFBRCxDQUExQjtBQUNBRixNQUFNLENBQUNlLFFBQVAsR0FBa0JiLG1CQUFPLENBQUMsNkVBQUQsQ0FBekI7QUFDQUYsTUFBTSxDQUFDZ0IsU0FBUCxHQUFtQmQsbUJBQU8sQ0FBQywrRUFBRCxDQUExQjtBQUNBRixNQUFNLENBQUNpQixRQUFQLEdBQWtCZixtQkFBTyxDQUFDLDZFQUFELENBQXpCLEMsQ0FFQTs7QUFDQUYsTUFBTSxDQUFDa0IsS0FBUCxHQUFlaEIsbUJBQU8sQ0FBQywrREFBRCxDQUF0QjtBQUNBRixNQUFNLENBQUNtQixjQUFQLEdBQXdCakIsbUJBQU8sQ0FBQyxxRUFBRCxDQUEvQjtBQUNBRixNQUFNLENBQUNvQixjQUFQLEdBQXdCbEIsbUJBQU8sQ0FBQyxxRUFBRCxDQUEvQiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy90aGVtZS93ZWJwYWNrL3NjcmlwdHMuanM/NzEzZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBLZWVudGhlbWVzJyBwbHVnaW5zXG53aW5kb3cuS1RVdGlsID0gcmVxdWlyZSgnLi4vanMvY29tcG9uZW50cy91dGlsLmpzJyk7XG53aW5kb3cuS1RDb29raWUgPSByZXF1aXJlKCcuLi9qcy9jb21wb25lbnRzL2Nvb2tpZS5qcycpO1xud2luZG93LktURGlhbGVyID0gcmVxdWlyZSgnLi4vanMvY29tcG9uZW50cy9kaWFsZXIuanMnKTtcbndpbmRvdy5LVERyYXdlciA9IHJlcXVpcmUoJy4uL2pzL2NvbXBvbmVudHMvZHJhd2VyLmpzJyk7XG53aW5kb3cuS1RFdmVudEhhbmRsZXIgPSByZXF1aXJlKCcuLi9qcy9jb21wb25lbnRzL2V2ZW50LWhhbmRsZXIuanMnKTtcbndpbmRvdy5LVEZlZWRiYWNrID0gcmVxdWlyZSgnLi4vanMvY29tcG9uZW50cy9mZWVkYmFjay5qcycpO1xud2luZG93LktUSW1hZ2VJbnB1dCA9IHJlcXVpcmUoJy4uL2pzL2NvbXBvbmVudHMvaW1hZ2UtaW5wdXQuanMnKTtcbndpbmRvdy5LVE1lbnUgPSByZXF1aXJlKCcuLi9qcy9jb21wb25lbnRzL21lbnUuanMnKTtcbndpbmRvdy5LVFBhc3N3b3JkTWV0ZXIgPSByZXF1aXJlKCcuLi9qcy9jb21wb25lbnRzL3Bhc3N3b3JkLW1ldGVyLmpzJyk7XG53aW5kb3cuS1RTY3JvbGwgPSByZXF1aXJlKCcuLi9qcy9jb21wb25lbnRzL3Njcm9sbC5qcycpO1xud2luZG93LktUU2Nyb2xsdG9wID0gcmVxdWlyZSgnLi4vanMvY29tcG9uZW50cy9zY3JvbGx0b3AuanMnKTtcbndpbmRvdy5LVFNlYXJjaCA9IHJlcXVpcmUoJy4uL2pzL2NvbXBvbmVudHMvc2VhcmNoLmpzJyk7XG53aW5kb3cuS1RTdGVwcGVyID0gcmVxdWlyZSgnLi4vanMvY29tcG9uZW50cy9zdGVwcGVyLmpzJyk7XG53aW5kb3cuS1RTdGlja3kgPSByZXF1aXJlKCcuLi9qcy9jb21wb25lbnRzL3N0aWNreS5qcycpO1xud2luZG93LktUU3dhcHBlciA9IHJlcXVpcmUoJy4uL2pzL2NvbXBvbmVudHMvc3dhcHBlci5qcycpO1xud2luZG93LktUVG9nZ2xlID0gcmVxdWlyZSgnLi4vanMvY29tcG9uZW50cy90b2dnbGUuanMnKTtcblxuLy8gTGF5b3V0IGJhc2UganNcbndpbmRvdy5LVEFwcCA9IHJlcXVpcmUoJy4uL2pzL2xheW91dC9hcHAuanMnKTtcbndpbmRvdy5LVExheW91dEhlYWRlciA9IHJlcXVpcmUoJy4uL2pzL2xheW91dC9oZWFkZXIuanMnKTtcbndpbmRvdy5LVExheW91dFNlYXJjaCA9IHJlcXVpcmUoJy4uL2pzL2xheW91dC9zZWFyY2guanMnKTtcbiJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJLVFV0aWwiLCJyZXF1aXJlIiwiS1RDb29raWUiLCJLVERpYWxlciIsIktURHJhd2VyIiwiS1RFdmVudEhhbmRsZXIiLCJLVEZlZWRiYWNrIiwiS1RJbWFnZUlucHV0IiwiS1RNZW51IiwiS1RQYXNzd29yZE1ldGVyIiwiS1RTY3JvbGwiLCJLVFNjcm9sbHRvcCIsIktUU2VhcmNoIiwiS1RTdGVwcGVyIiwiS1RTdGlja3kiLCJLVFN3YXBwZXIiLCJLVFRvZ2dsZSIsIktUQXBwIiwiS1RMYXlvdXRIZWFkZXIiLCJLVExheW91dFNlYXJjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/theme/webpack/scripts.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/theme/webpack/scripts.js");
/******/ 	
/******/ })()
;