/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/theme/js/custom/widgets.js":
/*!**********************************************!*\
  !*** ./resources/theme/js/custom/widgets.js ***!
  \**********************************************/
/***/ (() => {

eval(" // Class definition\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar KTWidgets = function () {\n  // Lists widgets\n  var initListsWidget3 = function initListsWidget3() {\n    var element = document.getElementById(\"kt_lists_widget_3_chart\");\n    var labelColor = KTUtil.getCssVariableValue('--bs-gray-500');\n    var borderColor = KTUtil.getCssVariableValue('--bs-gray-200');\n    var baseColor = KTUtil.getCssVariableValue('--bs-primary');\n    var secondaryColor = KTUtil.getCssVariableValue('--bs-info');\n\n    if (!element) {\n      return;\n    }\n\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [40, 50, 65, 70, 50, 30]\n      }, {\n        name: 'Revenue',\n        data: [-30, -40, -55, -60, -40, -20]\n      }],\n      chart: {\n        fontFamily: 'inherit',\n        type: 'bar',\n        stacked: true,\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: _defineProperty({\n          borderRadius: 8,\n          horizontal: false,\n          columnWidth: ['12%']\n        }, \"borderRadius\", 4)\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      yaxis: {\n        min: -80,\n        max: 80,\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px'\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [baseColor, secondaryColor],\n      grid: {\n        borderColor: borderColor,\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  }; // Chart widgets    \n\n\n  var initChartWidget2 = function initChartWidget2(tabSelector, chartSelector, data, initByDefault) {\n    var element = document.querySelector(chartSelector);\n\n    if (!element) {\n      return;\n    }\n\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var options = {\n      series: [{\n        name: 'Profit',\n        data: data\n      }],\n      chart: {\n        fontFamily: 'inherit',\n        type: 'bar',\n        height: height,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['30%'],\n          borderRadius: 4\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      xaxis: {\n        crosshairs: {\n          show: false\n        },\n        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTUtil.getCssVariableValue('--bs-gray-400'),\n            fontSize: '12px'\n          }\n        }\n      },\n      yaxis: {\n        crosshairs: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTUtil.getCssVariableValue('--bs-gray-400'),\n            fontSize: '12px'\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none'\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px'\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \"k\";\n          }\n        }\n      },\n      colors: [KTUtil.getCssVariableValue('--bs-primary')],\n      grid: {\n        borderColor: KTUtil.getCssVariableValue('--bs-gray-300'),\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    var init = false;\n    var tab = document.querySelector(tabSelector);\n\n    if (initByDefault === true) {\n      chart.render();\n      init = true;\n    }\n\n    tab.addEventListener('shown.bs.tab', function (event) {\n      if (init == false) {\n        chart.render();\n        init = true;\n      }\n    });\n  }; // Mixed widgets\n\n\n  var initMixedWidget1 = function initMixedWidget1() {\n    var element = document.getElementById(\"kt_mixed_widget_1_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var height = parseInt(element.getAttribute('data-kt-height'));\n\n    var options = _defineProperty({\n      series: [68],\n      chart: {\n        fontFamily: 'inherit',\n        height: height,\n        type: 'radialBar',\n        toolbar: {\n          show: false\n        }\n      },\n      grid: {\n        padding: {//top: 0\n        }\n      },\n      plotOptions: {\n        radialBar: {\n          borderRadius: 4,\n          startAngle: -90,\n          endAngle: 90,\n          hollow: {\n            margin: 0,\n            size: \"70%\"\n          },\n          dataLabels: {\n            showOn: \"always\",\n            name: {\n              show: true,\n              fontFamily: 'inherit',\n              fontSize: \"13px\",\n              fontWeight: 500,\n              offsetY: -4,\n              color: KTUtil.getCssVariableValue('--bs-gray-400')\n            },\n            value: {\n              color: KTUtil.getCssVariableValue('--bs-info'),\n              fontFamily: 'inherit',\n              fontSize: \"30px\",\n              fontWeight: 700,\n              offsetY: -40,\n              show: true\n            }\n          },\n          track: {\n            background: KTUtil.getCssVariableValue('--bs-light-info'),\n            strokeWidth: '100%'\n          }\n        }\n      },\n      colors: [KTUtil.getCssVariableValue('--bs-info')],\n      stroke: {\n        lineCap: \"round\"\n      },\n      labels: [\"Weekly Followers\"]\n    }, \"grid\", {\n      padding: {\n        bottom: 0\n      }\n    });\n\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var initMixedWidget2 = function initMixedWidget2() {\n    var element = document.getElementById(\"kt_mixed_widget_2_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var options = {\n      series: [{\n        name: 'Inflation',\n        data: [2.3, 3.1, 4.0, 10.1, 4.0, 3.6, 3.2]\n      }],\n      chart: {\n        fontFamily: 'inherit',\n        height: height,\n        type: 'bar',\n        toolbar: {\n          show: false\n        }\n      },\n      grid: {\n        show: false,\n        padding: {\n          top: 0,\n          bottom: -5\n        }\n      },\n      plotOptions: {\n        bar: {\n          borderRadius: 10,\n          dataLabels: {\n            position: 'top' // top, center, bottom\n\n          }\n        }\n      },\n      dataLabels: {\n        enabled: false,\n        formatter: function formatter(val) {\n          return val + \"%\";\n        },\n        offsetY: -20,\n        style: {\n          fontSize: '12px',\n          colors: [\"#304758\"]\n        }\n      },\n      xaxis: {\n        labels: {\n          show: false\n        },\n        categories: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\"],\n        position: 'top',\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        crosshairs: {\n          show: false\n        },\n        tooltip: {\n          enabled: false\n        }\n      },\n      yaxis: {\n        show: false,\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          formatter: function formatter(val) {\n            return val + \"%\";\n          }\n        }\n      },\n      title: {\n        text: 'Monthly Inflation in Argentina, 2002',\n        floating: true,\n        offsetY: 330,\n        align: 'center',\n        style: {\n          color: '#444'\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  }; // Statistics widgets\n\n\n  var initStatisticsWidget1 = function initStatisticsWidget1() {\n    var charts = document.querySelectorAll('.statistics-widget-1-chart');\n    [].slice.call(charts).map(function (element) {\n      var height = parseInt(KTUtil.css(element, 'height'));\n\n      if (!element) {\n        return;\n      }\n\n      var color = element.getAttribute('data-kt-chart-color');\n      var labelColor = KTUtil.getCssVariableValue('--bs-' + 'gray-800');\n      var baseColor = KTUtil.getCssVariableValue('--bs-' + color);\n      var lightColor = KTUtil.getCssVariableValue('--bs-light-' + color);\n      var options = {\n        series: [{\n          name: 'Net Profit',\n          data: [30, 45, 32, 70, 40]\n        }],\n        chart: {\n          fontFamily: 'inherit',\n          type: 'area',\n          height: height,\n          toolbar: {\n            show: false\n          },\n          zoom: {\n            enabled: false\n          },\n          sparkline: {\n            enabled: true\n          }\n        },\n        plotOptions: {},\n        legend: {\n          show: false\n        },\n        dataLabels: {\n          enabled: false\n        },\n        fill: {\n          type: 'solid',\n          opacity: 0.3\n        },\n        stroke: {\n          curve: 'smooth',\n          show: true,\n          width: 3,\n          colors: [baseColor]\n        },\n        xaxis: {\n          categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          },\n          labels: {\n            show: false,\n            style: {\n              colors: labelColor,\n              fontSize: '12px'\n            }\n          },\n          crosshairs: {\n            show: false,\n            position: 'front',\n            stroke: {\n              color: '#E4E6EF',\n              width: 1,\n              dashArray: 3\n            }\n          },\n          tooltip: {\n            enabled: true,\n            formatter: undefined,\n            offsetY: 0,\n            style: {\n              fontSize: '12px'\n            }\n          }\n        },\n        yaxis: {\n          min: 0,\n          max: 80,\n          labels: {\n            show: false,\n            style: {\n              colors: labelColor,\n              fontSize: '12px'\n            }\n          }\n        },\n        states: {\n          normal: {\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          },\n          hover: {\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          },\n          active: {\n            allowMultipleDataPointsSelection: false,\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          }\n        },\n        tooltip: {\n          style: {\n            fontSize: '12px'\n          },\n          y: {\n            formatter: function formatter(val) {\n              return \"$\" + val + \" thousands\";\n            }\n          }\n        },\n        colors: [baseColor],\n        markers: {\n          colors: [baseColor],\n          strokeColor: [lightColor],\n          strokeWidth: 3\n        }\n      };\n      var chart = new ApexCharts(element, options);\n      chart.render();\n    });\n  }; // Dark mode toggler\n\n\n  var initDarkModeToggle = function initDarkModeToggle() {\n    var toggle = document.querySelector('#kt_user_menu_dark_mode_toggle');\n\n    if (toggle) {\n      toggle.addEventListener('click', function () {\n        window.location.href = this.getAttribute('data-kt-url');\n      });\n    }\n  }; // Calendar\n\n\n  var initCalendarWidget1 = function initCalendarWidget1() {\n    if (typeof FullCalendar === 'undefined' || !document.querySelector('#kt_calendar_widget_1')) {\n      return;\n    }\n\n    var todayDate = moment().startOf('day');\n    var YM = todayDate.format('YYYY-MM');\n    var YESTERDAY = todayDate.clone().subtract(1, 'day').format('YYYY-MM-DD');\n    var TODAY = todayDate.format('YYYY-MM-DD');\n    var TOMORROW = todayDate.clone().add(1, 'day').format('YYYY-MM-DD');\n    var calendarEl = document.getElementById('kt_calendar_widget_1');\n    var calendar = new FullCalendar.Calendar(calendarEl, {\n      headerToolbar: {\n        left: 'prev,next today',\n        center: 'title',\n        right: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n      },\n      height: 800,\n      contentHeight: 780,\n      aspectRatio: 3,\n      // see: https://fullcalendar.io/docs/aspectRatio\n      nowIndicator: true,\n      now: TODAY + 'T09:25:00',\n      // just for demo\n      views: {\n        dayGridMonth: {\n          buttonText: 'month'\n        },\n        timeGridWeek: {\n          buttonText: 'week'\n        },\n        timeGridDay: {\n          buttonText: 'day'\n        }\n      },\n      initialView: 'dayGridMonth',\n      initialDate: TODAY,\n      editable: true,\n      dayMaxEvents: true,\n      // allow \"more\" link when too many events\n      navLinks: true,\n      events: [{\n        title: 'All Day Event',\n        start: YM + '-01',\n        description: 'Toto lorem ipsum dolor sit incid idunt ut',\n        className: \"fc-event-danger fc-event-solid-warning\"\n      }, {\n        title: 'Reporting',\n        start: YM + '-14T13:30:00',\n        description: 'Lorem ipsum dolor incid idunt ut labore',\n        end: YM + '-14',\n        className: \"fc-event-success\"\n      }, {\n        title: 'Company Trip',\n        start: YM + '-02',\n        description: 'Lorem ipsum dolor sit tempor incid',\n        end: YM + '-03',\n        className: \"fc-event-primary\"\n      }, {\n        title: 'ICT Expo 2017 - Product Release',\n        start: YM + '-03',\n        description: 'Lorem ipsum dolor sit tempor inci',\n        end: YM + '-05',\n        className: \"fc-event-light fc-event-solid-primary\"\n      }, {\n        title: 'Dinner',\n        start: YM + '-12',\n        description: 'Lorem ipsum dolor sit amet, conse ctetur',\n        end: YM + '-10'\n      }, {\n        id: 999,\n        title: 'Repeating Event',\n        start: YM + '-09T16:00:00',\n        description: 'Lorem ipsum dolor sit ncididunt ut labore',\n        className: \"fc-event-danger\"\n      }, {\n        id: 1000,\n        title: 'Repeating Event',\n        description: 'Lorem ipsum dolor sit amet, labore',\n        start: YM + '-16T16:00:00'\n      }, {\n        title: 'Conference',\n        start: YESTERDAY,\n        end: TOMORROW,\n        description: 'Lorem ipsum dolor eius mod tempor labore',\n        className: \"fc-event-primary\"\n      }, {\n        title: 'Meeting',\n        start: TODAY + 'T10:30:00',\n        end: TODAY + 'T12:30:00',\n        description: 'Lorem ipsum dolor eiu idunt ut labore'\n      }, {\n        title: 'Lunch',\n        start: TODAY + 'T12:00:00',\n        className: \"fc-event-info\",\n        description: 'Lorem ipsum dolor sit amet, ut labore'\n      }, {\n        title: 'Meeting',\n        start: TODAY + 'T14:30:00',\n        className: \"fc-event-warning\",\n        description: 'Lorem ipsum conse ctetur adipi scing'\n      }, {\n        title: 'Happy Hour',\n        start: TODAY + 'T17:30:00',\n        className: \"fc-event-info\",\n        description: 'Lorem ipsum dolor sit amet, conse ctetur'\n      }, {\n        title: 'Dinner',\n        start: TOMORROW + 'T05:00:00',\n        className: \"fc-event-solid-danger fc-event-light\",\n        description: 'Lorem ipsum dolor sit ctetur adipi scing'\n      }, {\n        title: 'Birthday Party',\n        start: TOMORROW + 'T07:00:00',\n        className: \"fc-event-primary\",\n        description: 'Lorem ipsum dolor sit amet, scing'\n      }, {\n        title: 'Click for Google',\n        url: 'http://google.com/',\n        start: YM + '-28',\n        className: \"fc-event-solid-info fc-event-light\",\n        description: 'Lorem ipsum dolor sit amet, labore'\n      }]\n    });\n    calendar.render();\n  }; // Public methods\n\n\n  return {\n    init: function init() {\n      // Dark Mode\n      initDarkModeToggle(); // Calendar\n\n      initCalendarWidget1(); // Lists Widgets\n\n      initListsWidget3(); // Mixed Widgets\n\n      initMixedWidget1();\n      initMixedWidget2(); // Lists Widgets\n\n      initStatisticsWidget1(); // Chart Widgets           \n\n      initChartWidget2('#kt_charts_widget_2_tab_1', '#kt_charts_widget_2_chart_1', [30, 40, 30, 25, 40, 45, 30, 20, 40, 25, 20, 30], true);\n      initChartWidget2('#kt_charts_widget_2_tab_2', '#kt_charts_widget_2_chart_2', [25, 30, 25, 45, 30, 40, 30, 25, 40, 20, 25, 30], false);\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTWidgets.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/theme/js/custom/widgets.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/theme/js/custom/widgets.js"]();
/******/ 	
/******/ })()
;