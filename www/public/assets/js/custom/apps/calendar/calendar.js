/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/theme/js/custom/apps/calendar/calendar.js":
/*!*************************************************************!*\
  !*** ./resources/theme/js/custom/apps/calendar/calendar.js ***!
  \*************************************************************/
/***/ (() => {

eval(" // Class definition\n\nvar KTAppCalendar = function () {\n  // Shared variables\n  // Calendar variables\n  var calendar;\n  var data = {\n    id: '',\n    eventName: '',\n    eventDescription: '',\n    eventLocation: '',\n    startDate: '',\n    endDate: '',\n    allDay: false\n  };\n  var popover;\n  var popoverState = false; // Add event variables\n\n  var eventName;\n  var eventDescription;\n  var eventLocation;\n  var startDatepicker;\n  var startFlatpickr;\n  var endDatepicker;\n  var endFlatpickr;\n  var startTimepicker;\n  var startTimeFlatpickr;\n  var endTimepicker;\n  var endTimeFlatpickr;\n  var modal;\n  var modalTitle;\n  var form;\n  var validator;\n  var addButton;\n  var submitButton;\n  var cancelButton;\n  var closeButton; // View event variables\n\n  var viewEventName;\n  var viewAllDay;\n  var viewEventDescription;\n  var viewEventLocation;\n  var viewStartDate;\n  var viewEndDate;\n  var viewModal;\n  var viewEditButton;\n  var viewDeleteButton; // Private functions\n\n  var initCalendarApp = function initCalendarApp() {\n    // Define variables\n    var calendarEl = document.getElementById('kt_calendar_app');\n    var todayDate = moment().startOf('day');\n    var YM = todayDate.format('YYYY-MM');\n    var YESTERDAY = todayDate.clone().subtract(1, 'day').format('YYYY-MM-DD');\n    var TODAY = todayDate.format('YYYY-MM-DD');\n    var TOMORROW = todayDate.clone().add(1, 'day').format('YYYY-MM-DD'); // Init calendar --- more info: https://fullcalendar.io/docs/initialize-globals\n\n    calendar = new FullCalendar.Calendar(calendarEl, {\n      headerToolbar: {\n        left: 'prev,next today',\n        center: 'title',\n        right: 'dayGridMonth,timeGridWeek,timeGridDay'\n      },\n      initialDate: TODAY,\n      navLinks: true,\n      // can click day/week names to navigate views\n      selectable: true,\n      selectMirror: true,\n      // Select dates action --- more info: https://fullcalendar.io/docs/select-callback\n      select: function select(arg) {\n        hidePopovers();\n        formatArgs(arg);\n        handleNewEvent();\n      },\n      // Click event --- more info: https://fullcalendar.io/docs/eventClick\n      eventClick: function eventClick(arg) {\n        hidePopovers();\n        formatArgs({\n          id: arg.event.id,\n          title: arg.event.title,\n          description: arg.event.extendedProps.description,\n          location: arg.event.extendedProps.location,\n          startStr: arg.event.startStr,\n          endStr: arg.event.endStr,\n          allDay: arg.event.allDay\n        });\n        handleViewEvent();\n      },\n      // MouseEnter event --- more info: https://fullcalendar.io/docs/eventMouseEnter\n      eventMouseEnter: function eventMouseEnter(arg) {\n        formatArgs({\n          id: arg.event.id,\n          title: arg.event.title,\n          description: arg.event.extendedProps.description,\n          location: arg.event.extendedProps.location,\n          startStr: arg.event.startStr,\n          endStr: arg.event.endStr,\n          allDay: arg.event.allDay\n        }); // Show popover preview\n\n        initPopovers(arg.el);\n      },\n      editable: true,\n      dayMaxEvents: true,\n      // allow \"more\" link when too many events\n      events: [{\n        id: uid(),\n        title: 'All Day Event',\n        start: YM + '-01',\n        end: YM + '-02',\n        description: 'Toto lorem ipsum dolor sit incid idunt ut',\n        className: \"fc-event-danger fc-event-solid-warning\",\n        location: 'Federation Square'\n      }, {\n        id: uid(),\n        title: 'Reporting',\n        start: YM + '-14T13:30:00',\n        description: 'Lorem ipsum dolor incid idunt ut labore',\n        end: YM + '-14T14:30:00',\n        className: \"fc-event-success\",\n        location: 'Meeting Room 7.03'\n      }, {\n        id: uid(),\n        title: 'Company Trip',\n        start: YM + '-02',\n        description: 'Lorem ipsum dolor sit tempor incid',\n        end: YM + '-03',\n        className: \"fc-event-primary\",\n        location: 'Seoul, Korea'\n      }, {\n        id: uid(),\n        title: 'ICT Expo 2021 - Product Release',\n        start: YM + '-03',\n        description: 'Lorem ipsum dolor sit tempor inci',\n        end: YM + '-05',\n        className: \"fc-event-light fc-event-solid-primary\",\n        location: 'Melbourne Exhibition Hall'\n      }, {\n        id: uid(),\n        title: 'Dinner',\n        start: YM + '-12',\n        description: 'Lorem ipsum dolor sit amet, conse ctetur',\n        end: YM + '-13',\n        location: 'Squire\\'s Loft'\n      }, {\n        id: uid(),\n        title: 'Repeating Event',\n        start: YM + '-09T16:00:00',\n        end: YM + '-09T17:00:00',\n        description: 'Lorem ipsum dolor sit ncididunt ut labore',\n        className: \"fc-event-danger\",\n        location: 'General Area'\n      }, {\n        id: uid(),\n        title: 'Repeating Event',\n        description: 'Lorem ipsum dolor sit amet, labore',\n        start: YM + '-16T16:00:00',\n        end: YM + '-16T17:00:00',\n        location: 'General Area'\n      }, {\n        id: uid(),\n        title: 'Conference',\n        start: YESTERDAY,\n        end: TOMORROW,\n        description: 'Lorem ipsum dolor eius mod tempor labore',\n        className: \"fc-event-primary\",\n        location: 'Conference Hall A'\n      }, {\n        id: uid(),\n        title: 'Meeting',\n        start: TODAY + 'T10:30:00',\n        end: TODAY + 'T12:30:00',\n        description: 'Lorem ipsum dolor eiu idunt ut labore',\n        location: 'Meeting Room 11.06'\n      }, {\n        id: uid(),\n        title: 'Lunch',\n        start: TODAY + 'T12:00:00',\n        end: TODAY + 'T14:00:00',\n        className: \"fc-event-info\",\n        description: 'Lorem ipsum dolor sit amet, ut labore',\n        location: 'Cafeteria'\n      }, {\n        id: uid(),\n        title: 'Meeting',\n        start: TODAY + 'T14:30:00',\n        end: TODAY + 'T15:30:00',\n        className: \"fc-event-warning\",\n        description: 'Lorem ipsum conse ctetur adipi scing',\n        location: 'Meeting Room 11.10'\n      }, {\n        id: uid(),\n        title: 'Happy Hour',\n        start: TODAY + 'T17:30:00',\n        end: TODAY + 'T21:30:00',\n        className: \"fc-event-info\",\n        description: 'Lorem ipsum dolor sit amet, conse ctetur',\n        location: 'The English Pub'\n      }, {\n        id: uid(),\n        title: 'Dinner',\n        start: TOMORROW + 'T18:00:00',\n        end: TOMORROW + 'T21:00:00',\n        className: \"fc-event-solid-danger fc-event-light\",\n        description: 'Lorem ipsum dolor sit ctetur adipi scing',\n        location: 'New York Steakhouse'\n      }, {\n        id: uid(),\n        title: 'Birthday Party',\n        start: TOMORROW + 'T12:00:00',\n        end: TOMORROW + 'T14:00:00',\n        className: \"fc-event-primary\",\n        description: 'Lorem ipsum dolor sit amet, scing',\n        location: 'The English Pub'\n      }, {\n        id: uid(),\n        title: 'Site visit',\n        start: YM + '-28',\n        end: YM + '-29',\n        className: \"fc-event-solid-info fc-event-light\",\n        description: 'Lorem ipsum dolor sit amet, labore',\n        location: '271, Spring Street'\n      }],\n      // Reset popovers when changing calendar views --- more info: https://fullcalendar.io/docs/datesSet\n      datesSet: function datesSet() {\n        hidePopovers();\n      }\n    });\n    calendar.render();\n  }; // Initialize popovers --- more info: https://getbootstrap.com/docs/4.0/components/popovers/\n\n\n  var initPopovers = function initPopovers(element) {\n    hidePopovers(); // Generate popover content\n\n    var startDate = data.allDay ? moment(data.startDate).format('Do MMM, YYYY') : moment(data.startDate).format('Do MMM, YYYY - h:mm a');\n    var endDate = data.allDay ? moment(data.endDate).format('Do MMM, YYYY') : moment(data.endDate).format('Do MMM, YYYY - h:mm a');\n    var popoverHtml = '<div class=\"fw-bolder mb-2\">' + data.eventName + '</div><div class=\"fs-7\"><span class=\"fw-bold\">Start:</span> ' + startDate + '</div><div class=\"fs-7 mb-4\"><span class=\"fw-bold\">End:</span> ' + endDate + '</div><div id=\"kt_calendar_event_view_button\" type=\"button\" class=\"btn btn-sm btn-light-primary\">View More</div>'; // Popover options\n\n    var options = {\n      container: 'body',\n      trigger: 'manual',\n      boundary: 'window',\n      placement: 'auto',\n      dismiss: true,\n      html: true,\n      title: 'Event Summary',\n      content: popoverHtml\n    }; // Initialize popover\n\n    popover = KTApp.initBootstrapPopover(element, options); // Show popover\n\n    popover.show(); // Update popover state\n\n    popoverState = true; // Open view event modal\n\n    handleViewButton();\n  }; // Hide active popovers\n\n\n  var hidePopovers = function hidePopovers() {\n    if (popoverState) {\n      popover.dispose();\n      popoverState = false;\n    }\n  }; // Init validator\n\n\n  var initValidator = function initValidator() {\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n    validator = FormValidation.formValidation(form, {\n      fields: {\n        'calendar_event_name': {\n          validators: {\n            notEmpty: {\n              message: 'Event name is required'\n            }\n          }\n        },\n        'calendar_event_start_date': {\n          validators: {\n            notEmpty: {\n              message: 'Start date is required'\n            }\n          }\n        },\n        'calendar_event_end_date': {\n          validators: {\n            notEmpty: {\n              message: 'End date is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    });\n  }; // Initialize datepickers --- more info: https://flatpickr.js.org/\n\n\n  var initDatepickers = function initDatepickers() {\n    startFlatpickr = flatpickr(startDatepicker, {\n      enableTime: false,\n      dateFormat: \"Y-m-d\"\n    });\n    endFlatpickr = flatpickr(endDatepicker, {\n      enableTime: false,\n      dateFormat: \"Y-m-d\"\n    });\n    startTimeFlatpickr = flatpickr(startTimepicker, {\n      enableTime: true,\n      noCalendar: true,\n      dateFormat: \"H:i\"\n    });\n    endTimeFlatpickr = flatpickr(endTimepicker, {\n      enableTime: true,\n      noCalendar: true,\n      dateFormat: \"H:i\"\n    });\n  }; // Handle add button\n\n\n  var handleAddButton = function handleAddButton() {\n    addButton.addEventListener('click', function (e) {\n      hidePopovers(); // Reset form data\n\n      data = {\n        id: '',\n        eventName: '',\n        eventDescription: '',\n        startDate: new Date(),\n        endDate: new Date(),\n        allDay: false\n      };\n      handleNewEvent();\n    });\n  }; // Handle add new event\n\n\n  var handleNewEvent = function handleNewEvent() {\n    // Update modal title\n    modalTitle.innerText = \"Add a New Event\";\n    modal.show(); // Select datepicker wrapper elements\n\n    var datepickerWrappers = form.querySelectorAll('[data-kt-calendar=\"datepicker\"]'); // Handle all day toggle\n\n    var allDayToggle = form.querySelector('#kt_calendar_datepicker_allday');\n    allDayToggle.addEventListener('click', function (e) {\n      if (e.target.checked) {\n        datepickerWrappers.forEach(function (dw) {\n          dw.classList.add('d-none');\n        });\n      } else {\n        endFlatpickr.setDate(data.startDate, true, 'Y-m-d');\n        datepickerWrappers.forEach(function (dw) {\n          dw.classList.remove('d-none');\n        });\n      }\n    });\n    populateForm(data); // Handle submit form\n\n    submitButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault(); // Validate form before submit\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            // Show loading indication\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable submit button whilst loading\n\n            submitButton.disabled = true; // Simulate form submission\n\n            setTimeout(function () {\n              // Simulate form submission\n              submitButton.removeAttribute('data-kt-indicator'); // Show popup confirmation \n\n              Swal.fire({\n                text: \"New event added to calendar!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  modal.hide(); // Enable submit button after loading\n\n                  submitButton.disabled = false; // Detect if is all day event\n\n                  var allDayEvent = false;\n\n                  if (allDayToggle.checked) {\n                    allDayEvent = true;\n                  }\n\n                  if (startTimeFlatpickr.selectedDates.length === 0) {\n                    allDayEvent = true;\n                  } // Merge date & time\n\n\n                  var startDateTime = moment(startFlatpickr.selectedDates[0]).format();\n                  var endDateTime = moment(endFlatpickr.selectedDates[endFlatpickr.selectedDates.length - 1]).format();\n\n                  if (!allDayEvent) {\n                    var startDate = moment(startFlatpickr.selectedDates[0]).format('YYYY-MM-DD');\n                    var endDate = startDate;\n                    var startTime = moment(startTimeFlatpickr.selectedDates[0]).format('HH:mm:ss');\n                    var endTime = moment(endTimeFlatpickr.selectedDates[0]).format('HH:mm:ss');\n                    startDateTime = startDate + 'T' + startTime;\n                    endDateTime = endDate + 'T' + endTime;\n                  } // Add new event to calendar\n\n\n                  calendar.addEvent({\n                    id: uid(),\n                    title: eventName.value,\n                    description: eventDescription.value,\n                    location: eventLocation.value,\n                    start: startDateTime,\n                    end: endDateTime,\n                    allDay: allDayEvent\n                  });\n                  calendar.render(); // Reset form for demo purposes only\n\n                  form.reset();\n                }\n              }); //form.submit(); // Submit form\n            }, 2000);\n          } else {\n            // Show popup warning \n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            });\n          }\n        });\n      }\n    });\n  }; // Handle edit event\n\n\n  var handleEditEvent = function handleEditEvent() {\n    // Update modal title\n    modalTitle.innerText = \"Edit an Event\";\n    modal.show(); // Select datepicker wrapper elements\n\n    var datepickerWrappers = form.querySelectorAll('[data-kt-calendar=\"datepicker\"]'); // Handle all day toggle\n\n    var allDayToggle = form.querySelector('#kt_calendar_datepicker_allday');\n    allDayToggle.addEventListener('click', function (e) {\n      if (e.target.checked) {\n        datepickerWrappers.forEach(function (dw) {\n          dw.classList.add('d-none');\n        });\n      } else {\n        endFlatpickr.setDate(data.startDate, true, 'Y-m-d');\n        datepickerWrappers.forEach(function (dw) {\n          dw.classList.remove('d-none');\n        });\n      }\n    });\n    populateForm(data); // Handle submit form\n\n    submitButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault(); // Validate form before submit\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            // Show loading indication\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable submit button whilst loading\n\n            submitButton.disabled = true; // Simulate form submission\n\n            setTimeout(function () {\n              // Simulate form submission\n              submitButton.removeAttribute('data-kt-indicator'); // Show popup confirmation \n\n              Swal.fire({\n                text: \"New event added to calendar!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  modal.hide(); // Enable submit button after loading\n\n                  submitButton.disabled = false; // Remove old event\n\n                  calendar.getEventById(data.id).remove(); // Detect if is all day event\n\n                  var allDayEvent = false;\n\n                  if (allDayToggle.checked) {\n                    allDayEvent = true;\n                  }\n\n                  if (startTimeFlatpickr.selectedDates.length === 0) {\n                    allDayEvent = true;\n                  } // Merge date & time\n\n\n                  var startDateTime = moment(startFlatpickr.selectedDates[0]).format();\n                  var endDateTime = moment(endFlatpickr.selectedDates[endFlatpickr.selectedDates.length - 1]).format();\n\n                  if (!allDayEvent) {\n                    var startDate = moment(startFlatpickr.selectedDates[0]).format('YYYY-MM-DD');\n                    var endDate = startDate;\n                    var startTime = moment(startTimeFlatpickr.selectedDates[0]).format('HH:mm:ss');\n                    var endTime = moment(endTimeFlatpickr.selectedDates[0]).format('HH:mm:ss');\n                    startDateTime = startDate + 'T' + startTime;\n                    endDateTime = endDate + 'T' + endTime;\n                  } // Add new event to calendar\n\n\n                  calendar.addEvent({\n                    id: uid(),\n                    title: eventName.value,\n                    description: eventDescription.value,\n                    location: eventLocation.value,\n                    start: startDateTime,\n                    end: endDateTime,\n                    allDay: allDayEvent\n                  });\n                  calendar.render(); // Reset form for demo purposes only\n\n                  form.reset();\n                }\n              }); //form.submit(); // Submit form\n            }, 2000);\n          } else {\n            // Show popup warning \n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            });\n          }\n        });\n      }\n    });\n  }; // Handle view event\n\n\n  var handleViewEvent = function handleViewEvent() {\n    viewModal.show(); // Detect all day event\n\n    var eventNameMod;\n    var startDateMod;\n    var endDateMod; // Generate labels\n\n    if (data.allDay) {\n      eventNameMod = 'All Day';\n      startDateMod = moment(data.startDate).format('Do MMM, YYYY');\n      endDateMod = moment(data.endDate).format('Do MMM, YYYY');\n    } else {\n      eventNameMod = '';\n      startDateMod = moment(data.startDate).format('Do MMM, YYYY - h:mm a');\n      endDateMod = moment(data.endDate).format('Do MMM, YYYY - h:mm a');\n    } // Populate view data\n\n\n    viewEventName.innerText = data.eventName;\n    viewAllDay.innerText = eventNameMod;\n    viewEventDescription.innerText = data.eventDescription ? data.eventDescription : '--';\n    viewEventLocation.innerText = data.eventLocation ? data.eventLocation : '--';\n    viewStartDate.innerText = startDateMod;\n    viewEndDate.innerText = endDateMod;\n  }; // Handle delete event\n\n\n  var handleDeleteEvent = function handleDeleteEvent() {\n    viewDeleteButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to delete this event?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, delete it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          calendar.getEventById(data.id).remove();\n          viewModal.hide(); // Hide modal\t\t\t\t\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your event was not deleted!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  }; // Handle edit button\n\n\n  var handleEditButton = function handleEditButton() {\n    viewEditButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      viewModal.hide();\n      handleEditEvent();\n    });\n  }; // Handle cancel button\n\n\n  var handleCancelButton = function handleCancelButton() {\n    // Edit event modal cancel button\n    cancelButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to cancel?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, cancel it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          form.reset(); // Reset form\t\n\n          modal.hide(); // Hide modal\t\t\t\t\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been cancelled!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  }; // Handle close button\n\n\n  var handleCloseButton = function handleCloseButton() {\n    // Edit event modal close button\n    closeButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to cancel?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, cancel it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          form.reset(); // Reset form\t\n\n          modal.hide(); // Hide modal\t\t\t\t\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been cancelled!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  }; // Handle view button\n\n\n  var handleViewButton = function handleViewButton() {\n    var viewButton = document.querySelector('#kt_calendar_event_view_button');\n    viewButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      hidePopovers();\n      handleViewEvent();\n    });\n  }; // Helper functions\n  // Reset form validator on modal close\n\n\n  var resetFormValidator = function resetFormValidator(element) {\n    // Target modal hidden event --- For more info: https://getbootstrap.com/docs/5.0/components/modal/#events\n    element.addEventListener('hidden.bs.modal', function (e) {\n      if (validator) {\n        // Reset form validator. For more info: https://formvalidation.io/guide/api/reset-form\n        validator.resetForm(true);\n      }\n    });\n  }; // Populate form \n\n\n  var populateForm = function populateForm() {\n    eventName.value = data.eventName ? data.eventName : '';\n    eventDescription.value = data.eventDescription ? data.eventDescription : '';\n    eventLocation.value = data.eventLocation ? data.eventLocation : '';\n    startFlatpickr.setDate(data.startDate, true, 'Y-m-d'); // Handle null end dates\n\n    var endDate = data.endDate ? data.endDate : moment(data.startDate).format();\n    endFlatpickr.setDate(endDate, true, 'Y-m-d');\n    var allDayToggle = form.querySelector('#kt_calendar_datepicker_allday');\n    var datepickerWrappers = form.querySelectorAll('[data-kt-calendar=\"datepicker\"]');\n\n    if (data.allDay) {\n      allDayToggle.checked = true;\n      datepickerWrappers.forEach(function (dw) {\n        dw.classList.add('d-none');\n      });\n    } else {\n      startTimeFlatpickr.setDate(data.startDate, true, 'Y-m-d H:i');\n      endTimeFlatpickr.setDate(data.endDate, true, 'Y-m-d H:i');\n      endFlatpickr.setDate(data.startDate, true, 'Y-m-d');\n      allDayToggle.checked = false;\n      datepickerWrappers.forEach(function (dw) {\n        dw.classList.remove('d-none');\n      });\n    }\n  }; // Format FullCalendar reponses\n\n\n  var formatArgs = function formatArgs(res) {\n    data.id = res.id;\n    data.eventName = res.title;\n    data.eventDescription = res.description;\n    data.eventLocation = res.location;\n    data.startDate = res.startStr;\n    data.endDate = res.endStr;\n    data.allDay = res.allDay;\n  }; // Generate unique IDs for events\n\n\n  var uid = function uid() {\n    return Date.now().toString() + Math.floor(Math.random() * 1000).toString();\n  };\n\n  return {\n    // Public Functions\n    init: function init() {\n      // Define variables\n      // Add event modal\n      var element = document.getElementById('kt_modal_add_event');\n      form = element.querySelector('#kt_modal_add_event_form');\n      eventName = form.querySelector('[name=\"calendar_event_name\"]');\n      eventDescription = form.querySelector('[name=\"calendar_event_description\"]');\n      eventLocation = form.querySelector('[name=\"calendar_event_location\"]');\n      startDatepicker = form.querySelector('#kt_calendar_datepicker_start_date');\n      endDatepicker = form.querySelector('#kt_calendar_datepicker_end_date');\n      startTimepicker = form.querySelector('#kt_calendar_datepicker_start_time');\n      endTimepicker = form.querySelector('#kt_calendar_datepicker_end_time');\n      addButton = document.querySelector('[data-kt-calendar=\"add\"]');\n      submitButton = form.querySelector('#kt_modal_add_event_submit');\n      cancelButton = form.querySelector('#kt_modal_add_event_cancel');\n      closeButton = element.querySelector('#kt_modal_add_event_close');\n      modalTitle = form.querySelector('[data-kt-calendar=\"title\"]');\n      modal = new bootstrap.Modal(element); // View event modal\n\n      var viewElement = document.getElementById('kt_modal_view_event');\n      viewModal = new bootstrap.Modal(viewElement);\n      viewEventName = viewElement.querySelector('[data-kt-calendar=\"event_name\"]');\n      viewAllDay = viewElement.querySelector('[data-kt-calendar=\"all_day\"]');\n      viewEventDescription = viewElement.querySelector('[data-kt-calendar=\"event_description\"]');\n      viewEventLocation = viewElement.querySelector('[data-kt-calendar=\"event_location\"]');\n      viewStartDate = viewElement.querySelector('[data-kt-calendar=\"event_start_date\"]');\n      viewEndDate = viewElement.querySelector('[data-kt-calendar=\"event_end_date\"]');\n      viewEditButton = viewElement.querySelector('#kt_modal_view_event_edit');\n      viewDeleteButton = viewElement.querySelector('#kt_modal_view_event_delete');\n      initCalendarApp();\n      initValidator();\n      initDatepickers();\n      handleEditButton();\n      handleAddButton();\n      handleDeleteEvent();\n      handleCancelButton();\n      handleCloseButton();\n      resetFormValidator(element);\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTAppCalendar.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvdGhlbWUvanMvY3VzdG9tL2FwcHMvY2FsZW5kYXIvY2FsZW5kYXIuanMuanMiLCJtYXBwaW5ncyI6IkNBRUE7O0FBQ0EsSUFBSUEsYUFBYSxHQUFHLFlBQVk7QUFDNUI7QUFDQTtBQUNBLE1BQUlDLFFBQUo7QUFDQSxNQUFJQyxJQUFJLEdBQUc7QUFDUEMsSUFBQUEsRUFBRSxFQUFFLEVBREc7QUFFUEMsSUFBQUEsU0FBUyxFQUFFLEVBRko7QUFHUEMsSUFBQUEsZ0JBQWdCLEVBQUUsRUFIWDtBQUlQQyxJQUFBQSxhQUFhLEVBQUUsRUFKUjtBQUtQQyxJQUFBQSxTQUFTLEVBQUUsRUFMSjtBQU1QQyxJQUFBQSxPQUFPLEVBQUUsRUFORjtBQU9QQyxJQUFBQSxNQUFNLEVBQUU7QUFQRCxHQUFYO0FBU0EsTUFBSUMsT0FBSjtBQUNBLE1BQUlDLFlBQVksR0FBRyxLQUFuQixDQWQ0QixDQWdCNUI7O0FBQ0EsTUFBSVAsU0FBSjtBQUNBLE1BQUlDLGdCQUFKO0FBQ0EsTUFBSUMsYUFBSjtBQUNBLE1BQUlNLGVBQUo7QUFDQSxNQUFJQyxjQUFKO0FBQ0EsTUFBSUMsYUFBSjtBQUNBLE1BQUlDLFlBQUo7QUFDQSxNQUFJQyxlQUFKO0FBQ0EsTUFBSUMsa0JBQUo7QUFDQSxNQUFJQyxhQUFKO0FBQ0EsTUFBSUMsZ0JBQUo7QUFDQSxNQUFJQyxLQUFKO0FBQ0EsTUFBSUMsVUFBSjtBQUNBLE1BQUlDLElBQUo7QUFDQSxNQUFJQyxTQUFKO0FBQ0EsTUFBSUMsU0FBSjtBQUNBLE1BQUlDLFlBQUo7QUFDQSxNQUFJQyxZQUFKO0FBQ0EsTUFBSUMsV0FBSixDQW5DNEIsQ0FxQzVCOztBQUNBLE1BQUlDLGFBQUo7QUFDQSxNQUFJQyxVQUFKO0FBQ0EsTUFBSUMsb0JBQUo7QUFDQSxNQUFJQyxpQkFBSjtBQUNBLE1BQUlDLGFBQUo7QUFDQSxNQUFJQyxXQUFKO0FBQ0EsTUFBSUMsU0FBSjtBQUNBLE1BQUlDLGNBQUo7QUFDQSxNQUFJQyxnQkFBSixDQTlDNEIs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QUFnQixHQUFHNEosV0FBVyxDQUFDOUQsYUFBWixDQUEwQiw2QkFBMUIsQ0FBbkI7QUFFQTdGLE1BQUFBLGVBQWU7QUFDZmtFLE1BQUFBLGFBQWE7QUFDYmMsTUFBQUEsZUFBZTtBQUNmNkQsTUFBQUEsZ0JBQWdCO0FBQ2hCeEQsTUFBQUEsZUFBZTtBQUNmcUQsTUFBQUEsaUJBQWlCO0FBQ2pCSSxNQUFBQSxrQkFBa0I7QUFDbEJDLE1BQUFBLGlCQUFpQjtBQUNqQkUsTUFBQUEsa0JBQWtCLENBQUM5RixPQUFELENBQWxCO0FBQ0g7QUExQ0UsR0FBUDtBQTRDSCxDQXIzQm1CLEVBQXBCLEMsQ0F1M0JBOzs7QUFDQXlHLE1BQU0sQ0FBQ0Msa0JBQVAsQ0FBMEIsWUFBWTtBQUNsQ2xNLEVBQUFBLGFBQWEsQ0FBQzhMLElBQWQ7QUFDSCxDQUZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3RoZW1lL2pzL2N1c3RvbS9hcHBzL2NhbGVuZGFyL2NhbGVuZGFyLmpzPzEzZWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIENsYXNzIGRlZmluaXRpb25cbnZhciBLVEFwcENhbGVuZGFyID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIFNoYXJlZCB2YXJpYWJsZXNcbiAgICAvLyBDYWxlbmRhciB2YXJpYWJsZXNcbiAgICB2YXIgY2FsZW5kYXI7XG4gICAgdmFyIGRhdGEgPSB7XG4gICAgICAgIGlkOiAnJyxcbiAgICAgICAgZXZlbnROYW1lOiAnJyxcbiAgICAgICAgZXZlbnREZXNjcmlwdGlvbjogJycsXG4gICAgICAgIGV2ZW50TG9jYXRpb246ICcnLFxuICAgICAgICBzdGFydERhdGU6ICcnLFxuICAgICAgICBlbmREYXRlOiAnJyxcbiAgICAgICAgYWxsRGF5OiBmYWxzZVxuICAgIH07XG4gICAgdmFyIHBvcG92ZXI7XG4gICAgdmFyIHBvcG92ZXJTdGF0ZSA9IGZhbHNlO1xuXG4gICAgLy8gQWRkIGV2ZW50IHZhcmlhYmxlc1xuICAgIHZhciBldmVudE5hbWU7XG4gICAgdmFyIGV2ZW50RGVzY3JpcHRpb247XG4gICAgdmFyIGV2ZW50TG9jYXRpb247XG4gICAgdmFyIHN0YXJ0RGF0ZXBpY2tlcjtcbiAgICB2YXIgc3RhcnRGbGF0cGlja3I7XG4gICAgdmFyIGVuZERhdGVwaWNrZXI7XG4gICAgdmFyIGVuZEZsYXRwaWNrcjtcbiAgICB2YXIgc3RhcnRUaW1lcGlja2VyO1xuICAgIHZhciBzdGFydFRpbWVGbGF0cGlja3I7XG4gICAgdmFyIGVuZFRpbWVwaWNrZXJcbiAgICB2YXIgZW5kVGltZUZsYXRwaWNrcjtcbiAgICB2YXIgbW9kYWw7XG4gICAgdmFyIG1vZGFsVGl0bGU7XG4gICAgdmFyIGZvcm07XG4gICAgdmFyIHZhbGlkYXRvcjtcbiAgICB2YXIgYWRkQnV0dG9uO1xuICAgIHZhciBzdWJtaXRCdXR0b247XG4gICAgdmFyIGNhbmNlbEJ1dHRvbjtcbiAgICB2YXIgY2xvc2VCdXR0b247XG5cbiAgICAvLyBWaWV3IGV2ZW50IHZhcmlhYmxlc1xuICAgIHZhciB2aWV3RXZlbnROYW1lO1xuICAgIHZhciB2aWV3QWxsRGF5O1xuICAgIHZhciB2aWV3RXZlbnREZXNjcmlwdGlvbjtcbiAgICB2YXIgdmlld0V2ZW50TG9jYXRpb247XG4gICAgdmFyIHZpZXdTdGFydERhdGU7XG4gICAgdmFyIHZpZXdFbmREYXRlO1xuICAgIHZhciB2aWV3TW9kYWw7XG4gICAgdmFyIHZpZXdFZGl0QnV0dG9uO1xuICAgIHZhciB2aWV3RGVsZXRlQnV0dG9uO1xuXG5cbiAgICAvLyBQcml2YXRlIGZ1bmN0aW9uc1xuICAgIHZhciBpbml0Q2FsZW5kYXJBcHAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIERlZmluZSB2YXJpYWJsZXNcbiAgICAgICAgdmFyIGNhbGVuZGFyRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgna3RfY2FsZW5kYXJfYXBwJyk7XG4gICAgICAgIHZhciB0b2RheURhdGUgPSBtb21lbnQoKS5zdGFydE9mKCdkYXknKTtcbiAgICAgICAgdmFyIFlNID0gdG9kYXlEYXRlLmZvcm1hdCgnWVlZWS1NTScpO1xuICAgICAgICB2YXIgWUVTVEVSREFZID0gdG9kYXlEYXRlLmNsb25lKCkuc3VidHJhY3QoMSwgJ2RheScpLmZvcm1hdCgnWVlZWS1NTS1ERCcpO1xuICAgICAgICB2YXIgVE9EQVkgPSB0b2RheURhdGUuZm9ybWF0KCdZWVlZLU1NLUREJyk7XG4gICAgICAgIHZhciBUT01PUlJPVyA9IHRvZGF5RGF0ZS5jbG9uZSgpLmFkZCgxLCAnZGF5JykuZm9ybWF0KCdZWVlZLU1NLUREJyk7XG5cbiAgICAgICAgLy8gSW5pdCBjYWxlbmRhciAtLS0gbW9yZSBpbmZvOiBodHRwczovL2Z1bGxjYWxlbmRhci5pby9kb2NzL2luaXRpYWxpemUtZ2xvYmFsc1xuICAgICAgICBjYWxlbmRhciA9IG5ldyBGdWxsQ2FsZW5kYXIuQ2FsZW5kYXIoY2FsZW5kYXJFbCwge1xuICAgICAgICAgICAgaGVhZGVyVG9vbGJhcjoge1xuICAgICAgICAgICAgICAgIGxlZnQ6ICdwcmV2LG5leHQgdG9kYXknLFxuICAgICAgICAgICAgICAgIGNlbnRlcjogJ3RpdGxlJyxcbiAgICAgICAgICAgICAgICByaWdodDogJ2RheUdyaWRNb250aCx0aW1lR3JpZFdlZWssdGltZUdyaWREYXknXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5pdGlhbERhdGU6IFRPREFZLFxuICAgICAgICAgICAgbmF2TGlua3M6IHRydWUsIC8vIGNhbiBjbGljayBkYXkvd2VlayBuYW1lcyB0byBuYXZpZ2F0ZSB2aWV3c1xuICAgICAgICAgICAgc2VsZWN0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHNlbGVjdE1pcnJvcjogdHJ1ZSxcblxuICAgICAgICAgICAgLy8gU2VsZWN0IGRhdGVzIGFjdGlvbiAtLS0gbW9yZSBpbmZvOiBodHRwczovL2Z1bGxjYWxlbmRhci5pby9kb2NzL3NlbGVjdC1jYWxsYmFja1xuICAgICAgICAgICAgc2VsZWN0OiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgICAgICAgaGlkZVBvcG92ZXJzKCk7XG4gICAgICAgICAgICAgICAgZm9ybWF0QXJncyhhcmcpO1xuICAgICAgICAgICAgICAgIGhhbmRsZU5ld0V2ZW50KCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvLyBDbGljayBldmVudCAtLS0gbW9yZSBpbmZvOiBodHRwczovL2Z1bGxjYWxlbmRhci5pby9kb2NzL2V2ZW50Q2xpY2tcbiAgICAgICAgICAgIGV2ZW50Q2xpY2s6IGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgICAgICAgICBoaWRlUG9wb3ZlcnMoKTtcblxuICAgICAgICAgICAgICAgIGZvcm1hdEFyZ3Moe1xuICAgICAgICAgICAgICAgICAgICBpZDogYXJnLmV2ZW50LmlkLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogYXJnLmV2ZW50LnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogYXJnLmV2ZW50LmV4dGVuZGVkUHJvcHMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBhcmcuZXZlbnQuZXh0ZW5kZWRQcm9wcy5sb2NhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRTdHI6IGFyZy5ldmVudC5zdGFydFN0cixcbiAgICAgICAgICAgICAgICAgICAgZW5kU3RyOiBhcmcuZXZlbnQuZW5kU3RyLFxuICAgICAgICAgICAgICAgICAgICBhbGxEYXk6IGFyZy5ldmVudC5hbGxEYXlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBoYW5kbGVWaWV3RXZlbnQoKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vIE1vdXNlRW50ZXIgZXZlbnQgLS0tIG1vcmUgaW5mbzogaHR0cHM6Ly9mdWxsY2FsZW5kYXIuaW8vZG9jcy9ldmVudE1vdXNlRW50ZXJcbiAgICAgICAgICAgIGV2ZW50TW91c2VFbnRlcjogZnVuY3Rpb24gKGFyZykge1xuICAgICAgICAgICAgICAgIGZvcm1hdEFyZ3Moe1xuICAgICAgICAgICAgICAgICAgICBpZDogYXJnLmV2ZW50LmlkLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogYXJnLmV2ZW50LnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogYXJnLmV2ZW50LmV4dGVuZGVkUHJvcHMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBhcmcuZXZlbnQuZXh0ZW5kZWRQcm9wcy5sb2NhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRTdHI6IGFyZy5ldmVudC5zdGFydFN0cixcbiAgICAgICAgICAgICAgICAgICAgZW5kU3RyOiBhcmcuZXZlbnQuZW5kU3RyLFxuICAgICAgICAgICAgICAgICAgICBhbGxEYXk6IGFyZy5ldmVudC5hbGxEYXlcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIFNob3cgcG9wb3ZlciBwcmV2aWV3XG4gICAgICAgICAgICAgICAgaW5pdFBvcG92ZXJzKGFyZy5lbCk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBlZGl0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGRheU1heEV2ZW50czogdHJ1ZSwgLy8gYWxsb3cgXCJtb3JlXCIgbGluayB3aGVuIHRvbyBtYW55IGV2ZW50c1xuICAgICAgICAgICAgZXZlbnRzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZDogdWlkKCksXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnQWxsIERheSBFdmVudCcsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBZTSArICctMDEnLFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IFlNICsgJy0wMicsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnVG90byBsb3JlbSBpcHN1bSBkb2xvciBzaXQgaW5jaWQgaWR1bnQgdXQnLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiZmMtZXZlbnQtZGFuZ2VyIGZjLWV2ZW50LXNvbGlkLXdhcm5pbmdcIixcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246ICdGZWRlcmF0aW9uIFNxdWFyZSdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHVpZCgpLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1JlcG9ydGluZycsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBZTSArICctMTRUMTM6MzA6MDAnLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0xvcmVtIGlwc3VtIGRvbG9yIGluY2lkIGlkdW50IHV0IGxhYm9yZScsXG4gICAgICAgICAgICAgICAgICAgIGVuZDogWU0gKyAnLTE0VDE0OjMwOjAwJyxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcImZjLWV2ZW50LXN1Y2Nlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246ICdNZWV0aW5nIFJvb20gNy4wMydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHVpZCgpLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0NvbXBhbnkgVHJpcCcsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBZTSArICctMDInLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCB0ZW1wb3IgaW5jaWQnLFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IFlNICsgJy0wMycsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJmYy1ldmVudC1wcmltYXJ5XCIsXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAnU2VvdWwsIEtvcmVhJ1xuXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiB1aWQoKSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdJQ1QgRXhwbyAyMDIxIC0gUHJvZHVjdCBSZWxlYXNlJyxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFlNICsgJy0wMycsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IHRlbXBvciBpbmNpJyxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBZTSArICctMDUnLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiZmMtZXZlbnQtbGlnaHQgZmMtZXZlbnQtc29saWQtcHJpbWFyeVwiLFxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogJ01lbGJvdXJuZSBFeGhpYml0aW9uIEhhbGwnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiB1aWQoKSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdEaW5uZXInLFxuICAgICAgICAgICAgICAgICAgICBzdGFydDogWU0gKyAnLTEyJyxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2UgY3RldHVyJyxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBZTSArICctMTMnLFxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogJ1NxdWlyZVxcJ3MgTG9mdCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHVpZCgpLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1JlcGVhdGluZyBFdmVudCcsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBZTSArICctMDlUMTY6MDA6MDAnLFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IFlNICsgJy0wOVQxNzowMDowMCcsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IG5jaWRpZHVudCB1dCBsYWJvcmUnLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiZmMtZXZlbnQtZGFuZ2VyXCIsXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAnR2VuZXJhbCBBcmVhJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZDogdWlkKCksXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnUmVwZWF0aW5nIEV2ZW50JyxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgbGFib3JlJyxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFlNICsgJy0xNlQxNjowMDowMCcsXG4gICAgICAgICAgICAgICAgICAgIGVuZDogWU0gKyAnLTE2VDE3OjAwOjAwJyxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246ICdHZW5lcmFsIEFyZWEnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiB1aWQoKSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdDb25mZXJlbmNlJyxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFlFU1RFUkRBWSxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBUT01PUlJPVyxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdMb3JlbSBpcHN1bSBkb2xvciBlaXVzIG1vZCB0ZW1wb3IgbGFib3JlJyxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcImZjLWV2ZW50LXByaW1hcnlcIixcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246ICdDb25mZXJlbmNlIEhhbGwgQSdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHVpZCgpLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ01lZXRpbmcnLFxuICAgICAgICAgICAgICAgICAgICBzdGFydDogVE9EQVkgKyAnVDEwOjMwOjAwJyxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBUT0RBWSArICdUMTI6MzA6MDAnLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0xvcmVtIGlwc3VtIGRvbG9yIGVpdSBpZHVudCB1dCBsYWJvcmUnLFxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogJ01lZXRpbmcgUm9vbSAxMS4wNidcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHVpZCgpLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0x1bmNoJyxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFRPREFZICsgJ1QxMjowMDowMCcsXG4gICAgICAgICAgICAgICAgICAgIGVuZDogVE9EQVkgKyAnVDE0OjAwOjAwJyxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcImZjLWV2ZW50LWluZm9cIixcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgdXQgbGFib3JlJyxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246ICdDYWZldGVyaWEnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiB1aWQoKSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdNZWV0aW5nJyxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFRPREFZICsgJ1QxNDozMDowMCcsXG4gICAgICAgICAgICAgICAgICAgIGVuZDogVE9EQVkgKyAnVDE1OjMwOjAwJyxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcImZjLWV2ZW50LXdhcm5pbmdcIixcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdMb3JlbSBpcHN1bSBjb25zZSBjdGV0dXIgYWRpcGkgc2NpbmcnLFxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogJ01lZXRpbmcgUm9vbSAxMS4xMCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHVpZCgpLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0hhcHB5IEhvdXInLFxuICAgICAgICAgICAgICAgICAgICBzdGFydDogVE9EQVkgKyAnVDE3OjMwOjAwJyxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBUT0RBWSArICdUMjE6MzA6MDAnLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiZmMtZXZlbnQtaW5mb1wiLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZSBjdGV0dXInLFxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogJ1RoZSBFbmdsaXNoIFB1YidcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHVpZCgpLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0Rpbm5lcicsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBUT01PUlJPVyArICdUMTg6MDA6MDAnLFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IFRPTU9SUk9XICsgJ1QyMTowMDowMCcsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJmYy1ldmVudC1zb2xpZC1kYW5nZXIgZmMtZXZlbnQtbGlnaHRcIixcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgY3RldHVyIGFkaXBpIHNjaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246ICdOZXcgWW9yayBTdGVha2hvdXNlJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZDogdWlkKCksXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnQmlydGhkYXkgUGFydHknLFxuICAgICAgICAgICAgICAgICAgICBzdGFydDogVE9NT1JST1cgKyAnVDEyOjAwOjAwJyxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBUT01PUlJPVyArICdUMTQ6MDA6MDAnLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiZmMtZXZlbnQtcHJpbWFyeVwiLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBzY2luZycsXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAnVGhlIEVuZ2xpc2ggUHViJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZDogdWlkKCksXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnU2l0ZSB2aXNpdCcsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBZTSArICctMjgnLFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IFlNICsgJy0yOScsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJmYy1ldmVudC1zb2xpZC1pbmZvIGZjLWV2ZW50LWxpZ2h0XCIsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGxhYm9yZScsXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAnMjcxLCBTcHJpbmcgU3RyZWV0J1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG5cbiAgICAgICAgICAgIC8vIFJlc2V0IHBvcG92ZXJzIHdoZW4gY2hhbmdpbmcgY2FsZW5kYXIgdmlld3MgLS0tIG1vcmUgaW5mbzogaHR0cHM6Ly9mdWxsY2FsZW5kYXIuaW8vZG9jcy9kYXRlc1NldFxuICAgICAgICAgICAgZGF0ZXNTZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgaGlkZVBvcG92ZXJzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNhbGVuZGFyLnJlbmRlcigpO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemUgcG9wb3ZlcnMgLS0tIG1vcmUgaW5mbzogaHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvNC4wL2NvbXBvbmVudHMvcG9wb3ZlcnMvXG4gICAgY29uc3QgaW5pdFBvcG92ZXJzID0gKGVsZW1lbnQpID0+IHtcbiAgICAgICAgaGlkZVBvcG92ZXJzKCk7XG5cbiAgICAgICAgLy8gR2VuZXJhdGUgcG9wb3ZlciBjb250ZW50XG4gICAgICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IGRhdGEuYWxsRGF5ID8gbW9tZW50KGRhdGEuc3RhcnREYXRlKS5mb3JtYXQoJ0RvIE1NTSwgWVlZWScpIDogbW9tZW50KGRhdGEuc3RhcnREYXRlKS5mb3JtYXQoJ0RvIE1NTSwgWVlZWSAtIGg6bW0gYScpO1xuICAgICAgICBjb25zdCBlbmREYXRlID0gZGF0YS5hbGxEYXkgPyBtb21lbnQoZGF0YS5lbmREYXRlKS5mb3JtYXQoJ0RvIE1NTSwgWVlZWScpIDogbW9tZW50KGRhdGEuZW5kRGF0ZSkuZm9ybWF0KCdEbyBNTU0sIFlZWVkgLSBoOm1tIGEnKTtcbiAgICAgICAgY29uc3QgcG9wb3Zlckh0bWwgPSAnPGRpdiBjbGFzcz1cImZ3LWJvbGRlciBtYi0yXCI+JyArIGRhdGEuZXZlbnROYW1lICsgJzwvZGl2PjxkaXYgY2xhc3M9XCJmcy03XCI+PHNwYW4gY2xhc3M9XCJmdy1ib2xkXCI+U3RhcnQ6PC9zcGFuPiAnICsgc3RhcnREYXRlICsgJzwvZGl2PjxkaXYgY2xhc3M9XCJmcy03IG1iLTRcIj48c3BhbiBjbGFzcz1cImZ3LWJvbGRcIj5FbmQ6PC9zcGFuPiAnICsgZW5kRGF0ZSArICc8L2Rpdj48ZGl2IGlkPVwia3RfY2FsZW5kYXJfZXZlbnRfdmlld19idXR0b25cIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1saWdodC1wcmltYXJ5XCI+VmlldyBNb3JlPC9kaXY+JztcblxuICAgICAgICAvLyBQb3BvdmVyIG9wdGlvbnNcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBjb250YWluZXI6ICdib2R5JyxcbiAgICAgICAgICAgIHRyaWdnZXI6ICdtYW51YWwnLFxuICAgICAgICAgICAgYm91bmRhcnk6ICd3aW5kb3cnLFxuICAgICAgICAgICAgcGxhY2VtZW50OiAnYXV0bycsXG4gICAgICAgICAgICBkaXNtaXNzOiB0cnVlLFxuICAgICAgICAgICAgaHRtbDogdHJ1ZSxcbiAgICAgICAgICAgIHRpdGxlOiAnRXZlbnQgU3VtbWFyeScsXG4gICAgICAgICAgICBjb250ZW50OiBwb3BvdmVySHRtbCxcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluaXRpYWxpemUgcG9wb3ZlclxuICAgICAgICBwb3BvdmVyID0gS1RBcHAuaW5pdEJvb3RzdHJhcFBvcG92ZXIoZWxlbWVudCwgb3B0aW9ucyk7XG5cbiAgICAgICAgLy8gU2hvdyBwb3BvdmVyXG4gICAgICAgIHBvcG92ZXIuc2hvdygpO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBwb3BvdmVyIHN0YXRlXG4gICAgICAgIHBvcG92ZXJTdGF0ZSA9IHRydWU7XG5cbiAgICAgICAgLy8gT3BlbiB2aWV3IGV2ZW50IG1vZGFsXG4gICAgICAgIGhhbmRsZVZpZXdCdXR0b24oKTtcbiAgICB9XG5cbiAgICAvLyBIaWRlIGFjdGl2ZSBwb3BvdmVyc1xuICAgIGNvbnN0IGhpZGVQb3BvdmVycyA9ICgpID0+IHtcbiAgICAgICAgaWYgKHBvcG92ZXJTdGF0ZSkge1xuICAgICAgICAgICAgcG9wb3Zlci5kaXNwb3NlKCk7XG4gICAgICAgICAgICBwb3BvdmVyU3RhdGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEluaXQgdmFsaWRhdG9yXG4gICAgY29uc3QgaW5pdFZhbGlkYXRvciA9ICgpID0+IHtcbiAgICAgICAgLy8gSW5pdCBmb3JtIHZhbGlkYXRpb24gcnVsZXMuIEZvciBtb3JlIGluZm8gY2hlY2sgdGhlIEZvcm1WYWxpZGF0aW9uIHBsdWdpbidzIG9mZmljaWFsIGRvY3VtZW50YXRpb246aHR0cHM6Ly9mb3JtdmFsaWRhdGlvbi5pby9cbiAgICAgICAgdmFsaWRhdG9yID0gRm9ybVZhbGlkYXRpb24uZm9ybVZhbGlkYXRpb24oXG4gICAgICAgICAgICBmb3JtLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICAgICAgICAnY2FsZW5kYXJfZXZlbnRfbmFtZSc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3RFbXB0eToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRXZlbnQgbmFtZSBpcyByZXF1aXJlZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdjYWxlbmRhcl9ldmVudF9zdGFydF9kYXRlJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdEVtcHR5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdTdGFydCBkYXRlIGlzIHJlcXVpcmVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ2NhbGVuZGFyX2V2ZW50X2VuZF9kYXRlJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdEVtcHR5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdFbmQgZGF0ZSBpcyByZXF1aXJlZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgcGx1Z2luczoge1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyOiBuZXcgRm9ybVZhbGlkYXRpb24ucGx1Z2lucy5UcmlnZ2VyKCksXG4gICAgICAgICAgICAgICAgICAgIGJvb3RzdHJhcDogbmV3IEZvcm1WYWxpZGF0aW9uLnBsdWdpbnMuQm9vdHN0cmFwNSh7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3dTZWxlY3RvcjogJy5mdi1yb3cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlSW52YWxpZENsYXNzOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZVZhbGlkQ2xhc3M6ICcnXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemUgZGF0ZXBpY2tlcnMgLS0tIG1vcmUgaW5mbzogaHR0cHM6Ly9mbGF0cGlja3IuanMub3JnL1xuICAgIGNvbnN0IGluaXREYXRlcGlja2VycyA9ICgpID0+IHtcbiAgICAgICAgc3RhcnRGbGF0cGlja3IgPSBmbGF0cGlja3Ioc3RhcnREYXRlcGlja2VyLCB7XG4gICAgICAgICAgICBlbmFibGVUaW1lOiBmYWxzZSxcbiAgICAgICAgICAgIGRhdGVGb3JtYXQ6IFwiWS1tLWRcIixcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZW5kRmxhdHBpY2tyID0gZmxhdHBpY2tyKGVuZERhdGVwaWNrZXIsIHtcbiAgICAgICAgICAgIGVuYWJsZVRpbWU6IGZhbHNlLFxuICAgICAgICAgICAgZGF0ZUZvcm1hdDogXCJZLW0tZFwiLFxuICAgICAgICB9KTtcblxuICAgICAgICBzdGFydFRpbWVGbGF0cGlja3IgPSBmbGF0cGlja3Ioc3RhcnRUaW1lcGlja2VyLCB7XG4gICAgICAgICAgICBlbmFibGVUaW1lOiB0cnVlLFxuICAgICAgICAgICAgbm9DYWxlbmRhcjogdHJ1ZSxcbiAgICAgICAgICAgIGRhdGVGb3JtYXQ6IFwiSDppXCIsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGVuZFRpbWVGbGF0cGlja3IgPSBmbGF0cGlja3IoZW5kVGltZXBpY2tlciwge1xuICAgICAgICAgICAgZW5hYmxlVGltZTogdHJ1ZSxcbiAgICAgICAgICAgIG5vQ2FsZW5kYXI6IHRydWUsXG4gICAgICAgICAgICBkYXRlRm9ybWF0OiBcIkg6aVwiLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgYWRkIGJ1dHRvblxuICAgIGNvbnN0IGhhbmRsZUFkZEJ1dHRvbiA9ICgpID0+IHtcbiAgICAgICAgYWRkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICAgICAgICBoaWRlUG9wb3ZlcnMoKTtcblxuICAgICAgICAgICAgLy8gUmVzZXQgZm9ybSBkYXRhXG4gICAgICAgICAgICBkYXRhID0ge1xuICAgICAgICAgICAgICAgIGlkOiAnJyxcbiAgICAgICAgICAgICAgICBldmVudE5hbWU6ICcnLFxuICAgICAgICAgICAgICAgIGV2ZW50RGVzY3JpcHRpb246ICcnLFxuICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZTogbmV3IERhdGUoKSxcbiAgICAgICAgICAgICAgICBlbmREYXRlOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICAgIGFsbERheTogZmFsc2VcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBoYW5kbGVOZXdFdmVudCgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgYWRkIG5ldyBldmVudFxuICAgIGNvbnN0IGhhbmRsZU5ld0V2ZW50ID0gKCkgPT4ge1xuICAgICAgICAvLyBVcGRhdGUgbW9kYWwgdGl0bGVcbiAgICAgICAgbW9kYWxUaXRsZS5pbm5lclRleHQgPSBcIkFkZCBhIE5ldyBFdmVudFwiO1xuXG4gICAgICAgIG1vZGFsLnNob3coKTtcblxuICAgICAgICAvLyBTZWxlY3QgZGF0ZXBpY2tlciB3cmFwcGVyIGVsZW1lbnRzXG4gICAgICAgIGNvbnN0IGRhdGVwaWNrZXJXcmFwcGVycyA9IGZvcm0ucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEta3QtY2FsZW5kYXI9XCJkYXRlcGlja2VyXCJdJyk7XG5cbiAgICAgICAgLy8gSGFuZGxlIGFsbCBkYXkgdG9nZ2xlXG4gICAgICAgIGNvbnN0IGFsbERheVRvZ2dsZSA9IGZvcm0ucXVlcnlTZWxlY3RvcignI2t0X2NhbGVuZGFyX2RhdGVwaWNrZXJfYWxsZGF5Jyk7XG4gICAgICAgIGFsbERheVRvZ2dsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICBkYXRlcGlja2VyV3JhcHBlcnMuZm9yRWFjaChkdyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGR3LmNsYXNzTGlzdC5hZGQoJ2Qtbm9uZScpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbmRGbGF0cGlja3Iuc2V0RGF0ZShkYXRhLnN0YXJ0RGF0ZSwgdHJ1ZSwgJ1ktbS1kJyk7XG4gICAgICAgICAgICAgICAgZGF0ZXBpY2tlcldyYXBwZXJzLmZvckVhY2goZHcgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkdy5jbGFzc0xpc3QucmVtb3ZlKCdkLW5vbmUnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcG9wdWxhdGVGb3JtKGRhdGEpO1xuXG4gICAgICAgIC8vIEhhbmRsZSBzdWJtaXQgZm9ybVxuICAgICAgICBzdWJtaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgLy8gUHJldmVudCBkZWZhdWx0IGJ1dHRvbiBhY3Rpb25cbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgLy8gVmFsaWRhdGUgZm9ybSBiZWZvcmUgc3VibWl0XG4gICAgICAgICAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yLnZhbGlkYXRlKCkudGhlbihmdW5jdGlvbiAoc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd2YWxpZGF0ZWQhJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSAnVmFsaWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTaG93IGxvYWRpbmcgaW5kaWNhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgc3VibWl0QnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS1rdC1pbmRpY2F0b3InLCAnb24nKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGlzYWJsZSBzdWJtaXQgYnV0dG9uIHdoaWxzdCBsb2FkaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTaW11bGF0ZSBmb3JtIHN1Ym1pc3Npb25cbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpbXVsYXRlIGZvcm0gc3VibWlzc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEta3QtaW5kaWNhdG9yJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaG93IHBvcHVwIGNvbmZpcm1hdGlvbiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTd2FsLmZpcmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIk5ldyBldmVudCBhZGRlZCB0byBjYWxlbmRhciFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tQ2xhc3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGJ0bi1wcmltYXJ5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmlzQ29uZmlybWVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RhbC5oaWRlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVuYWJsZSBzdWJtaXQgYnV0dG9uIGFmdGVyIGxvYWRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXRlY3QgaWYgaXMgYWxsIGRheSBldmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFsbERheUV2ZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWxsRGF5VG9nZ2xlLmNoZWNrZWQpIHsgYWxsRGF5RXZlbnQgPSB0cnVlOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnRUaW1lRmxhdHBpY2tyLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09PSAwKSB7IGFsbERheUV2ZW50ID0gdHJ1ZTsgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNZXJnZSBkYXRlICYgdGltZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0RGF0ZVRpbWUgPSBtb21lbnQoc3RhcnRGbGF0cGlja3Iuc2VsZWN0ZWREYXRlc1swXSkuZm9ybWF0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZW5kRGF0ZVRpbWUgPSBtb21lbnQoZW5kRmxhdHBpY2tyLnNlbGVjdGVkRGF0ZXNbZW5kRmxhdHBpY2tyLnNlbGVjdGVkRGF0ZXMubGVuZ3RoIC0gMV0pLmZvcm1hdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhbGxEYXlFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IG1vbWVudChzdGFydEZsYXRwaWNrci5zZWxlY3RlZERhdGVzWzBdKS5mb3JtYXQoJ1lZWVktTU0tREQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmREYXRlID0gc3RhcnREYXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IG1vbWVudChzdGFydFRpbWVGbGF0cGlja3Iuc2VsZWN0ZWREYXRlc1swXSkuZm9ybWF0KCdISDptbTpzcycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZFRpbWUgPSBtb21lbnQoZW5kVGltZUZsYXRwaWNrci5zZWxlY3RlZERhdGVzWzBdKS5mb3JtYXQoJ0hIOm1tOnNzJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydERhdGVUaW1lID0gc3RhcnREYXRlICsgJ1QnICsgc3RhcnRUaW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZERhdGVUaW1lID0gZW5kRGF0ZSArICdUJyArIGVuZFRpbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCBuZXcgZXZlbnQgdG8gY2FsZW5kYXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGVuZGFyLmFkZEV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogdWlkKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGV2ZW50TmFtZS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogZXZlbnREZXNjcmlwdGlvbi52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogZXZlbnRMb2NhdGlvbi52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogc3RhcnREYXRlVGltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGVuZERhdGVUaW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbERheTogYWxsRGF5RXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXIucmVuZGVyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlc2V0IGZvcm0gZm9yIGRlbW8gcHVycG9zZXMgb25seVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5yZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2Zvcm0uc3VibWl0KCk7IC8vIFN1Ym1pdCBmb3JtXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAyMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNob3cgcG9wdXAgd2FybmluZyBcbiAgICAgICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJTb3JyeSwgbG9va3MgbGlrZSB0aGVyZSBhcmUgc29tZSBlcnJvcnMgZGV0ZWN0ZWQsIHBsZWFzZSB0cnkgYWdhaW4uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogXCJlcnJvclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJPaywgZ290IGl0IVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGJ0bi1wcmltYXJ5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgZWRpdCBldmVudFxuICAgIGNvbnN0IGhhbmRsZUVkaXRFdmVudCA9ICgpID0+IHtcbiAgICAgICAgLy8gVXBkYXRlIG1vZGFsIHRpdGxlXG4gICAgICAgIG1vZGFsVGl0bGUuaW5uZXJUZXh0ID0gXCJFZGl0IGFuIEV2ZW50XCI7XG5cbiAgICAgICAgbW9kYWwuc2hvdygpO1xuXG4gICAgICAgIC8vIFNlbGVjdCBkYXRlcGlja2VyIHdyYXBwZXIgZWxlbWVudHNcbiAgICAgICAgY29uc3QgZGF0ZXBpY2tlcldyYXBwZXJzID0gZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1rdC1jYWxlbmRhcj1cImRhdGVwaWNrZXJcIl0nKTtcblxuICAgICAgICAvLyBIYW5kbGUgYWxsIGRheSB0b2dnbGVcbiAgICAgICAgY29uc3QgYWxsRGF5VG9nZ2xlID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcja3RfY2FsZW5kYXJfZGF0ZXBpY2tlcl9hbGxkYXknKTtcbiAgICAgICAgYWxsRGF5VG9nZ2xlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICAgICAgICBpZiAoZS50YXJnZXQuY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgIGRhdGVwaWNrZXJXcmFwcGVycy5mb3JFYWNoKGR3ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZHcuY2xhc3NMaXN0LmFkZCgnZC1ub25lJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVuZEZsYXRwaWNrci5zZXREYXRlKGRhdGEuc3RhcnREYXRlLCB0cnVlLCAnWS1tLWQnKTtcbiAgICAgICAgICAgICAgICBkYXRlcGlja2VyV3JhcHBlcnMuZm9yRWFjaChkdyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGR3LmNsYXNzTGlzdC5yZW1vdmUoJ2Qtbm9uZScpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBwb3B1bGF0ZUZvcm0oZGF0YSk7XG5cbiAgICAgICAgLy8gSGFuZGxlIHN1Ym1pdCBmb3JtXG4gICAgICAgIHN1Ym1pdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAvLyBQcmV2ZW50IGRlZmF1bHQgYnV0dG9uIGFjdGlvblxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAvLyBWYWxpZGF0ZSBmb3JtIGJlZm9yZSBzdWJtaXRcbiAgICAgICAgICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3IudmFsaWRhdGUoKS50aGVuKGZ1bmN0aW9uIChzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3ZhbGlkYXRlZCEnKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09ICdWYWxpZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNob3cgbG9hZGluZyBpbmRpY2F0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXRCdXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLWt0LWluZGljYXRvcicsICdvbicpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEaXNhYmxlIHN1Ym1pdCBidXR0b24gd2hpbHN0IGxvYWRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpbXVsYXRlIGZvcm0gc3VibWlzc2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2ltdWxhdGUgZm9ybSBzdWJtaXNzaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VibWl0QnV0dG9uLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1rdC1pbmRpY2F0b3InKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNob3cgcG9wdXAgY29uZmlybWF0aW9uIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiTmV3IGV2ZW50IGFkZGVkIHRvIGNhbGVuZGFyIVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJPaywgZ290IGl0IVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXCJidG4gYnRuLXByaW1hcnlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuaXNDb25maXJtZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLmhpZGUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRW5hYmxlIHN1Ym1pdCBidXR0b24gYWZ0ZXIgbG9hZGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VibWl0QnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBvbGQgZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGVuZGFyLmdldEV2ZW50QnlJZChkYXRhLmlkKS5yZW1vdmUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGV0ZWN0IGlmIGlzIGFsbCBkYXkgZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhbGxEYXlFdmVudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsbERheVRvZ2dsZS5jaGVja2VkKSB7IGFsbERheUV2ZW50ID0gdHJ1ZTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0VGltZUZsYXRwaWNrci5zZWxlY3RlZERhdGVzLmxlbmd0aCA9PT0gMCkgeyBhbGxEYXlFdmVudCA9IHRydWU7IH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWVyZ2UgZGF0ZSAmIHRpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGFydERhdGVUaW1lID0gbW9tZW50KHN0YXJ0RmxhdHBpY2tyLnNlbGVjdGVkRGF0ZXNbMF0pLmZvcm1hdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVuZERhdGVUaW1lID0gbW9tZW50KGVuZEZsYXRwaWNrci5zZWxlY3RlZERhdGVzW2VuZEZsYXRwaWNrci5zZWxlY3RlZERhdGVzLmxlbmd0aCAtIDFdKS5mb3JtYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYWxsRGF5RXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFydERhdGUgPSBtb21lbnQoc3RhcnRGbGF0cGlja3Iuc2VsZWN0ZWREYXRlc1swXSkuZm9ybWF0KCdZWVlZLU1NLUREJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kRGF0ZSA9IHN0YXJ0RGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBtb21lbnQoc3RhcnRUaW1lRmxhdHBpY2tyLnNlbGVjdGVkRGF0ZXNbMF0pLmZvcm1hdCgnSEg6bW06c3MnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmRUaW1lID0gbW9tZW50KGVuZFRpbWVGbGF0cGlja3Iuc2VsZWN0ZWREYXRlc1swXSkuZm9ybWF0KCdISDptbTpzcycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnREYXRlVGltZSA9IHN0YXJ0RGF0ZSArICdUJyArIHN0YXJ0VGltZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmREYXRlVGltZSA9IGVuZERhdGUgKyAnVCcgKyBlbmRUaW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgbmV3IGV2ZW50IHRvIGNhbGVuZGFyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxlbmRhci5hZGRFdmVudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHVpZCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBldmVudE5hbWUudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGV2ZW50RGVzY3JpcHRpb24udmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGV2ZW50TG9jYXRpb24udmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0RGF0ZVRpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBlbmREYXRlVGltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxEYXk6IGFsbERheUV2ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGVuZGFyLnJlbmRlcigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXNldCBmb3JtIGZvciBkZW1vIHB1cnBvc2VzIG9ubHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0ucmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9mb3JtLnN1Ym1pdCgpOyAvLyBTdWJtaXQgZm9ybVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMjAwMCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTaG93IHBvcHVwIHdhcm5pbmcgXG4gICAgICAgICAgICAgICAgICAgICAgICBTd2FsLmZpcmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiU29ycnksIGxvb2tzIGxpa2UgdGhlcmUgYXJlIHNvbWUgZXJyb3JzIGRldGVjdGVkLCBwbGVhc2UgdHJ5IGFnYWluLlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwiZXJyb3JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zU3R5bGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOiBcImJ0biBidG4tcHJpbWFyeVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHZpZXcgZXZlbnRcbiAgICBjb25zdCBoYW5kbGVWaWV3RXZlbnQgPSAoKSA9PiB7XG4gICAgICAgIHZpZXdNb2RhbC5zaG93KCk7XG5cbiAgICAgICAgLy8gRGV0ZWN0IGFsbCBkYXkgZXZlbnRcbiAgICAgICAgdmFyIGV2ZW50TmFtZU1vZDtcbiAgICAgICAgdmFyIHN0YXJ0RGF0ZU1vZDtcbiAgICAgICAgdmFyIGVuZERhdGVNb2Q7XG5cbiAgICAgICAgLy8gR2VuZXJhdGUgbGFiZWxzXG4gICAgICAgIGlmIChkYXRhLmFsbERheSkge1xuICAgICAgICAgICAgZXZlbnROYW1lTW9kID0gJ0FsbCBEYXknO1xuICAgICAgICAgICAgc3RhcnREYXRlTW9kID0gbW9tZW50KGRhdGEuc3RhcnREYXRlKS5mb3JtYXQoJ0RvIE1NTSwgWVlZWScpO1xuICAgICAgICAgICAgZW5kRGF0ZU1vZCA9IG1vbWVudChkYXRhLmVuZERhdGUpLmZvcm1hdCgnRG8gTU1NLCBZWVlZJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBldmVudE5hbWVNb2QgPSAnJztcbiAgICAgICAgICAgIHN0YXJ0RGF0ZU1vZCA9IG1vbWVudChkYXRhLnN0YXJ0RGF0ZSkuZm9ybWF0KCdEbyBNTU0sIFlZWVkgLSBoOm1tIGEnKTtcbiAgICAgICAgICAgIGVuZERhdGVNb2QgPSBtb21lbnQoZGF0YS5lbmREYXRlKS5mb3JtYXQoJ0RvIE1NTSwgWVlZWSAtIGg6bW0gYScpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUG9wdWxhdGUgdmlldyBkYXRhXG4gICAgICAgIHZpZXdFdmVudE5hbWUuaW5uZXJUZXh0ID0gZGF0YS5ldmVudE5hbWU7XG4gICAgICAgIHZpZXdBbGxEYXkuaW5uZXJUZXh0ID0gZXZlbnROYW1lTW9kO1xuICAgICAgICB2aWV3RXZlbnREZXNjcmlwdGlvbi5pbm5lclRleHQgPSBkYXRhLmV2ZW50RGVzY3JpcHRpb24gPyBkYXRhLmV2ZW50RGVzY3JpcHRpb24gOiAnLS0nO1xuICAgICAgICB2aWV3RXZlbnRMb2NhdGlvbi5pbm5lclRleHQgPSBkYXRhLmV2ZW50TG9jYXRpb24gPyBkYXRhLmV2ZW50TG9jYXRpb24gOiAnLS0nO1xuICAgICAgICB2aWV3U3RhcnREYXRlLmlubmVyVGV4dCA9IHN0YXJ0RGF0ZU1vZDtcbiAgICAgICAgdmlld0VuZERhdGUuaW5uZXJUZXh0ID0gZW5kRGF0ZU1vZDtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgZGVsZXRlIGV2ZW50XG4gICAgY29uc3QgaGFuZGxlRGVsZXRlRXZlbnQgPSAoKSA9PiB7XG4gICAgICAgIHZpZXdEZWxldGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgU3dhbC5maXJlKHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkFyZSB5b3Ugc3VyZSB5b3Ugd291bGQgbGlrZSB0byBkZWxldGUgdGhpcyBldmVudD9cIixcbiAgICAgICAgICAgICAgICBpY29uOiBcIndhcm5pbmdcIixcbiAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxuICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJZZXMsIGRlbGV0ZSBpdCFcIixcbiAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcIk5vLCByZXR1cm5cIixcbiAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xuICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOiBcImJ0biBidG4tcHJpbWFyeVwiLFxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b246IFwiYnRuIGJ0bi1hY3RpdmUtbGlnaHRcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXIuZ2V0RXZlbnRCeUlkKGRhdGEuaWQpLnJlbW92ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZpZXdNb2RhbC5oaWRlKCk7IC8vIEhpZGUgbW9kYWxcdFx0XHRcdFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0LmRpc21pc3MgPT09ICdjYW5jZWwnKSB7XG4gICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIllvdXIgZXZlbnQgd2FzIG5vdCBkZWxldGVkIS5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwiZXJyb3JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rLCBnb3QgaXQhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGJ0bi1wcmltYXJ5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgZWRpdCBidXR0b25cbiAgICBjb25zdCBoYW5kbGVFZGl0QnV0dG9uID0gKCkgPT4ge1xuICAgICAgICB2aWV3RWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICB2aWV3TW9kYWwuaGlkZSgpO1xuICAgICAgICAgICAgaGFuZGxlRWRpdEV2ZW50KCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBjYW5jZWwgYnV0dG9uXG4gICAgY29uc3QgaGFuZGxlQ2FuY2VsQnV0dG9uID0gKCkgPT4ge1xuICAgICAgICAvLyBFZGl0IGV2ZW50IG1vZGFsIGNhbmNlbCBidXR0b25cbiAgICAgICAgY2FuY2VsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgU3dhbC5maXJlKHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkFyZSB5b3Ugc3VyZSB5b3Ugd291bGQgbGlrZSB0byBjYW5jZWw/XCIsXG4gICAgICAgICAgICAgICAgaWNvbjogXCJ3YXJuaW5nXCIsXG4gICAgICAgICAgICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBidXR0b25zU3R5bGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiWWVzLCBjYW5jZWwgaXQhXCIsXG4gICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogXCJObywgcmV0dXJuXCIsXG4gICAgICAgICAgICAgICAgY3VzdG9tQ2xhc3M6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXCJidG4gYnRuLXByaW1hcnlcIixcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uOiBcImJ0biBidG4tYWN0aXZlLWxpZ2h0XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm0ucmVzZXQoKTsgLy8gUmVzZXQgZm9ybVx0XG4gICAgICAgICAgICAgICAgICAgIG1vZGFsLmhpZGUoKTsgLy8gSGlkZSBtb2RhbFx0XHRcdFx0XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuZGlzbWlzcyA9PT0gJ2NhbmNlbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgU3dhbC5maXJlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiWW91ciBmb3JtIGhhcyBub3QgYmVlbiBjYW5jZWxsZWQhLlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogXCJlcnJvclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXCJidG4gYnRuLXByaW1hcnlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBjbG9zZSBidXR0b25cbiAgICBjb25zdCBoYW5kbGVDbG9zZUJ1dHRvbiA9ICgpID0+IHtcbiAgICAgICAgLy8gRWRpdCBldmVudCBtb2RhbCBjbG9zZSBidXR0b25cbiAgICAgICAgY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICBTd2FsLmZpcmUoe1xuICAgICAgICAgICAgICAgIHRleHQ6IFwiQXJlIHlvdSBzdXJlIHlvdSB3b3VsZCBsaWtlIHRvIGNhbmNlbD9cIixcbiAgICAgICAgICAgICAgICBpY29uOiBcIndhcm5pbmdcIixcbiAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxuICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJZZXMsIGNhbmNlbCBpdCFcIixcbiAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcIk5vLCByZXR1cm5cIixcbiAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xuICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOiBcImJ0biBidG4tcHJpbWFyeVwiLFxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b246IFwiYnRuIGJ0bi1hY3RpdmUtbGlnaHRcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybS5yZXNldCgpOyAvLyBSZXNldCBmb3JtXHRcbiAgICAgICAgICAgICAgICAgICAgbW9kYWwuaGlkZSgpOyAvLyBIaWRlIG1vZGFsXHRcdFx0XHRcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC5kaXNtaXNzID09PSAnY2FuY2VsJykge1xuICAgICAgICAgICAgICAgICAgICBTd2FsLmZpcmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJZb3VyIGZvcm0gaGFzIG5vdCBiZWVuIGNhbmNlbGxlZCEuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBcImVycm9yXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b25zU3R5bGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJPaywgZ290IGl0IVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tQ2xhc3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOiBcImJ0biBidG4tcHJpbWFyeVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHZpZXcgYnV0dG9uXG4gICAgY29uc3QgaGFuZGxlVmlld0J1dHRvbiA9ICgpID0+IHtcbiAgICAgICAgY29uc3Qgdmlld0J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNrdF9jYWxlbmRhcl9ldmVudF92aWV3X2J1dHRvbicpO1xuICAgICAgICB2aWV3QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIGhpZGVQb3BvdmVycygpO1xuICAgICAgICAgICAgaGFuZGxlVmlld0V2ZW50KCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEhlbHBlciBmdW5jdGlvbnNcblxuICAgIC8vIFJlc2V0IGZvcm0gdmFsaWRhdG9yIG9uIG1vZGFsIGNsb3NlXG4gICAgY29uc3QgcmVzZXRGb3JtVmFsaWRhdG9yID0gKGVsZW1lbnQpID0+IHtcbiAgICAgICAgLy8gVGFyZ2V0IG1vZGFsIGhpZGRlbiBldmVudCAtLS0gRm9yIG1vcmUgaW5mbzogaHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvNS4wL2NvbXBvbmVudHMvbW9kYWwvI2V2ZW50c1xuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2hpZGRlbi5icy5tb2RhbCcsIGUgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgICAgICAgICAgIC8vIFJlc2V0IGZvcm0gdmFsaWRhdG9yLiBGb3IgbW9yZSBpbmZvOiBodHRwczovL2Zvcm12YWxpZGF0aW9uLmlvL2d1aWRlL2FwaS9yZXNldC1mb3JtXG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yLnJlc2V0Rm9ybSh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUG9wdWxhdGUgZm9ybSBcbiAgICBjb25zdCBwb3B1bGF0ZUZvcm0gPSAoKSA9PiB7XG4gICAgICAgIGV2ZW50TmFtZS52YWx1ZSA9IGRhdGEuZXZlbnROYW1lID8gZGF0YS5ldmVudE5hbWUgOiAnJztcbiAgICAgICAgZXZlbnREZXNjcmlwdGlvbi52YWx1ZSA9IGRhdGEuZXZlbnREZXNjcmlwdGlvbiA/IGRhdGEuZXZlbnREZXNjcmlwdGlvbiA6ICcnO1xuICAgICAgICBldmVudExvY2F0aW9uLnZhbHVlID0gZGF0YS5ldmVudExvY2F0aW9uID8gZGF0YS5ldmVudExvY2F0aW9uIDogJyc7XG4gICAgICAgIHN0YXJ0RmxhdHBpY2tyLnNldERhdGUoZGF0YS5zdGFydERhdGUsIHRydWUsICdZLW0tZCcpO1xuXG4gICAgICAgIC8vIEhhbmRsZSBudWxsIGVuZCBkYXRlc1xuICAgICAgICBjb25zdCBlbmREYXRlID0gZGF0YS5lbmREYXRlID8gZGF0YS5lbmREYXRlIDogbW9tZW50KGRhdGEuc3RhcnREYXRlKS5mb3JtYXQoKTtcbiAgICAgICAgZW5kRmxhdHBpY2tyLnNldERhdGUoZW5kRGF0ZSwgdHJ1ZSwgJ1ktbS1kJyk7XG5cbiAgICAgICAgY29uc3QgYWxsRGF5VG9nZ2xlID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcja3RfY2FsZW5kYXJfZGF0ZXBpY2tlcl9hbGxkYXknKTtcbiAgICAgICAgY29uc3QgZGF0ZXBpY2tlcldyYXBwZXJzID0gZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1rdC1jYWxlbmRhcj1cImRhdGVwaWNrZXJcIl0nKTtcbiAgICAgICAgaWYgKGRhdGEuYWxsRGF5KSB7XG4gICAgICAgICAgICBhbGxEYXlUb2dnbGUuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICBkYXRlcGlja2VyV3JhcHBlcnMuZm9yRWFjaChkdyA9PiB7XG4gICAgICAgICAgICAgICAgZHcuY2xhc3NMaXN0LmFkZCgnZC1ub25lJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXJ0VGltZUZsYXRwaWNrci5zZXREYXRlKGRhdGEuc3RhcnREYXRlLCB0cnVlLCAnWS1tLWQgSDppJyk7XG4gICAgICAgICAgICBlbmRUaW1lRmxhdHBpY2tyLnNldERhdGUoZGF0YS5lbmREYXRlLCB0cnVlLCAnWS1tLWQgSDppJyk7XG4gICAgICAgICAgICBlbmRGbGF0cGlja3Iuc2V0RGF0ZShkYXRhLnN0YXJ0RGF0ZSwgdHJ1ZSwgJ1ktbS1kJyk7XG4gICAgICAgICAgICBhbGxEYXlUb2dnbGUuY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgZGF0ZXBpY2tlcldyYXBwZXJzLmZvckVhY2goZHcgPT4ge1xuICAgICAgICAgICAgICAgIGR3LmNsYXNzTGlzdC5yZW1vdmUoJ2Qtbm9uZScpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGb3JtYXQgRnVsbENhbGVuZGFyIHJlcG9uc2VzXG4gICAgY29uc3QgZm9ybWF0QXJncyA9IChyZXMpID0+IHtcbiAgICAgICAgZGF0YS5pZCA9IHJlcy5pZDtcbiAgICAgICAgZGF0YS5ldmVudE5hbWUgPSByZXMudGl0bGU7XG4gICAgICAgIGRhdGEuZXZlbnREZXNjcmlwdGlvbiA9IHJlcy5kZXNjcmlwdGlvbjtcbiAgICAgICAgZGF0YS5ldmVudExvY2F0aW9uID0gcmVzLmxvY2F0aW9uO1xuICAgICAgICBkYXRhLnN0YXJ0RGF0ZSA9IHJlcy5zdGFydFN0cjtcbiAgICAgICAgZGF0YS5lbmREYXRlID0gcmVzLmVuZFN0cjtcbiAgICAgICAgZGF0YS5hbGxEYXkgPSByZXMuYWxsRGF5O1xuICAgIH1cblxuICAgIC8vIEdlbmVyYXRlIHVuaXF1ZSBJRHMgZm9yIGV2ZW50c1xuICAgIGNvbnN0IHVpZCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIERhdGUubm93KCkudG9TdHJpbmcoKSArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDApLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgLy8gUHVibGljIEZ1bmN0aW9uc1xuICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBEZWZpbmUgdmFyaWFibGVzXG4gICAgICAgICAgICAvLyBBZGQgZXZlbnQgbW9kYWxcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgna3RfbW9kYWxfYWRkX2V2ZW50Jyk7XG4gICAgICAgICAgICBmb3JtID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcja3RfbW9kYWxfYWRkX2V2ZW50X2Zvcm0nKTtcbiAgICAgICAgICAgIGV2ZW50TmFtZSA9IGZvcm0ucXVlcnlTZWxlY3RvcignW25hbWU9XCJjYWxlbmRhcl9ldmVudF9uYW1lXCJdJyk7XG4gICAgICAgICAgICBldmVudERlc2NyaXB0aW9uID0gZm9ybS5xdWVyeVNlbGVjdG9yKCdbbmFtZT1cImNhbGVuZGFyX2V2ZW50X2Rlc2NyaXB0aW9uXCJdJyk7XG4gICAgICAgICAgICBldmVudExvY2F0aW9uID0gZm9ybS5xdWVyeVNlbGVjdG9yKCdbbmFtZT1cImNhbGVuZGFyX2V2ZW50X2xvY2F0aW9uXCJdJyk7XG4gICAgICAgICAgICBzdGFydERhdGVwaWNrZXIgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJyNrdF9jYWxlbmRhcl9kYXRlcGlja2VyX3N0YXJ0X2RhdGUnKTtcbiAgICAgICAgICAgIGVuZERhdGVwaWNrZXIgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJyNrdF9jYWxlbmRhcl9kYXRlcGlja2VyX2VuZF9kYXRlJyk7XG4gICAgICAgICAgICBzdGFydFRpbWVwaWNrZXIgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJyNrdF9jYWxlbmRhcl9kYXRlcGlja2VyX3N0YXJ0X3RpbWUnKTtcbiAgICAgICAgICAgIGVuZFRpbWVwaWNrZXIgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJyNrdF9jYWxlbmRhcl9kYXRlcGlja2VyX2VuZF90aW1lJyk7XG4gICAgICAgICAgICBhZGRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1jYWxlbmRhcj1cImFkZFwiXScpO1xuICAgICAgICAgICAgc3VibWl0QnV0dG9uID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcja3RfbW9kYWxfYWRkX2V2ZW50X3N1Ym1pdCcpO1xuICAgICAgICAgICAgY2FuY2VsQnV0dG9uID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcja3RfbW9kYWxfYWRkX2V2ZW50X2NhbmNlbCcpO1xuICAgICAgICAgICAgY2xvc2VCdXR0b24gPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJyNrdF9tb2RhbF9hZGRfZXZlbnRfY2xvc2UnKTtcbiAgICAgICAgICAgIG1vZGFsVGl0bGUgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWt0LWNhbGVuZGFyPVwidGl0bGVcIl0nKTtcbiAgICAgICAgICAgIG1vZGFsID0gbmV3IGJvb3RzdHJhcC5Nb2RhbChlbGVtZW50KTtcblxuICAgICAgICAgICAgLy8gVmlldyBldmVudCBtb2RhbFxuICAgICAgICAgICAgY29uc3Qgdmlld0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgna3RfbW9kYWxfdmlld19ldmVudCcpO1xuICAgICAgICAgICAgdmlld01vZGFsID0gbmV3IGJvb3RzdHJhcC5Nb2RhbCh2aWV3RWxlbWVudCk7XG4gICAgICAgICAgICB2aWV3RXZlbnROYW1lID0gdmlld0VsZW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEta3QtY2FsZW5kYXI9XCJldmVudF9uYW1lXCJdJyk7XG4gICAgICAgICAgICB2aWV3QWxsRGF5ID0gdmlld0VsZW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEta3QtY2FsZW5kYXI9XCJhbGxfZGF5XCJdJyk7XG4gICAgICAgICAgICB2aWV3RXZlbnREZXNjcmlwdGlvbiA9IHZpZXdFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWt0LWNhbGVuZGFyPVwiZXZlbnRfZGVzY3JpcHRpb25cIl0nKTtcbiAgICAgICAgICAgIHZpZXdFdmVudExvY2F0aW9uID0gdmlld0VsZW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEta3QtY2FsZW5kYXI9XCJldmVudF9sb2NhdGlvblwiXScpO1xuICAgICAgICAgICAgdmlld1N0YXJ0RGF0ZSA9IHZpZXdFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWt0LWNhbGVuZGFyPVwiZXZlbnRfc3RhcnRfZGF0ZVwiXScpO1xuICAgICAgICAgICAgdmlld0VuZERhdGUgPSB2aWV3RWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1jYWxlbmRhcj1cImV2ZW50X2VuZF9kYXRlXCJdJyk7XG4gICAgICAgICAgICB2aWV3RWRpdEJ1dHRvbiA9IHZpZXdFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJyNrdF9tb2RhbF92aWV3X2V2ZW50X2VkaXQnKTtcbiAgICAgICAgICAgIHZpZXdEZWxldGVCdXR0b24gPSB2aWV3RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcja3RfbW9kYWxfdmlld19ldmVudF9kZWxldGUnKTtcblxuICAgICAgICAgICAgaW5pdENhbGVuZGFyQXBwKCk7XG4gICAgICAgICAgICBpbml0VmFsaWRhdG9yKCk7XG4gICAgICAgICAgICBpbml0RGF0ZXBpY2tlcnMoKTtcbiAgICAgICAgICAgIGhhbmRsZUVkaXRCdXR0b24oKTtcbiAgICAgICAgICAgIGhhbmRsZUFkZEJ1dHRvbigpO1xuICAgICAgICAgICAgaGFuZGxlRGVsZXRlRXZlbnQoKTtcbiAgICAgICAgICAgIGhhbmRsZUNhbmNlbEJ1dHRvbigpO1xuICAgICAgICAgICAgaGFuZGxlQ2xvc2VCdXR0b24oKTtcbiAgICAgICAgICAgIHJlc2V0Rm9ybVZhbGlkYXRvcihlbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH07XG59KCk7XG5cbi8vIE9uIGRvY3VtZW50IHJlYWR5XG5LVFV0aWwub25ET01Db250ZW50TG9hZGVkKGZ1bmN0aW9uICgpIHtcbiAgICBLVEFwcENhbGVuZGFyLmluaXQoKTtcbn0pO1xuIl0sIm5hbWVzIjpbIktUQXBwQ2FsZW5kYXIiLCJjYWxlbmRhciIsImRhdGEiLCJpZCIsImV2ZW50TmFtZSIsImV2ZW50RGVzY3JpcHRpb24iLCJldmVudExvY2F0aW9uIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsImFsbERheSIsInBvcG92ZXIiLCJwb3BvdmVyU3RhdGUiLCJzdGFydERhdGVwaWNrZXIiLCJzdGFydEZsYXRwaWNrciIsImVuZERhdGVwaWNrZXIiLCJlbmRGbGF0cGlja3IiLCJzdGFydFRpbWVwaWNrZXIiLCJzdGFydFRpbWVGbGF0cGlja3IiLCJlbmRUaW1lcGlja2VyIiwiZW5kVGltZUZsYXRwaWNrciIsIm1vZGFsIiwibW9kYWxUaXRsZSIsImZvcm0iLCJ2YWxpZGF0b3IiLCJhZGRCdXR0b24iLCJzdWJtaXRCdXR0b24iLCJjYW5jZWxCdXR0b24iLCJjbG9zZUJ1dHRvbiIsInZpZXdFdmVudE5hbWUiLCJ2aWV3QWxsRGF5Iiwidmlld0V2ZW50RGVzY3JpcHRpb24iLCJ2aWV3RXZlbnRMb2NhdGlvbiIsInZpZXdTdGFydERhdGUiLCJ2aWV3RW5kRGF0ZSIsInZpZXdNb2RhbCIsInZpZXdFZGl0QnV0dG9uIiwidmlld0RlbGV0ZUJ1dHRvbiIsImluaXRDYWxlbmRhckFwcCIsImNhbGVuZGFyRWwiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwidG9kYXlEYXRlIiwibW9tZW50Iiwic3RhcnRPZiIsIllNIiwiZm9ybWF0IiwiWUVTVEVSREFZIiwiY2xvbmUiLCJzdWJ0cmFjdCIsIlRPREFZIiwiVE9NT1JST1ciLCJhZGQiLCJGdWxsQ2FsZW5kYXIiLCJDYWxlbmRhciIsImhlYWRlclRvb2xiYXIiLCJsZWZ0IiwiY2VudGVyIiwicmlnaHQiLCJpbml0aWFsRGF0ZSIsIm5hdkxpbmtzIiwic2VsZWN0YWJsZSIsInNlbGVjdE1pcnJvciIsInNlbGVjdCIsImFyZyIsImhpZGVQb3BvdmVycyIsImZvcm1hdEFyZ3MiLCJoYW5kbGVOZXdFdmVudCIsImV2ZW50Q2xpY2siLCJldmVudCIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJleHRlbmRlZFByb3BzIiwibG9jYXRpb24iLCJzdGFydFN0ciIsImVuZFN0ciIsImhhbmRsZVZpZXdFdmVudCIsImV2ZW50TW91c2VFbnRlciIsImluaXRQb3BvdmVycyIsImVsIiwiZWRpdGFibGUiLCJkYXlNYXhFdmVudHMiLCJldmVudHMiLCJ1aWQiLCJzdGFydCIsImVuZCIsImNsYXNzTmFtZSIsImRhdGVzU2V0IiwicmVuZGVyIiwiZWxlbWVudCIsInBvcG92ZXJIdG1sIiwib3B0aW9ucyIsImNvbnRhaW5lciIsInRyaWdnZXIiLCJib3VuZGFyeSIsInBsYWNlbWVudCIsImRpc21pc3MiLCJodG1sIiwiY29udGVudCIsIktUQXBwIiwiaW5pdEJvb3RzdHJhcFBvcG92ZXIiLCJzaG93IiwiaGFuZGxlVmlld0J1dHRvbiIsImRpc3Bvc2UiLCJpbml0VmFsaWRhdG9yIiwiRm9ybVZhbGlkYXRpb24iLCJmb3JtVmFsaWRhdGlvbiIsImZpZWxkcyIsInZhbGlkYXRvcnMiLCJub3RFbXB0eSIsIm1lc3NhZ2UiLCJwbHVnaW5zIiwiVHJpZ2dlciIsImJvb3RzdHJhcCIsIkJvb3RzdHJhcDUiLCJyb3dTZWxlY3RvciIsImVsZUludmFsaWRDbGFzcyIsImVsZVZhbGlkQ2xhc3MiLCJpbml0RGF0ZXBpY2tlcnMiLCJmbGF0cGlja3IiLCJlbmFibGVUaW1lIiwiZGF0ZUZvcm1hdCIsIm5vQ2FsZW5kYXIiLCJoYW5kbGVBZGRCdXR0b24iLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsIkRhdGUiLCJpbm5lclRleHQiLCJkYXRlcGlja2VyV3JhcHBlcnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYWxsRGF5VG9nZ2xlIiwicXVlcnlTZWxlY3RvciIsInRhcmdldCIsImNoZWNrZWQiLCJmb3JFYWNoIiwiZHciLCJjbGFzc0xpc3QiLCJzZXREYXRlIiwicmVtb3ZlIiwicG9wdWxhdGVGb3JtIiwicHJldmVudERlZmF1bHQiLCJ2YWxpZGF0ZSIsInRoZW4iLCJzdGF0dXMiLCJjb25zb2xlIiwibG9nIiwic2V0QXR0cmlidXRlIiwiZGlzYWJsZWQiLCJzZXRUaW1lb3V0IiwicmVtb3ZlQXR0cmlidXRlIiwiU3dhbCIsImZpcmUiLCJ0ZXh0IiwiaWNvbiIsImJ1dHRvbnNTdHlsaW5nIiwiY29uZmlybUJ1dHRvblRleHQiLCJjdXN0b21DbGFzcyIsImNvbmZpcm1CdXR0b24iLCJyZXN1bHQiLCJpc0NvbmZpcm1lZCIsImhpZGUiLCJhbGxEYXlFdmVudCIsInNlbGVjdGVkRGF0ZXMiLCJsZW5ndGgiLCJzdGFydERhdGVUaW1lIiwiZW5kRGF0ZVRpbWUiLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwiYWRkRXZlbnQiLCJ2YWx1ZSIsInJlc2V0IiwiaGFuZGxlRWRpdEV2ZW50IiwiZ2V0RXZlbnRCeUlkIiwiZXZlbnROYW1lTW9kIiwic3RhcnREYXRlTW9kIiwiZW5kRGF0ZU1vZCIsImhhbmRsZURlbGV0ZUV2ZW50Iiwic2hvd0NhbmNlbEJ1dHRvbiIsImNhbmNlbEJ1dHRvblRleHQiLCJoYW5kbGVFZGl0QnV0dG9uIiwiaGFuZGxlQ2FuY2VsQnV0dG9uIiwiaGFuZGxlQ2xvc2VCdXR0b24iLCJ2aWV3QnV0dG9uIiwicmVzZXRGb3JtVmFsaWRhdG9yIiwicmVzZXRGb3JtIiwicmVzIiwibm93IiwidG9TdHJpbmciLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJpbml0IiwiTW9kYWwiLCJ2aWV3RWxlbWVudCIsIktUVXRpbCIsIm9uRE9NQ29udGVudExvYWRlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/theme/js/custom/apps/calendar/calendar.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/theme/js/custom/apps/calendar/calendar.js"]();
/******/ 	
/******/ })()
;