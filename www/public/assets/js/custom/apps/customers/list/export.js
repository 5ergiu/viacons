/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/theme/js/custom/apps/customers/list/export.js":
/*!*****************************************************************!*\
  !*** ./resources/theme/js/custom/apps/customers/list/export.js ***!
  \*****************************************************************/
/***/ (() => {

eval(" // Class definition\n\nvar KTCustomersExport = function () {\n  var element;\n  var submitButton;\n  var cancelButton;\n  var closeButton;\n  var validator;\n  var form;\n  var modal; // Init form inputs\n\n  var handleForm = function handleForm() {\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n    validator = FormValidation.formValidation(form, {\n      fields: {\n        'date': {\n          validators: {\n            notEmpty: {\n              message: 'Date range is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    }); // Action buttons\n\n    submitButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      var dateEls = form.querySelectorAll(\"input\"); // Disable form on submit click\n\n      dateEls.forEach(function (dateEl) {\n        dateEl.disabled = true;\n      }); // Validate form before submit\n\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n\n          if (status == 'Valid') {\n            submitButton.setAttribute('data-kt-indicator', 'on'); // Disable submit button whilst loading\n\n            submitButton.disabled = true;\n            setTimeout(function () {\n              submitButton.removeAttribute('data-kt-indicator');\n              Swal.fire({\n                text: \"Customer list has been successfully exported!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Ok, got it!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  modal.hide(); // Enable submit button after loading\n\n                  submitButton.disabled = false; // Enable datepicker after loading\n\n                  dateEls.forEach(function (dateEl) {\n                    dateEl.disabled = false;\n                  });\n                }\n              }); //form.submit(); // Submit form\n            }, 2000);\n          } else {\n            Swal.fire({\n              text: \"Sorry, looks like there are some errors detected, please try again.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Ok, got it!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            }).then(function () {\n              // Enable datepicker after loading\n              dateEls.forEach(function (dateEl) {\n                dateEl.disabled = false;\n              });\n            });\n          }\n        });\n      }\n    });\n    cancelButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      var dateEls = form.querySelectorAll(\"input\"); // Disable form on submit click\n\n      dateEls.forEach(function (dateEl) {\n        dateEl.disabled = true;\n      });\n      Swal.fire({\n        text: \"Are you sure you would like to cancel?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, cancel it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          form.reset(); // Reset form\t\n\n          modal.hide(); // Hide modal\t\t\n          // Enable datepicker after loading\n\n          dateEls.forEach(function (dateEl) {\n            dateEl.disabled = false;\n          });\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been cancelled!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          }).then(function () {\n            // Enable datepicker after loading\n            dateEls.forEach(function (dateEl) {\n              dateEl.disabled = false;\n            });\n          });\n        }\n      });\n    });\n    closeButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      var dateEls = form.querySelectorAll(\"input\"); // Disable form on submit click\n\n      dateEls.forEach(function (dateEl) {\n        dateEl.disabled = true;\n      });\n      Swal.fire({\n        text: \"Are you sure you would like to cancel?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, cancel it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          form.reset(); // Reset form\t\n\n          modal.hide(); // Hide modal\t\t\t\n          // Enable datepicker after loading\n\n          dateEls.forEach(function (dateEl) {\n            dateEl.disabled = false;\n          });\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been cancelled!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          }).then(function () {\n            // Enable datepicker after loading\n            dateEls.forEach(function (dateEl) {\n              dateEl.disabled = false;\n            });\n          });\n        }\n      });\n    });\n  };\n\n  var initForm = function initForm() {\n    var datepicker = form.querySelector(\"[name=date]\"); // Handle datepicker range -- For more info on flatpickr plugin, please visit: https://flatpickr.js.org/\n\n    $(datepicker).flatpickr({\n      altInput: true,\n      altFormat: \"F j, Y\",\n      dateFormat: \"Y-m-d\",\n      mode: \"range\"\n    });\n  };\n\n  return {\n    // Public functions\n    init: function init() {\n      // Elements\n      element = document.querySelector('#kt_customers_export_modal');\n      modal = new bootstrap.Modal(element);\n      form = document.querySelector('#kt_customers_export_form');\n      submitButton = form.querySelector('#kt_customers_export_submit');\n      cancelButton = form.querySelector('#kt_customers_export_cancel');\n      closeButton = element.querySelector('#kt_customers_export_close');\n      handleForm();\n      initForm();\n    }\n  };\n}(); // On document ready\n\n\nKTUtil.onDOMContentLoaded(function () {\n  KTCustomersExport.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/theme/js/custom/apps/customers/list/export.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/theme/js/custom/apps/customers/list/export.js"]();
/******/ 	
/******/ })()
;